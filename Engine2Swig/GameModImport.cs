//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.7
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class GameModImport : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal GameModImport(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(GameModImport obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~GameModImport() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          Engine2PINVOKE.delete_GameModImport(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public SWIGTYPE_p_IMeshArray pArray {
    set {
      Engine2PINVOKE.GameModImport_pArray_set(swigCPtr, SWIGTYPE_p_IMeshArray.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = Engine2PINVOKE.GameModImport_pArray_get(swigCPtr);
      SWIGTYPE_p_IMeshArray ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_IMeshArray(cPtr, false);
      return ret;
    } 
  }

  public IRender pRender {
    set {
      Engine2PINVOKE.GameModImport_pRender_set(swigCPtr, IRender.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = Engine2PINVOKE.GameModImport_pRender_get(swigCPtr);
      IRender ret = (cPtr == global::System.IntPtr.Zero) ? null : new IRender(cPtr, false);
      return ret;
    } 
  }

  public IScene pScene {
    set {
      Engine2PINVOKE.GameModImport_pScene_set(swigCPtr, IScene.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = Engine2PINVOKE.GameModImport_pScene_get(swigCPtr);
      IScene ret = (cPtr == global::System.IntPtr.Zero) ? null : new IScene(cPtr, false);
      return ret;
    } 
  }

  public ICore pCore {
    set {
      Engine2PINVOKE.GameModImport_pCore_set(swigCPtr, ICore.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = Engine2PINVOKE.GameModImport_pCore_get(swigCPtr);
      ICore ret = (cPtr == global::System.IntPtr.Zero) ? null : new ICore(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_ISoundLib pSoundLib {
    set {
      Engine2PINVOKE.GameModImport_pSoundLib_set(swigCPtr, SWIGTYPE_p_ISoundLib.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = Engine2PINVOKE.GameModImport_pSoundLib_get(swigCPtr);
      SWIGTYPE_p_ISoundLib ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ISoundLib(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_IControlsManager pControlsManager {
    set {
      Engine2PINVOKE.GameModImport_pControlsManager_set(swigCPtr, SWIGTYPE_p_IControlsManager.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = Engine2PINVOKE.GameModImport_pControlsManager_get(swigCPtr);
      SWIGTYPE_p_IControlsManager ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_IControlsManager(cPtr, false);
      return ret;
    } 
  }

  public CXmlParams pConsole {
    set {
      Engine2PINVOKE.GameModImport_pConsole_set(swigCPtr, CXmlParams.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = Engine2PINVOKE.GameModImport_pConsole_get(swigCPtr);
      CXmlParams ret = (cPtr == global::System.IntPtr.Zero) ? null : new CXmlParams(cPtr, false);
      return ret;
    } 
  }

  public CXmlElement pGameConfig {
    set {
      Engine2PINVOKE.GameModImport_pGameConfig_set(swigCPtr, CXmlElement.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = Engine2PINVOKE.GameModImport_pGameConfig_get(swigCPtr);
      CXmlElement ret = (cPtr == global::System.IntPtr.Zero) ? null : new CXmlElement(cPtr, false);
      return ret;
    } 
  }

  public GameModImport() : this(Engine2PINVOKE.new_GameModImport(), true) {
  }

}
