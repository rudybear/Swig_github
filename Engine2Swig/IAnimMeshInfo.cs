//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.7
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class IAnimMeshInfo : IBaseMeshInfo {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal IAnimMeshInfo(global::System.IntPtr cPtr, bool cMemoryOwn) : base(Engine2PINVOKE.IAnimMeshInfo_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IAnimMeshInfo obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~IAnimMeshInfo() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          Engine2PINVOKE.delete_IAnimMeshInfo(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public virtual int LoadAnimationSet(string arg0) {
    int ret = Engine2PINVOKE.IAnimMeshInfo_LoadAnimationSet(swigCPtr, arg0);
    return ret;
  }

  public override int LoadAnimation(string arg0) {
    int ret = Engine2PINVOKE.IAnimMeshInfo_LoadAnimation(swigCPtr, arg0);
    return ret;
  }

  public override void UnloadAnimation(uint arg0) {
    Engine2PINVOKE.IAnimMeshInfo_UnloadAnimation(swigCPtr, arg0);
  }

  public override void UnloadAnimations() {
    Engine2PINVOKE.IAnimMeshInfo_UnloadAnimations(swigCPtr);
  }

  public override int GetNumAnimations() {
    int ret = Engine2PINVOKE.IAnimMeshInfo_GetNumAnimations(swigCPtr);
    return ret;
  }

  public override string GetAnimationName(uint arg0) {
    string ret = Engine2PINVOKE.IAnimMeshInfo_GetAnimationName(swigCPtr, arg0);
    return ret;
  }

  public override int GetAnimationID(string arg0) {
    int ret = Engine2PINVOKE.IAnimMeshInfo_GetAnimationID(swigCPtr, arg0);
    return ret;
  }

  public override void StartAnimation(uint id, AnimationParam arg1) {
    Engine2PINVOKE.IAnimMeshInfo_StartAnimation(swigCPtr, id, AnimationParam.getCPtr(arg1));
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void DetachBoneFromAnimation(uint animationID, uint boneID) {
    Engine2PINVOKE.IAnimMeshInfo_DetachBoneFromAnimation(swigCPtr, animationID, boneID);
  }

  public virtual void AttachBoneToAnimation(uint animationID, uint boneID) {
    Engine2PINVOKE.IAnimMeshInfo_AttachBoneToAnimation(swigCPtr, animationID, boneID);
  }

  public virtual bool IsBoneAttachedToAnimation(uint animationID, uint boneID) {
    bool ret = Engine2PINVOKE.IAnimMeshInfo_IsBoneAttachedToAnimation(swigCPtr, animationID, boneID);
    return ret;
  }

  public override void StopAnimation(uint id) {
    Engine2PINVOKE.IAnimMeshInfo_StopAnimation(swigCPtr, id);
  }

  public override int GetAnimationSize(string arg0) {
    int ret = Engine2PINVOKE.IAnimMeshInfo_GetAnimationSize(swigCPtr, arg0);
    return ret;
  }

  public override bool GetParams(uint id, AnimationParam arg1) {
    bool ret = Engine2PINVOKE.IAnimMeshInfo_GetParams(swigCPtr, id, AnimationParam.getCPtr(arg1));
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool UpdateParams(uint id, AnimationParam param) {
    bool ret = Engine2PINVOKE.IAnimMeshInfo_UpdateParams(swigCPtr, id, AnimationParam.getCPtr(param));
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override SWIGTYPE_p_ISkeleton GetSkeleton() {
    global::System.IntPtr cPtr = Engine2PINVOKE.IAnimMeshInfo_GetSkeleton(swigCPtr);
    SWIGTYPE_p_ISkeleton ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ISkeleton(cPtr, false);
    return ret;
  }

  public virtual bool Update(uint boneId) {
    bool ret = Engine2PINVOKE.IAnimMeshInfo_Update__SWIG_0(swigCPtr, boneId);
    return ret;
  }

  public virtual bool Update() {
    bool ret = Engine2PINVOKE.IAnimMeshInfo_Update__SWIG_1(swigCPtr);
    return ret;
  }

  public virtual void SetTimeGameUpdate(uint id, bool arg1) {
    Engine2PINVOKE.IAnimMeshInfo_SetTimeGameUpdate(swigCPtr, id, arg1);
  }

  public override float GetStartTime(uint id) {
    float ret = Engine2PINVOKE.IAnimMeshInfo_GetStartTime(swigCPtr, id);
    return ret;
  }

  public override float GetEndTime(uint id) {
    float ret = Engine2PINVOKE.IAnimMeshInfo_GetEndTime(swigCPtr, id);
    return ret;
  }

  public virtual void SetCurrentTrackTime(uint id, float arg1) {
    Engine2PINVOKE.IAnimMeshInfo_SetCurrentTrackTime(swigCPtr, id, arg1);
  }

  public virtual float GetCurrentTrackTime(uint id) {
    float ret = Engine2PINVOKE.IAnimMeshInfo_GetCurrentTrackTime(swigCPtr, id);
    return ret;
  }

  public virtual float GetCurrentWeight(uint id) {
    float ret = Engine2PINVOKE.IAnimMeshInfo_GetCurrentWeight(swigCPtr, id);
    return ret;
  }

  public virtual void SetCurrentWeight(uint arg0, float arg1) {
    Engine2PINVOKE.IAnimMeshInfo_SetCurrentWeight(swigCPtr, arg0, arg1);
  }

  public virtual uint GetGlobalIDFromLocalID(uint arg0) {
    uint ret = Engine2PINVOKE.IAnimMeshInfo_GetGlobalIDFromLocalID(swigCPtr, arg0);
    return ret;
  }

  public virtual void SetBindPose() {
    Engine2PINVOKE.IAnimMeshInfo_SetBindPose(swigCPtr);
  }

  public virtual bool IsAnimationPlay(uint arg0) {
    bool ret = Engine2PINVOKE.IAnimMeshInfo_IsAnimationPlay(swigCPtr, arg0);
    return ret;
  }

  public virtual bool IsAnyAnimationPlay() {
    bool ret = Engine2PINVOKE.IAnimMeshInfo_IsAnyAnimationPlay(swigCPtr);
    return ret;
  }

  public virtual void SetMaxMipLevel(int nMaxMip) {
    Engine2PINVOKE.IAnimMeshInfo_SetMaxMipLevel(swigCPtr, nMaxMip);
  }

  public virtual int GetMaxMipLevel() {
    int ret = Engine2PINVOKE.IAnimMeshInfo_GetMaxMipLevel(swigCPtr);
    return ret;
  }

  public override uint GetNumLods() {
    uint ret = Engine2PINVOKE.IAnimMeshInfo_GetNumLods(swigCPtr);
    return ret;
  }

  public override void SetAccessibleLod(SWIGTYPE_p_int32 arg0) {
    Engine2PINVOKE.IAnimMeshInfo_SetAccessibleLod(swigCPtr, SWIGTYPE_p_int32.getCPtr(arg0));
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
  }

  public override float GetLodDistance(SWIGTYPE_p_int32 arg0) {
    float ret = Engine2PINVOKE.IAnimMeshInfo_GetLodDistance(swigCPtr, SWIGTYPE_p_int32.getCPtr(arg0));
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void SetLodDistance(SWIGTYPE_p_int32 arg0, float arg1) {
    Engine2PINVOKE.IAnimMeshInfo_SetLodDistance(swigCPtr, SWIGTYPE_p_int32.getCPtr(arg0), arg1);
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual uint GetActiveBonesCount() {
    uint ret = Engine2PINVOKE.IAnimMeshInfo_GetActiveBonesCount(swigCPtr);
    return ret;
  }

  public virtual uint GetLodUpdateMult(SWIGTYPE_p_int32 lod) {
    uint ret = Engine2PINVOKE.IAnimMeshInfo_GetLodUpdateMult(swigCPtr, SWIGTYPE_p_int32.getCPtr(lod));
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void SetLodUpdateMult(SWIGTYPE_p_int32 lod, uint mult) {
    Engine2PINVOKE.IAnimMeshInfo_SetLodUpdateMult(swigCPtr, SWIGTYPE_p_int32.getCPtr(lod), mult);
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual bool TestRayIntersectionSubmesh(int num, SWIGTYPE_p_CSegment nRay, CVec3 vecIntersection, CVec3 vecSkinnedIntersection, CVec3 vecNormal) {
    bool ret = Engine2PINVOKE.IAnimMeshInfo_TestRayIntersectionSubmesh(swigCPtr, num, SWIGTYPE_p_CSegment.getCPtr(nRay), CVec3.getCPtr(vecIntersection), CVec3.getCPtr(vecSkinnedIntersection), CVec3.getCPtr(vecNormal));
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void SetUniformScale(float arg0) {
    Engine2PINVOKE.IAnimMeshInfo_SetUniformScale(swigCPtr, arg0);
  }

}
