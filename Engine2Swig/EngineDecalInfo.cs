//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.7
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class EngineDecalInfo : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal EngineDecalInfo(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(EngineDecalInfo obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~EngineDecalInfo() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          Engine2PINVOKE.delete_EngineDecalInfo(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public eDecalType m_eDecalType {
    set {
      Engine2PINVOKE.EngineDecalInfo_m_eDecalType_set(swigCPtr, (int)value);
    } 
    get {
      eDecalType ret = (eDecalType)Engine2PINVOKE.EngineDecalInfo_m_eDecalType_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_uint32 m_nDecalID {
    set {
      Engine2PINVOKE.EngineDecalInfo_m_nDecalID_set(swigCPtr, SWIGTYPE_p_uint32.getCPtr(value));
      if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint32 ret = new SWIGTYPE_p_uint32(Engine2PINVOKE.EngineDecalInfo_m_nDecalID_get(swigCPtr), true);
      if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public IMeshInfo m_pDecalOwner {
    set {
      Engine2PINVOKE.EngineDecalInfo_m_pDecalOwner_set(swigCPtr, IMeshInfo.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = Engine2PINVOKE.EngineDecalInfo_m_pDecalOwner_get(swigCPtr);
      IMeshInfo ret = (cPtr == global::System.IntPtr.Zero) ? null : new IMeshInfo(cPtr, false);
      return ret;
    } 
  }

  public CVec3 m_vDecalOffset {
    set {
      Engine2PINVOKE.EngineDecalInfo_m_vDecalOffset_set(swigCPtr, CVec3.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = Engine2PINVOKE.EngineDecalInfo_m_vDecalOffset_get(swigCPtr);
      CVec3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new CVec3(cPtr, false);
      return ret;
    } 
  }

  public CVec3 m_vPos {
    set {
      Engine2PINVOKE.EngineDecalInfo_m_vPos_set(swigCPtr, CVec3.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = Engine2PINVOKE.EngineDecalInfo_m_vPos_get(swigCPtr);
      CVec3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new CVec3(cPtr, false);
      return ret;
    } 
  }

  public CVec3 m_vNormal {
    set {
      Engine2PINVOKE.EngineDecalInfo_m_vNormal_set(swigCPtr, CVec3.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = Engine2PINVOKE.EngineDecalInfo_m_vNormal_get(swigCPtr);
      CVec3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new CVec3(cPtr, false);
      return ret;
    } 
  }

  public float m_fWidth {
    set {
      Engine2PINVOKE.EngineDecalInfo_m_fWidth_set(swigCPtr, value);
    } 
    get {
      float ret = Engine2PINVOKE.EngineDecalInfo_m_fWidth_get(swigCPtr);
      return ret;
    } 
  }

  public float m_fHeight {
    set {
      Engine2PINVOKE.EngineDecalInfo_m_fHeight_set(swigCPtr, value);
    } 
    get {
      float ret = Engine2PINVOKE.EngineDecalInfo_m_fHeight_get(swigCPtr);
      return ret;
    } 
  }

  public float m_fLifeTime {
    set {
      Engine2PINVOKE.EngineDecalInfo_m_fLifeTime_set(swigCPtr, value);
    } 
    get {
      float ret = Engine2PINVOKE.EngineDecalInfo_m_fLifeTime_get(swigCPtr);
      return ret;
    } 
  }

  public Engine2String m_szMaterialName {
    set {
      Engine2PINVOKE.EngineDecalInfo_m_szMaterialName_set(swigCPtr, Engine2String.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = Engine2PINVOKE.EngineDecalInfo_m_szMaterialName_get(swigCPtr);
      Engine2String ret = (cPtr == global::System.IntPtr.Zero) ? null : new Engine2String(cPtr, false);
      return ret;
    } 
  }

  public float m_fAngle {
    set {
      Engine2PINVOKE.EngineDecalInfo_m_fAngle_set(swigCPtr, value);
    } 
    get {
      float ret = Engine2PINVOKE.EngineDecalInfo_m_fAngle_get(swigCPtr);
      return ret;
    } 
  }

  public float m_fDotAcceptThreshold {
    set {
      Engine2PINVOKE.EngineDecalInfo_m_fDotAcceptThreshold_set(swigCPtr, value);
    } 
    get {
      float ret = Engine2PINVOKE.EngineDecalInfo_m_fDotAcceptThreshold_get(swigCPtr);
      return ret;
    } 
  }

  public CVec3 m_vHitDirection {
    set {
      Engine2PINVOKE.EngineDecalInfo_m_vHitDirection_set(swigCPtr, CVec3.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = Engine2PINVOKE.EngineDecalInfo_m_vHitDirection_get(swigCPtr);
      CVec3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new CVec3(cPtr, false);
      return ret;
    } 
  }

  public uint m_nGroupId {
    set {
      Engine2PINVOKE.EngineDecalInfo_m_nGroupId_set(swigCPtr, value);
    } 
    get {
      uint ret = Engine2PINVOKE.EngineDecalInfo_m_nGroupId_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_Engine2__VectorT_IMeshInfo_p_t m_vecFoundedColliders {
    set {
      Engine2PINVOKE.EngineDecalInfo_m_vecFoundedColliders_set(swigCPtr, SWIGTYPE_p_Engine2__VectorT_IMeshInfo_p_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = Engine2PINVOKE.EngineDecalInfo_m_vecFoundedColliders_get(swigCPtr);
      SWIGTYPE_p_Engine2__VectorT_IMeshInfo_p_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Engine2__VectorT_IMeshInfo_p_t(cPtr, false);
      return ret;
    } 
  }

  public CVec3 m_vFoundedIntersection {
    set {
      Engine2PINVOKE.EngineDecalInfo_m_vFoundedIntersection_set(swigCPtr, CVec3.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = Engine2PINVOKE.EngineDecalInfo_m_vFoundedIntersection_get(swigCPtr);
      CVec3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new CVec3(cPtr, false);
      return ret;
    } 
  }

  public float m_fBoxWidth {
    set {
      Engine2PINVOKE.EngineDecalInfo_m_fBoxWidth_set(swigCPtr, value);
    } 
    get {
      float ret = Engine2PINVOKE.EngineDecalInfo_m_fBoxWidth_get(swigCPtr);
      return ret;
    } 
  }

  public float m_fBoxHeight {
    set {
      Engine2PINVOKE.EngineDecalInfo_m_fBoxHeight_set(swigCPtr, value);
    } 
    get {
      float ret = Engine2PINVOKE.EngineDecalInfo_m_fBoxHeight_get(swigCPtr);
      return ret;
    } 
  }

  public float m_fBoxLength {
    set {
      Engine2PINVOKE.EngineDecalInfo_m_fBoxLength_set(swigCPtr, value);
    } 
    get {
      float ret = Engine2PINVOKE.EngineDecalInfo_m_fBoxLength_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_uint8 m_nSortPriority {
    set {
      Engine2PINVOKE.EngineDecalInfo_m_nSortPriority_set(swigCPtr, SWIGTYPE_p_uint8.getCPtr(value));
      if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint8 ret = new SWIGTYPE_p_uint8(Engine2PINVOKE.EngineDecalInfo_m_nSortPriority_get(swigCPtr), true);
      if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_uint8 m_bTrustedCollision {
    set {
      Engine2PINVOKE.EngineDecalInfo_m_bTrustedCollision_set(swigCPtr, SWIGTYPE_p_uint8.getCPtr(value));
      if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint8 ret = new SWIGTYPE_p_uint8(Engine2PINVOKE.EngineDecalInfo_m_bTrustedCollision_get(swigCPtr), true);
      if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_uint8 m_bUseBBoxCollision {
    set {
      Engine2PINVOKE.EngineDecalInfo_m_bUseBBoxCollision_set(swigCPtr, SWIGTYPE_p_uint8.getCPtr(value));
      if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint8 ret = new SWIGTYPE_p_uint8(Engine2PINVOKE.EngineDecalInfo_m_bUseBBoxCollision_get(swigCPtr), true);
      if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public EngineDecalInfo() : this(Engine2PINVOKE.new_EngineDecalInfo(), true) {
  }

}
