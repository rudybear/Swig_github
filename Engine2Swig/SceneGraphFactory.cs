//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.7
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class SceneGraphFactory : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal SceneGraphFactory(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SceneGraphFactory obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public virtual IVisAreaTree CreateOctTree() {
    global::System.IntPtr cPtr = Engine2PINVOKE.SceneGraphFactory_CreateOctTree__SWIG_0(swigCPtr);
    IVisAreaTree ret = (cPtr == global::System.IntPtr.Zero) ? null : new IVisAreaTree(cPtr, false);
    return ret;
  }

  public virtual IVisAreaTree CreateQuadTree() {
    global::System.IntPtr cPtr = Engine2PINVOKE.SceneGraphFactory_CreateQuadTree__SWIG_0(swigCPtr);
    IVisAreaTree ret = (cPtr == global::System.IntPtr.Zero) ? null : new IVisAreaTree(cPtr, false);
    return ret;
  }

  public virtual IVisAreaTree CreateSimpleVisAreaTree(bool bSimpleCull) {
    global::System.IntPtr cPtr = Engine2PINVOKE.SceneGraphFactory_CreateSimpleVisAreaTree__SWIG_0(swigCPtr, bSimpleCull);
    IVisAreaTree ret = (cPtr == global::System.IntPtr.Zero) ? null : new IVisAreaTree(cPtr, false);
    return ret;
  }

  public virtual IVisAreaTree CreateSimpleVisAreaTree() {
    global::System.IntPtr cPtr = Engine2PINVOKE.SceneGraphFactory_CreateSimpleVisAreaTree__SWIG_1(swigCPtr);
    IVisAreaTree ret = (cPtr == global::System.IntPtr.Zero) ? null : new IVisAreaTree(cPtr, false);
    return ret;
  }

  public virtual IVisAreaTree CreateOctTree(SWIGTYPE_p_CAABBox box, float partialLimit) {
    global::System.IntPtr cPtr = Engine2PINVOKE.SceneGraphFactory_CreateOctTree__SWIG_1(swigCPtr, SWIGTYPE_p_CAABBox.getCPtr(box), partialLimit);
    IVisAreaTree ret = (cPtr == global::System.IntPtr.Zero) ? null : new IVisAreaTree(cPtr, false);
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual IVisAreaTree CreateQuadTree(SWIGTYPE_p_CAABBox box, float partialLimit) {
    global::System.IntPtr cPtr = Engine2PINVOKE.SceneGraphFactory_CreateQuadTree__SWIG_1(swigCPtr, SWIGTYPE_p_CAABBox.getCPtr(box), partialLimit);
    IVisAreaTree ret = (cPtr == global::System.IntPtr.Zero) ? null : new IVisAreaTree(cPtr, false);
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual IVisAreaTree CreateUmbraTree(bool bUseGPUQueries) {
    global::System.IntPtr cPtr = Engine2PINVOKE.SceneGraphFactory_CreateUmbraTree(swigCPtr, bUseGPUQueries);
    IVisAreaTree ret = (cPtr == global::System.IntPtr.Zero) ? null : new IVisAreaTree(cPtr, false);
    return ret;
  }

  public virtual IPortal CreatePortal(int area1, int area2) {
    global::System.IntPtr cPtr = Engine2PINVOKE.SceneGraphFactory_CreatePortal(swigCPtr, area1, area2);
    IPortal ret = (cPtr == global::System.IntPtr.Zero) ? null : new IPortal(cPtr, false);
    return ret;
  }

  public virtual IVisArea CreateVisArea() {
    global::System.IntPtr cPtr = Engine2PINVOKE.SceneGraphFactory_CreateVisArea(swigCPtr);
    IVisArea ret = (cPtr == global::System.IntPtr.Zero) ? null : new IVisArea(cPtr, false);
    return ret;
  }

  public virtual ISceneGraph GetSceneGraph() {
    global::System.IntPtr cPtr = Engine2PINVOKE.SceneGraphFactory_GetSceneGraph(swigCPtr);
    ISceneGraph ret = (cPtr == global::System.IntPtr.Zero) ? null : new ISceneGraph(cPtr, false);
    return ret;
  }

  public virtual void RecreateSceneGraph() {
    Engine2PINVOKE.SceneGraphFactory_RecreateSceneGraph(swigCPtr);
  }

  public virtual void ForceSimpleMainVisAreaTree(bool bSimpleCull) {
    Engine2PINVOKE.SceneGraphFactory_ForceSimpleMainVisAreaTree__SWIG_0(swigCPtr, bSimpleCull);
  }

  public virtual void ForceSimpleMainVisAreaTree() {
    Engine2PINVOKE.SceneGraphFactory_ForceSimpleMainVisAreaTree__SWIG_1(swigCPtr);
  }

  public virtual void ForceOctTreeAsMainVisArea(SWIGTYPE_p_CAABBox box, float partialLimit) {
    Engine2PINVOKE.SceneGraphFactory_ForceOctTreeAsMainVisArea(swigCPtr, SWIGTYPE_p_CAABBox.getCPtr(box), partialLimit);
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void ForceQuadTreeAsMainVisArea(SWIGTYPE_p_CAABBox box, float partialLimit) {
    Engine2PINVOKE.SceneGraphFactory_ForceQuadTreeAsMainVisArea(swigCPtr, SWIGTYPE_p_CAABBox.getCPtr(box), partialLimit);
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void ForceUmbraTreeAsMainVisArea(bool bUseGPUQueries) {
    Engine2PINVOKE.SceneGraphFactory_ForceUmbraTreeAsMainVisArea(swigCPtr, bUseGPUQueries);
  }

  public virtual void DeleteVisAreaTree(IVisAreaTree arg0) {
    Engine2PINVOKE.SceneGraphFactory_DeleteVisAreaTree(swigCPtr, IVisAreaTree.getCPtr(arg0));
  }

}
