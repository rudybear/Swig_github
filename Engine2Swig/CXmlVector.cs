//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.7
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class CXmlVector : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CXmlVector(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CXmlVector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~CXmlVector() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          Engine2PINVOKE.delete_CXmlVector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public CXmlVector() : this(Engine2PINVOKE.new_CXmlVector(), true) {
  }

  public int Serialize(SWIGTYPE_p_FILE to, int level) {
    int ret = Engine2PINVOKE.CXmlVector_Serialize(swigCPtr, SWIGTYPE_p_FILE.getCPtr(to), level);
    return ret;
  }

  public int SerializeBuffer(Engine2String buffer, int level) {
    int ret = Engine2PINVOKE.CXmlVector_SerializeBuffer(swigCPtr, Engine2String.getCPtr(buffer), level);
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int Deserialize(Engine2String buffer, int arg1) {
    int ret = Engine2PINVOKE.CXmlVector_Deserialize(swigCPtr, Engine2String.getCPtr(buffer), arg1);
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public CXmlElement FindElementByName(Engine2String ElementName) {
    global::System.IntPtr cPtr = Engine2PINVOKE.CXmlVector_FindElementByName__SWIG_0(swigCPtr, Engine2String.getCPtr(ElementName));
    CXmlElement ret = (cPtr == global::System.IntPtr.Zero) ? null : new CXmlElement(cPtr, false);
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public CXmlElement FindElementByNameConst(Engine2String ElementName) {
    global::System.IntPtr cPtr = Engine2PINVOKE.CXmlVector_FindElementByNameConst(swigCPtr, Engine2String.getCPtr(ElementName));
    CXmlElement ret = (cPtr == global::System.IntPtr.Zero) ? null : new CXmlElement(cPtr, false);
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public CXmlElement AddElement(CXmlElement element) {
    global::System.IntPtr cPtr = Engine2PINVOKE.CXmlVector_AddElement(swigCPtr, CXmlElement.getCPtr(element));
    CXmlElement ret = (cPtr == global::System.IntPtr.Zero) ? null : new CXmlElement(cPtr, false);
    return ret;
  }

  public void SwapElements(uint E1, uint E2) {
    Engine2PINVOKE.CXmlVector_SwapElements(swigCPtr, E1, E2);
  }

  public void RemoveElement(uint nNum) {
    Engine2PINVOKE.CXmlVector_RemoveElement(swigCPtr, nNum);
  }

  public SWIGTYPE_p_Engine2__VectorT_CXmlElement_t m_Contents {
    set {
      Engine2PINVOKE.CXmlVector_m_Contents_set(swigCPtr, SWIGTYPE_p_Engine2__VectorT_CXmlElement_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = Engine2PINVOKE.CXmlVector_m_Contents_get(swigCPtr);
      SWIGTYPE_p_Engine2__VectorT_CXmlElement_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Engine2__VectorT_CXmlElement_t(cPtr, false);
      return ret;
    } 
  }

}
