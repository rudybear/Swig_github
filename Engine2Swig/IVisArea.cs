//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.7
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class IVisArea : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal IVisArea(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IVisArea obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~IVisArea() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          Engine2PINVOKE.delete_IVisArea(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public virtual int GetVisAreaNum() {
    int ret = Engine2PINVOKE.IVisArea_GetVisAreaNum(swigCPtr);
    return ret;
  }

  public virtual uint GetNumPortals() {
    uint ret = Engine2PINVOKE.IVisArea_GetNumPortals(swigCPtr);
    return ret;
  }

  public virtual uint AddPortal(IPortal portal) {
    uint ret = Engine2PINVOKE.IVisArea_AddPortal(swigCPtr, IPortal.getCPtr(portal));
    return ret;
  }

  public virtual void RemovePortal(uint num) {
    Engine2PINVOKE.IVisArea_RemovePortal(swigCPtr, num);
  }

  public virtual IPortal GetPortal(uint num) {
    global::System.IntPtr cPtr = Engine2PINVOKE.IVisArea_GetPortal(swigCPtr, num);
    IPortal ret = (cPtr == global::System.IntPtr.Zero) ? null : new IPortal(cPtr, false);
    return ret;
  }

  public virtual void SetVisAreaTree(IVisAreaTree pTree) {
    Engine2PINVOKE.IVisArea_SetVisAreaTree(swigCPtr, IVisAreaTree.getCPtr(pTree));
  }

  public virtual IVisAreaTree GetVisAreaTree() {
    global::System.IntPtr cPtr = Engine2PINVOKE.IVisArea_GetVisAreaTree(swigCPtr);
    IVisAreaTree ret = (cPtr == global::System.IntPtr.Zero) ? null : new IVisAreaTree(cPtr, false);
    return ret;
  }

  public virtual void AddVisibleArea(int num) {
    Engine2PINVOKE.IVisArea_AddVisibleArea(swigCPtr, num);
  }

  public virtual void RemoveVisibleArea(int num) {
    Engine2PINVOKE.IVisArea_RemoveVisibleArea(swigCPtr, num);
  }

  public virtual void BuildVisArea(ISceneGraph pSceneGraph) {
    Engine2PINVOKE.IVisArea_BuildVisArea(swigCPtr, ISceneGraph.getCPtr(pSceneGraph));
  }

  public virtual string GetName() {
    string ret = Engine2PINVOKE.IVisArea_GetName(swigCPtr);
    return ret;
  }

  public virtual void SetName(string str) {
    Engine2PINVOKE.IVisArea_SetName(swigCPtr, str);
  }

  public virtual void SetNewFrame() {
    Engine2PINVOKE.IVisArea_SetNewFrame(swigCPtr);
  }

  public virtual void DrawPass(SWIGTYPE_p_eRenderType type, SWIGTYPE_p_RenderStatistics stat, bool bImmediate) {
    Engine2PINVOKE.IVisArea_DrawPass(swigCPtr, SWIGTYPE_p_eRenderType.getCPtr(type), SWIGTYPE_p_RenderStatistics.getCPtr(stat), bImmediate);
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
  }

}
