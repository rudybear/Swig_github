//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.7
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class IOcean : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public IOcean(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(IOcean obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public virtual float GetWaveDirection() {
    float ret = Engine2PINVOKE.IOcean_GetWaveDirection(swigCPtr);
    return ret;
  }

  public virtual float GetWavesSpeed() {
    float ret = Engine2PINVOKE.IOcean_GetWavesSpeed(swigCPtr);
    return ret;
  }

  public virtual float GetWavesSize() {
    float ret = Engine2PINVOKE.IOcean_GetWavesSize(swigCPtr);
    return ret;
  }

  public virtual float GetWavesAmount() {
    float ret = Engine2PINVOKE.IOcean_GetWavesAmount(swigCPtr);
    return ret;
  }

  public virtual float GetLevel() {
    float ret = Engine2PINVOKE.IOcean_GetLevel(swigCPtr);
    return ret;
  }

  public virtual CVec4 GetFogColor() {
    CVec4 ret = new CVec4(Engine2PINVOKE.IOcean_GetFogColor(swigCPtr), false);
    return ret;
  }

  public virtual void SetWaveDirection(float f) {
    Engine2PINVOKE.IOcean_SetWaveDirection(swigCPtr, f);
  }

  public virtual void SetWavesSpeed(float f) {
    Engine2PINVOKE.IOcean_SetWavesSpeed(swigCPtr, f);
  }

  public virtual void SetWavesSize(float f) {
    Engine2PINVOKE.IOcean_SetWavesSize(swigCPtr, f);
  }

  public virtual void SetWavesAmount(float f) {
    Engine2PINVOKE.IOcean_SetWavesAmount(swigCPtr, f);
  }

  public virtual void SetLevel(float f) {
    Engine2PINVOKE.IOcean_SetLevel(swigCPtr, f);
  }

  public virtual void SetFogColor(CVec4 fogColor) {
    Engine2PINVOKE.IOcean_SetFogColor(swigCPtr, CVec4.getCPtr(fogColor));
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual string GetMaterialName() {
    string ret = Engine2PINVOKE.IOcean_GetMaterialName(swigCPtr);
    return ret;
  }

  public virtual void SetMaterialName(string szMatName) {
    Engine2PINVOKE.IOcean_SetMaterialName(swigCPtr, szMatName);
  }

  public virtual void SetReflectionTexName(string szTexName) {
    Engine2PINVOKE.IOcean_SetReflectionTexName(swigCPtr, szTexName);
  }

  public virtual string GetReflectionTexName() {
    string ret = Engine2PINVOKE.IOcean_GetReflectionTexName(swigCPtr);
    return ret;
  }

}
