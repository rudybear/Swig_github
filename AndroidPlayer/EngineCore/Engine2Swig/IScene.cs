//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.7
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class IScene : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal IScene(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IScene obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~IScene() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          Engine2PINVOKE.delete_IScene(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public virtual uint AddWeather() {
    uint ret = Engine2PINVOKE.IScene_AddWeather(swigCPtr);
    return ret;
  }

  public virtual void RemoveWeather(uint arg0) {
    Engine2PINVOKE.IScene_RemoveWeather(swigCPtr, arg0);
  }

  public virtual uint GetWeathersCount() {
    uint ret = Engine2PINVOKE.IScene_GetWeathersCount(swigCPtr);
    return ret;
  }

  public virtual uint GetActiveWeather() {
    uint ret = Engine2PINVOKE.IScene_GetActiveWeather(swigCPtr);
    return ret;
  }

  public virtual void SetActiveWeather(uint arg0) {
    Engine2PINVOKE.IScene_SetActiveWeather(swigCPtr, arg0);
  }

  public virtual SWIGTYPE_p_HRESULT ProjParams(float fFov, float fZNear, float fZFar) {
    SWIGTYPE_p_HRESULT ret = new SWIGTYPE_p_HRESULT(Engine2PINVOKE.IScene_ProjParams(swigCPtr, fFov, fZNear, fZFar), true);
    return ret;
  }

  public virtual SWIGTYPE_p_HRESULT Restore() {
    SWIGTYPE_p_HRESULT ret = new SWIGTYPE_p_HRESULT(Engine2PINVOKE.IScene_Restore(swigCPtr), true);
    return ret;
  }

  public virtual SWIGTYPE_p_HRESULT Invalidate() {
    SWIGTYPE_p_HRESULT ret = new SWIGTYPE_p_HRESULT(Engine2PINVOKE.IScene_Invalidate(swigCPtr), true);
    return ret;
  }

  public virtual void RenderFrame() {
    Engine2PINVOKE.IScene_RenderFrame(swigCPtr);
  }

  public virtual CCamera GetCamera() {
    global::System.IntPtr cPtr = Engine2PINVOKE.IScene_GetCamera(swigCPtr);
    CCamera ret = (cPtr == global::System.IntPtr.Zero) ? null : new CCamera(cPtr, false);
    return ret;
  }

  public virtual void SetCamera(CCamera arg0) {
    Engine2PINVOKE.IScene_SetCamera(swigCPtr, CCamera.getCPtr(arg0));
  }

  public virtual SWIGTYPE_p_RenderStatistics RenderSceneObjects(SWIGTYPE_p_eRenderType arg0) {
    SWIGTYPE_p_RenderStatistics ret = new SWIGTYPE_p_RenderStatistics(Engine2PINVOKE.IScene_RenderSceneObjects(swigCPtr, SWIGTYPE_p_eRenderType.getCPtr(arg0)), true);
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual SWIGTYPE_p_HRESULT ImmediateRenderSceneObjects(SWIGTYPE_p_eRenderType Type) {
    SWIGTYPE_p_HRESULT ret = new SWIGTYPE_p_HRESULT(Engine2PINVOKE.IScene_ImmediateRenderSceneObjects(swigCPtr, SWIGTYPE_p_eRenderType.getCPtr(Type)), true);
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual SWIGTYPE_p_HRESULT RenderScene2DObjects() {
    SWIGTYPE_p_HRESULT ret = new SWIGTYPE_p_HRESULT(Engine2PINVOKE.IScene_RenderScene2DObjects(swigCPtr), true);
    return ret;
  }

  public virtual void Clear() {
    Engine2PINVOKE.IScene_Clear(swigCPtr);
  }

  public virtual SWIGTYPE_p_HRESULT ReInitRender(int arg0, int arg1, int arg2, int arg3) {
    SWIGTYPE_p_HRESULT ret = new SWIGTYPE_p_HRESULT(Engine2PINVOKE.IScene_ReInitRender(swigCPtr, arg0, arg1, arg2, arg3), true);
    return ret;
  }

  public virtual uint RegistryClientDrawer(SWIGTYPE_p_IClientDraw pDrawer, int nTextureID, int nBlendFunc, int nDepthFunc) {
    uint ret = Engine2PINVOKE.IScene_RegistryClientDrawer(swigCPtr, SWIGTYPE_p_IClientDraw.getCPtr(pDrawer), nTextureID, nBlendFunc, nDepthFunc);
    return ret;
  }

  public virtual SWIGTYPE_p_HRESULT UnRegistryClientDrawer(SWIGTYPE_p_IClientDraw pDrawer, int m_nTextureID, int nBlendFunc, int nDepthFunc) {
    SWIGTYPE_p_HRESULT ret = new SWIGTYPE_p_HRESULT(Engine2PINVOKE.IScene_UnRegistryClientDrawer(swigCPtr, SWIGTYPE_p_IClientDraw.getCPtr(pDrawer), m_nTextureID, nBlendFunc, nDepthFunc), true);
    return ret;
  }

  public virtual void RemoveAllClientDrawers() {
    Engine2PINVOKE.IScene_RemoveAllClientDrawers(swigCPtr);
  }

  public virtual SWIGTYPE_p_IGameRenderObject GetRenderObject() {
    global::System.IntPtr cPtr = Engine2PINVOKE.IScene_GetRenderObject(swigCPtr);
    SWIGTYPE_p_IGameRenderObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_IGameRenderObject(cPtr, false);
    return ret;
  }

  public virtual IRender GetRender() {
    global::System.IntPtr cPtr = Engine2PINVOKE.IScene_GetRender(swigCPtr);
    IRender ret = (cPtr == global::System.IntPtr.Zero) ? null : new IRender(cPtr, false);
    return ret;
  }

  public virtual SWIGTYPE_p_IWeather GetWeatherSystem() {
    global::System.IntPtr cPtr = Engine2PINVOKE.IScene_GetWeatherSystem(swigCPtr);
    SWIGTYPE_p_IWeather ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_IWeather(cPtr, false);
    return ret;
  }

  public virtual SWIGTYPE_p_IMeshArray GetMeshArray() {
    global::System.IntPtr cPtr = Engine2PINVOKE.IScene_GetMeshArray(swigCPtr);
    SWIGTYPE_p_IMeshArray ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_IMeshArray(cPtr, false);
    return ret;
  }

  public virtual IMeshInfo AddCreateMesh(CXmlElement paraminfo, int bSelfDraw) {
    global::System.IntPtr cPtr = Engine2PINVOKE.IScene_AddCreateMesh(swigCPtr, CXmlElement.getCPtr(paraminfo), bSelfDraw);
    IMeshInfo ret = (cPtr == global::System.IntPtr.Zero) ? null : new IMeshInfo(cPtr, false);
    return ret;
  }

  public virtual void DeleteMesh(IMeshInfo arg0) {
    Engine2PINVOKE.IScene_DeleteMesh(swigCPtr, IMeshInfo.getCPtr(arg0));
  }

  public virtual void SetSendEmptyEvent(bool b) {
    Engine2PINVOKE.IScene_SetSendEmptyEvent(swigCPtr, b);
  }

  public virtual float GetGamma() {
    float ret = Engine2PINVOKE.IScene_GetGamma(swigCPtr);
    return ret;
  }

  public virtual void SetGamma(float f) {
    Engine2PINVOKE.IScene_SetGamma(swigCPtr, f);
  }

  public virtual IGameMod GetGameMod() {
    global::System.IntPtr cPtr = Engine2PINVOKE.IScene_GetGameMod(swigCPtr);
    IGameMod ret = (cPtr == global::System.IntPtr.Zero) ? null : new IGameMod(cPtr, false);
    return ret;
  }

}
