//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.7
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class IRender : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public IRender(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(IRender obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~IRender() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          Engine2PINVOKE.delete_IRender(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public virtual IDebugDrawInterface GetDebugDrawInterface() {
    global::System.IntPtr cPtr = Engine2PINVOKE.IRender_GetDebugDrawInterface(swigCPtr);
    IDebugDrawInterface ret = (cPtr == global::System.IntPtr.Zero) ? null : new IDebugDrawInterface(cPtr, false);
    return ret;
  }

  public virtual ERenderer GetRendererType() {
    ERenderer ret = (ERenderer)Engine2PINVOKE.IRender_GetRendererType(swigCPtr);
    return ret;
  }

  public virtual int GetMaxRenderProfile() {
    int ret = Engine2PINVOKE.IRender_GetMaxRenderProfile(swigCPtr);
    return ret;
  }

  public virtual void SetFixedFrameRate(int newRate) {
    Engine2PINVOKE.IRender_SetFixedFrameRate(swigCPtr, newRate);
  }

  public virtual void SetApplication(ICore arg0) {
    Engine2PINVOKE.IRender_SetApplication(swigCPtr, ICore.getCPtr(arg0));
  }

  public virtual SWIGTYPE_p_TEXNUM AddTexture(string tex, bool bStreamed, int source, SWIGTYPE_p_eMeshType type) {
    SWIGTYPE_p_TEXNUM ret = new SWIGTYPE_p_TEXNUM(Engine2PINVOKE.IRender_AddTexture__SWIG_0(swigCPtr, tex, bStreamed, source, SWIGTYPE_p_eMeshType.getCPtr(type)), true);
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual SWIGTYPE_p_TEXNUM AddTexture(string tex, bool bStreamed, int source) {
    SWIGTYPE_p_TEXNUM ret = new SWIGTYPE_p_TEXNUM(Engine2PINVOKE.IRender_AddTexture__SWIG_1(swigCPtr, tex, bStreamed, source), true);
    return ret;
  }

  public virtual SWIGTYPE_p_TEXNUM AddTexture(string tex, bool bStreamed) {
    SWIGTYPE_p_TEXNUM ret = new SWIGTYPE_p_TEXNUM(Engine2PINVOKE.IRender_AddTexture__SWIG_2(swigCPtr, tex, bStreamed), true);
    return ret;
  }

  public virtual SWIGTYPE_p_TEXNUM AddTexture(string tex) {
    SWIGTYPE_p_TEXNUM ret = new SWIGTYPE_p_TEXNUM(Engine2PINVOKE.IRender_AddTexture__SWIG_3(swigCPtr, tex), true);
    return ret;
  }

  public virtual SWIGTYPE_p_TShaderCombinations GetShaderCombinations() {
    global::System.IntPtr cPtr = Engine2PINVOKE.IRender_GetShaderCombinations(swigCPtr);
    SWIGTYPE_p_TShaderCombinations ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_TShaderCombinations(cPtr, false);
    return ret;
  }

  public virtual SWIGTYPE_p_TShaderMask GetShaderMask(string szShader) {
    SWIGTYPE_p_TShaderMask ret = new SWIGTYPE_p_TShaderMask(Engine2PINVOKE.IRender_GetShaderMask(swigCPtr, szShader), true);
    return ret;
  }

  public virtual int AddEffect(string tex, int arg1, SWIGTYPE_p_TShaderMask mask, int bReload) {
    int ret = Engine2PINVOKE.IRender_AddEffect__SWIG_0(swigCPtr, tex, arg1, SWIGTYPE_p_TShaderMask.getCPtr(mask), bReload);
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int AddEffect(string tex, int arg1, SWIGTYPE_p_TShaderMask mask) {
    int ret = Engine2PINVOKE.IRender_AddEffect__SWIG_1(swigCPtr, tex, arg1, SWIGTYPE_p_TShaderMask.getCPtr(mask));
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void SetTexture(SWIGTYPE_p_TEXNUM tex, int stage) {
    Engine2PINVOKE.IRender_SetTexture(swigCPtr, SWIGTYPE_p_TEXNUM.getCPtr(tex), stage);
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void RemoveTexture(int tex) {
    Engine2PINVOKE.IRender_RemoveTexture(swigCPtr, tex);
  }

  public virtual SWIGTYPE_p_TEXNUM FindTexture(string name, SWIGTYPE_p_TEXFORMAT format, SWIGTYPE_p_BUFPOOL pool) {
    SWIGTYPE_p_TEXNUM ret = new SWIGTYPE_p_TEXNUM(Engine2PINVOKE.IRender_FindTexture(swigCPtr, name, SWIGTYPE_p_TEXFORMAT.getCPtr(format), SWIGTYPE_p_BUFPOOL.getCPtr(pool)), true);
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual SWIGTYPE_p_IGameRenderObject CreateClientGeom() {
    global::System.IntPtr cPtr = Engine2PINVOKE.IRender_CreateClientGeom(swigCPtr);
    SWIGTYPE_p_IGameRenderObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_IGameRenderObject(cPtr, false);
    return ret;
  }

  public virtual void SetupVertexFog(int Color, int Mode, int UseRange, float Density, float Start, float End) {
    Engine2PINVOKE.IRender_SetupVertexFog(swigCPtr, Color, Mode, UseRange, Density, Start, End);
  }

  public virtual SWIGTYPE_p_HRESULT Init(SWIGTYPE_p_WIN_HWND hWnd, int Width, int Height, int Bpp, int bFullscreen, string szSplashScreen, int externalInit) {
    SWIGTYPE_p_HRESULT ret = new SWIGTYPE_p_HRESULT(Engine2PINVOKE.IRender_Init__SWIG_0(swigCPtr, SWIGTYPE_p_WIN_HWND.getCPtr(hWnd), Width, Height, Bpp, bFullscreen, szSplashScreen, externalInit), true);
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual SWIGTYPE_p_HRESULT Init(SWIGTYPE_p_WIN_HWND hWnd, int Width, int Height, int Bpp, int bFullscreen, string szSplashScreen) {
    SWIGTYPE_p_HRESULT ret = new SWIGTYPE_p_HRESULT(Engine2PINVOKE.IRender_Init__SWIG_1(swigCPtr, SWIGTYPE_p_WIN_HWND.getCPtr(hWnd), Width, Height, Bpp, bFullscreen, szSplashScreen), true);
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual SWIGTYPE_p_HRESULT Init(SWIGTYPE_p_WIN_HWND hWnd, int Width, int Height, int Bpp, int bFullscreen) {
    SWIGTYPE_p_HRESULT ret = new SWIGTYPE_p_HRESULT(Engine2PINVOKE.IRender_Init__SWIG_2(swigCPtr, SWIGTYPE_p_WIN_HWND.getCPtr(hWnd), Width, Height, Bpp, bFullscreen), true);
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void Close() {
    Engine2PINVOKE.IRender_Close(swigCPtr);
  }

  public virtual void Clear() {
    Engine2PINVOKE.IRender_Clear(swigCPtr);
  }

  public virtual void ClearMeshes() {
    Engine2PINVOKE.IRender_ClearMeshes(swigCPtr);
  }

  public virtual SWIGTYPE_p_HRESULT RenderFrame() {
    SWIGTYPE_p_HRESULT ret = new SWIGTYPE_p_HRESULT(Engine2PINVOKE.IRender_RenderFrame(swigCPtr), true);
    return ret;
  }

  public virtual double GetTime() {
    double ret = Engine2PINVOKE.IRender_GetTime(swigCPtr);
    return ret;
  }

  public virtual void SetSplashTexture(int nTexture) {
    Engine2PINVOKE.IRender_SetSplashTexture(swigCPtr, nTexture);
  }

  public virtual bool GenerateLightmap(int nRes) {
    bool ret = Engine2PINVOKE.IRender_GenerateLightmap(swigCPtr, nRes);
    return ret;
  }

  public virtual int EnumAAFormats(SDispFormat rDispFmt, SAAFormat Formats) {
    int ret = Engine2PINVOKE.IRender_EnumAAFormats(swigCPtr, SDispFormat.getCPtr(rDispFmt), SAAFormat.getCPtr(Formats));
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void BeginLevel() {
    Engine2PINVOKE.IRender_BeginLevel(swigCPtr);
  }

  public virtual void EndLevel() {
    Engine2PINVOKE.IRender_EndLevel(swigCPtr);
  }

  public virtual void RegisterSceneObject(IScene arg0) {
    Engine2PINVOKE.IRender_RegisterSceneObject(swigCPtr, IScene.getCPtr(arg0));
  }

  public virtual double GetElapsedTime() {
    double ret = Engine2PINVOKE.IRender_GetElapsedTime(swigCPtr);
    return ret;
  }

  public virtual int GetBPP() {
    int ret = Engine2PINVOKE.IRender_GetBPP(swigCPtr);
    return ret;
  }

  public virtual int GetWidth() {
    int ret = Engine2PINVOKE.IRender_GetWidth(swigCPtr);
    return ret;
  }

  public virtual int GetHeight() {
    int ret = Engine2PINVOKE.IRender_GetHeight(swigCPtr);
    return ret;
  }

  public virtual SWIGTYPE_p_HRESULT ToggleFullscreen() {
    SWIGTYPE_p_HRESULT ret = new SWIGTYPE_p_HRESULT(Engine2PINVOKE.IRender_ToggleFullscreen(swigCPtr), true);
    return ret;
  }

  public virtual SWIGTYPE_p_HRESULT ReCreateScreen(int Width, int Height, int Bpp, int bFullscreen) {
    SWIGTYPE_p_HRESULT ret = new SWIGTYPE_p_HRESULT(Engine2PINVOKE.IRender_ReCreateScreen(swigCPtr, Width, Height, Bpp, bFullscreen), true);
    return ret;
  }

  public virtual void SetDebugState(int arg0) {
    Engine2PINVOKE.IRender_SetDebugState(swigCPtr, arg0);
  }

  public virtual void ForceWireframe(int arg0) {
    Engine2PINVOKE.IRender_ForceWireframe(swigCPtr, arg0);
  }

  public virtual void SaveScreenshot() {
    Engine2PINVOKE.IRender_SaveScreenshot(swigCPtr);
  }

  public virtual void SaveScreenShot(string name) {
    Engine2PINVOKE.IRender_SaveScreenShot(swigCPtr, name);
  }

  public virtual void RenderOnlyGUI(bool arg0) {
    Engine2PINVOKE.IRender_RenderOnlyGUI(swigCPtr, arg0);
  }

  public virtual int AddFont(string strFontName, int dwHeight, int dwFlags) {
    int ret = Engine2PINVOKE.IRender_AddFont__SWIG_0(swigCPtr, strFontName, dwHeight, dwFlags);
    return ret;
  }

  public virtual int AddFont(string strFontName, int dwHeight) {
    int ret = Engine2PINVOKE.IRender_AddFont__SWIG_1(swigCPtr, strFontName, dwHeight);
    return ret;
  }

  public virtual int AddFont(string strFontName, string strFontDesc, int dwSpacing) {
    int ret = Engine2PINVOKE.IRender_AddFont__SWIG_2(swigCPtr, strFontName, strFontDesc, dwSpacing);
    return ret;
  }

  public virtual void GetFontStatistics(int font, SFontStatistics outStats) {
    Engine2PINVOKE.IRender_GetFontStatistics(swigCPtr, font, SFontStatistics.getCPtr(outStats));
  }

  public virtual SWIGTYPE_p_HRESULT DrawText(int font, float x, float y, int dwColor, string strText, int dwFlags) {
    SWIGTYPE_p_HRESULT ret = new SWIGTYPE_p_HRESULT(Engine2PINVOKE.IRender_DrawText__SWIG_0(swigCPtr, font, x, y, dwColor, strText, dwFlags), true);
    return ret;
  }

  public virtual SWIGTYPE_p_HRESULT DrawText(int font, float x, float y, int dwColor, string strText) {
    SWIGTYPE_p_HRESULT ret = new SWIGTYPE_p_HRESULT(Engine2PINVOKE.IRender_DrawText__SWIG_1(swigCPtr, font, x, y, dwColor, strText), true);
    return ret;
  }

  public virtual SWIGTYPE_p_HRESULT DrawTextScaled(int num, float x, float y, float z, float fXScale, float fYScale, int dwColor, string strText, int dwFlags) {
    SWIGTYPE_p_HRESULT ret = new SWIGTYPE_p_HRESULT(Engine2PINVOKE.IRender_DrawTextScaled__SWIG_0(swigCPtr, num, x, y, z, fXScale, fYScale, dwColor, strText, dwFlags), true);
    return ret;
  }

  public virtual SWIGTYPE_p_HRESULT DrawTextScaled(int num, float x, float y, float z, float fXScale, float fYScale, int dwColor, string strText) {
    SWIGTYPE_p_HRESULT ret = new SWIGTYPE_p_HRESULT(Engine2PINVOKE.IRender_DrawTextScaled__SWIG_1(swigCPtr, num, x, y, z, fXScale, fYScale, dwColor, strText), true);
    return ret;
  }

  public virtual void GetTextExtent(int font, string text, SWIGTYPE_p_SIZE outSize) {
    Engine2PINVOKE.IRender_GetTextExtent(swigCPtr, font, text, SWIGTYPE_p_SIZE.getCPtr(outSize));
  }

  public virtual void GetCharExtent(int font, char singleCharacter, SWIGTYPE_p_SIZE outSize) {
    Engine2PINVOKE.IRender_GetCharExtent(swigCPtr, font, singleCharacter, SWIGTYPE_p_SIZE.getCPtr(outSize));
  }

  public virtual void SetDebugInfoColor(int r, int g, int b, int a) {
    Engine2PINVOKE.IRender_SetDebugInfoColor(swigCPtr, r, g, b, a);
  }

  public virtual IGUIRenderObject CreateGUIObject() {
    global::System.IntPtr cPtr = Engine2PINVOKE.IRender_CreateGUIObject(swigCPtr);
    IGUIRenderObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new IGUIRenderObject(cPtr, false);
    return ret;
  }

  public virtual ILight AddDynamicLight() {
    global::System.IntPtr cPtr = Engine2PINVOKE.IRender_AddDynamicLight(swigCPtr);
    ILight ret = (cPtr == global::System.IntPtr.Zero) ? null : new ILight(cPtr, false);
    return ret;
  }

  public virtual void DeleteLight(ILight arg0) {
    Engine2PINVOKE.IRender_DeleteLight(swigCPtr, ILight.getCPtr(arg0));
  }

  public virtual void SetAmbientLight(int arg0) {
    Engine2PINVOKE.IRender_SetAmbientLight(swigCPtr, arg0);
  }

  public virtual void SetAmbientShadow(int arg0) {
    Engine2PINVOKE.IRender_SetAmbientShadow(swigCPtr, arg0);
  }

  public virtual SWIGTYPE_p_Engine2__VectorT_Engine2__String_templateT_char_Engine2__StandardAllocator_t_t FillResolutionList(SWIGTYPE_p_int Curr) {
    SWIGTYPE_p_Engine2__VectorT_Engine2__String_templateT_char_Engine2__StandardAllocator_t_t ret = new SWIGTYPE_p_Engine2__VectorT_Engine2__String_templateT_char_Engine2__StandardAllocator_t_t(Engine2PINVOKE.IRender_FillResolutionList(swigCPtr, SWIGTYPE_p_int.getCPtr(Curr)), false);
    return ret;
  }

  public virtual SWIGTYPE_p_Engine2__VectorT_Engine2__String_templateT_char_Engine2__StandardAllocator_t_t FillProfilesList(SWIGTYPE_p_int Curr) {
    SWIGTYPE_p_Engine2__VectorT_Engine2__String_templateT_char_Engine2__StandardAllocator_t_t ret = new SWIGTYPE_p_Engine2__VectorT_Engine2__String_templateT_char_Engine2__StandardAllocator_t_t(Engine2PINVOKE.IRender_FillProfilesList(swigCPtr, SWIGTYPE_p_int.getCPtr(Curr)), false);
    return ret;
  }

  public virtual SWIGTYPE_p_Engine2__VectorT_Engine2__String_templateT_char_Engine2__StandardAllocator_t_t FillMultisampleList(SWIGTYPE_p_int Curr) {
    SWIGTYPE_p_Engine2__VectorT_Engine2__String_templateT_char_Engine2__StandardAllocator_t_t ret = new SWIGTYPE_p_Engine2__VectorT_Engine2__String_templateT_char_Engine2__StandardAllocator_t_t(Engine2PINVOKE.IRender_FillMultisampleList(swigCPtr, SWIGTYPE_p_int.getCPtr(Curr)), false);
    return ret;
  }

  public virtual SWIGTYPE_p_HRESULT AddPostEffect(string arg0) {
    SWIGTYPE_p_HRESULT ret = new SWIGTYPE_p_HRESULT(Engine2PINVOKE.IRender_AddPostEffect(swigCPtr, arg0), true);
    return ret;
  }

  public virtual int PostEffectActive(string arg0) {
    int ret = Engine2PINVOKE.IRender_PostEffectActive(swigCPtr, arg0);
    return ret;
  }

  public virtual void SetPostEffectState(string arg0, SWIGTYPE_p_eActiveType arg1) {
    Engine2PINVOKE.IRender_SetPostEffectState(swigCPtr, arg0, SWIGTYPE_p_eActiveType.getCPtr(arg1));
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual SWIGTYPE_p_TEXNUM AddTexture(string texname, int width, int height, int mips, int usage, SWIGTYPE_p_TEXFORMAT format, SWIGTYPE_p_BUFPOOL pool, SWIGTYPE_p_eMeshType type) {
    SWIGTYPE_p_TEXNUM ret = new SWIGTYPE_p_TEXNUM(Engine2PINVOKE.IRender_AddTexture__SWIG_4(swigCPtr, texname, width, height, mips, usage, SWIGTYPE_p_TEXFORMAT.getCPtr(format), SWIGTYPE_p_BUFPOOL.getCPtr(pool), SWIGTYPE_p_eMeshType.getCPtr(type)), true);
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual SWIGTYPE_p_TEXNUM AddTexture(string texname, int width, int height, int mips, int usage, SWIGTYPE_p_TEXFORMAT format, SWIGTYPE_p_BUFPOOL pool) {
    SWIGTYPE_p_TEXNUM ret = new SWIGTYPE_p_TEXNUM(Engine2PINVOKE.IRender_AddTexture__SWIG_5(swigCPtr, texname, width, height, mips, usage, SWIGTYPE_p_TEXFORMAT.getCPtr(format), SWIGTYPE_p_BUFPOOL.getCPtr(pool)), true);
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual SWIGTYPE_p_HRESULT MergeTextures(string source, string destination, SWIGTYPE_p_UINT StartX, SWIGTYPE_p_UINT StartY) {
    SWIGTYPE_p_HRESULT ret = new SWIGTYPE_p_HRESULT(Engine2PINVOKE.IRender_MergeTextures(swigCPtr, source, destination, SWIGTYPE_p_UINT.getCPtr(StartX), SWIGTYPE_p_UINT.getCPtr(StartY)), true);
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual SWIGTYPE_p_TEXNUM AddTextureFromMemory(SWIGTYPE_p_uint8 data, int pitch, SWIGTYPE_p_TEXFORMAT srcformat, int srcbits, int width, int height, int mips, int dstbits, int usage, SWIGTYPE_p_TEXFORMAT format, SWIGTYPE_p_BUFPOOL pool, string destname, bool bAsync, SWIGTYPE_p_TEXNUM replaceTexture, SWIGTYPE_p_eMeshType type, int srcMips) {
    SWIGTYPE_p_TEXNUM ret = new SWIGTYPE_p_TEXNUM(Engine2PINVOKE.IRender_AddTextureFromMemory__SWIG_0(swigCPtr, SWIGTYPE_p_uint8.getCPtr(data), pitch, SWIGTYPE_p_TEXFORMAT.getCPtr(srcformat), srcbits, width, height, mips, dstbits, usage, SWIGTYPE_p_TEXFORMAT.getCPtr(format), SWIGTYPE_p_BUFPOOL.getCPtr(pool), destname, bAsync, SWIGTYPE_p_TEXNUM.getCPtr(replaceTexture), SWIGTYPE_p_eMeshType.getCPtr(type), srcMips), true);
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual SWIGTYPE_p_TEXNUM AddTextureFromMemory(SWIGTYPE_p_uint8 data, int pitch, SWIGTYPE_p_TEXFORMAT srcformat, int srcbits, int width, int height, int mips, int dstbits, int usage, SWIGTYPE_p_TEXFORMAT format, SWIGTYPE_p_BUFPOOL pool, string destname, bool bAsync, SWIGTYPE_p_TEXNUM replaceTexture, SWIGTYPE_p_eMeshType type) {
    SWIGTYPE_p_TEXNUM ret = new SWIGTYPE_p_TEXNUM(Engine2PINVOKE.IRender_AddTextureFromMemory__SWIG_1(swigCPtr, SWIGTYPE_p_uint8.getCPtr(data), pitch, SWIGTYPE_p_TEXFORMAT.getCPtr(srcformat), srcbits, width, height, mips, dstbits, usage, SWIGTYPE_p_TEXFORMAT.getCPtr(format), SWIGTYPE_p_BUFPOOL.getCPtr(pool), destname, bAsync, SWIGTYPE_p_TEXNUM.getCPtr(replaceTexture), SWIGTYPE_p_eMeshType.getCPtr(type)), true);
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual SWIGTYPE_p_TEXNUM AddTextureFromMemory(SWIGTYPE_p_uint8 data, int pitch, SWIGTYPE_p_TEXFORMAT srcformat, int srcbits, int width, int height, int mips, int dstbits, int usage, SWIGTYPE_p_TEXFORMAT format, SWIGTYPE_p_BUFPOOL pool, string destname, bool bAsync, SWIGTYPE_p_TEXNUM replaceTexture) {
    SWIGTYPE_p_TEXNUM ret = new SWIGTYPE_p_TEXNUM(Engine2PINVOKE.IRender_AddTextureFromMemory__SWIG_2(swigCPtr, SWIGTYPE_p_uint8.getCPtr(data), pitch, SWIGTYPE_p_TEXFORMAT.getCPtr(srcformat), srcbits, width, height, mips, dstbits, usage, SWIGTYPE_p_TEXFORMAT.getCPtr(format), SWIGTYPE_p_BUFPOOL.getCPtr(pool), destname, bAsync, SWIGTYPE_p_TEXNUM.getCPtr(replaceTexture)), true);
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual SWIGTYPE_p_TEXNUM AddTextureFromMemory2(string pData, uint count, string texName, SWIGTYPE_p_TEXFORMAT expectedFormat, SWIGTYPE_p_eMeshType type, bool bOverride, bool bForceMips) {
    SWIGTYPE_p_TEXNUM ret = new SWIGTYPE_p_TEXNUM(Engine2PINVOKE.IRender_AddTextureFromMemory2__SWIG_0(swigCPtr, pData, count, texName, SWIGTYPE_p_TEXFORMAT.getCPtr(expectedFormat), SWIGTYPE_p_eMeshType.getCPtr(type), bOverride, bForceMips), true);
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual SWIGTYPE_p_TEXNUM AddTextureFromMemory2(string pData, uint count, string texName, SWIGTYPE_p_TEXFORMAT expectedFormat, SWIGTYPE_p_eMeshType type, bool bOverride) {
    SWIGTYPE_p_TEXNUM ret = new SWIGTYPE_p_TEXNUM(Engine2PINVOKE.IRender_AddTextureFromMemory2__SWIG_1(swigCPtr, pData, count, texName, SWIGTYPE_p_TEXFORMAT.getCPtr(expectedFormat), SWIGTYPE_p_eMeshType.getCPtr(type), bOverride), true);
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual SWIGTYPE_p_TEXNUM AddTextureFromMemory2(string pData, uint count, string texName, SWIGTYPE_p_TEXFORMAT expectedFormat, SWIGTYPE_p_eMeshType type) {
    SWIGTYPE_p_TEXNUM ret = new SWIGTYPE_p_TEXNUM(Engine2PINVOKE.IRender_AddTextureFromMemory2__SWIG_2(swigCPtr, pData, count, texName, SWIGTYPE_p_TEXFORMAT.getCPtr(expectedFormat), SWIGTYPE_p_eMeshType.getCPtr(type)), true);
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual SWIGTYPE_p_TEXNUM AddTextureFromMemory2(string pData, uint count, string texName, SWIGTYPE_p_TEXFORMAT expectedFormat) {
    SWIGTYPE_p_TEXNUM ret = new SWIGTYPE_p_TEXNUM(Engine2PINVOKE.IRender_AddTextureFromMemory2__SWIG_3(swigCPtr, pData, count, texName, SWIGTYPE_p_TEXFORMAT.getCPtr(expectedFormat)), true);
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool StretchRectCopy(SWIGTYPE_p_TEXNUM dsttex, SWIGTYPE_p_RECT dstrect, SWIGTYPE_p_TEXNUM srctex, SWIGTYPE_p_RECT srcrect) {
    bool ret = Engine2PINVOKE.IRender_StretchRectCopy(swigCPtr, SWIGTYPE_p_TEXNUM.getCPtr(dsttex), SWIGTYPE_p_RECT.getCPtr(dstrect), SWIGTYPE_p_TEXNUM.getCPtr(srctex), SWIGTYPE_p_RECT.getCPtr(srcrect));
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool ReloadTexture(SWIGTYPE_p_TEXNUM arg0) {
    bool ret = Engine2PINVOKE.IRender_ReloadTexture(swigCPtr, SWIGTYPE_p_TEXNUM.getCPtr(arg0));
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int GetTextureWidth(int tex) {
    int ret = Engine2PINVOKE.IRender_GetTextureWidth(swigCPtr, tex);
    return ret;
  }

  public virtual int GetTextureHeight(int tex) {
    int ret = Engine2PINVOKE.IRender_GetTextureHeight(swigCPtr, tex);
    return ret;
  }

  public virtual SWIGTYPE_p_HRESULT Lock(int num, SWIGTYPE_p_LOCKED_RECT pLocked, SWIGTYPE_p_RECT pRect, int Usage) {
    SWIGTYPE_p_HRESULT ret = new SWIGTYPE_p_HRESULT(Engine2PINVOKE.IRender_Lock(swigCPtr, num, SWIGTYPE_p_LOCKED_RECT.getCPtr(pLocked), SWIGTYPE_p_RECT.getCPtr(pRect), Usage), true);
    return ret;
  }

  public virtual void Unlock(int arg0) {
    Engine2PINVOKE.IRender_Unlock(swigCPtr, arg0);
  }

  public virtual void SetupFog(int Color, int ColorEnd, int ColorWater, float Start, float End, float Density, float MaxDensity) {
    Engine2PINVOKE.IRender_SetupFog(swigCPtr, Color, ColorEnd, ColorWater, Start, End, Density, MaxDensity);
  }

  public virtual void EnableFog(int bEnable) {
    Engine2PINVOKE.IRender_EnableFog(swigCPtr, bEnable);
  }

  public virtual SWIGTYPE_p_HRESULT AddCreatePostEffect(SWIGTYPE_p_PostProcessingEffectPtr ptr, string name, SWIGTYPE_p_Engine2__VectorT_CParam_t arg2) {
    SWIGTYPE_p_HRESULT ret = new SWIGTYPE_p_HRESULT(Engine2PINVOKE.IRender_AddCreatePostEffect(swigCPtr, SWIGTYPE_p_PostProcessingEffectPtr.getCPtr(ptr), name, SWIGTYPE_p_Engine2__VectorT_CParam_t.getCPtr(arg2)), true);
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void DeletePostEffect(SWIGTYPE_p_IPostProcessingEffect arg0) {
    Engine2PINVOKE.IRender_DeletePostEffect(swigCPtr, SWIGTYPE_p_IPostProcessingEffect.getCPtr(arg0));
  }

  public virtual void SetTransform(int arg0, CMatrix44 arg1) {
    Engine2PINVOKE.IRender_SetTransform(swigCPtr, arg0, CMatrix44.getCPtr(arg1));
  }

  public virtual void SetGammaLevel(float gamma, float contrast, float brightness) {
    Engine2PINVOKE.IRender_SetGammaLevel(swigCPtr, gamma, contrast, brightness);
  }

  public virtual SWIGTYPE_p_sHardwareConfig GetHardwareConfiguration() {
    global::System.IntPtr cPtr = Engine2PINVOKE.IRender_GetHardwareConfiguration(swigCPtr);
    SWIGTYPE_p_sHardwareConfig ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_sHardwareConfig(cPtr, false);
    return ret;
  }

  public virtual SWIGTYPE_p_IMeshBuilder CreateMeshBuilder() {
    global::System.IntPtr cPtr = Engine2PINVOKE.IRender_CreateMeshBuilder(swigCPtr);
    SWIGTYPE_p_IMeshBuilder ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_IMeshBuilder(cPtr, false);
    return ret;
  }

  public virtual void SetMinLOD(int arg0) {
    Engine2PINVOKE.IRender_SetMinLOD(swigCPtr, arg0);
  }

  public virtual int GetMinLOD() {
    int ret = Engine2PINVOKE.IRender_GetMinLOD(swigCPtr);
    return ret;
  }

  public virtual void AddDebugInfo(string text) {
    Engine2PINVOKE.IRender_AddDebugInfo(swigCPtr, text);
  }

  public virtual void AddDebugInfoExt(int nRow, string text) {
    Engine2PINVOKE.IRender_AddDebugInfoExt(swigCPtr, nRow, text);
  }

  public virtual int AddSamplerState(string Name) {
    int ret = Engine2PINVOKE.IRender_AddSamplerState(swigCPtr, Name);
    return ret;
  }

  public virtual int AddProjectionMatrix(float fFOV, float fAspect, float fNear, float fFar) {
    int ret = Engine2PINVOKE.IRender_AddProjectionMatrix(swigCPtr, fFOV, fAspect, fNear, fFar);
    return ret;
  }

  public virtual void SetCameraProjectionMatrix(float fFOV, float fAspect, float fNear, float fFar) {
    Engine2PINVOKE.IRender_SetCameraProjectionMatrix(swigCPtr, fFOV, fAspect, fNear, fFar);
  }

  public virtual CVec3 ProjectPoint(CVec3 Point) {
    CVec3 ret = new CVec3(Engine2PINVOKE.IRender_ProjectPoint(swigCPtr, CVec3.getCPtr(Point)), true);
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual CVec3 UnprojectPoint(CVec3 Point) {
    CVec3 ret = new CVec3(Engine2PINVOKE.IRender_UnprojectPoint(swigCPtr, CVec3.getCPtr(Point)), true);
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void SetParam(SWIGTYPE_p_CParam arg0) {
    Engine2PINVOKE.IRender_SetParam(swigCPtr, SWIGTYPE_p_CParam.getCPtr(arg0));
  }

  public virtual void SetWaterDropsAmount(float fAmount) {
    Engine2PINVOKE.IRender_SetWaterDropsAmount(swigCPtr, fAmount);
  }

  public virtual void SetDofParam(EDofParam eType, float fParam) {
    Engine2PINVOKE.IRender_SetDofParam(swigCPtr, (int)eType, fParam);
  }

  public virtual void SetBloomParam(EBloomParam eType, float fParam) {
    Engine2PINVOKE.IRender_SetBloomParam(swigCPtr, (int)eType, fParam);
  }

  public virtual void SetMotionBlurParam(EMotionBlurParam eType, float fParam) {
    Engine2PINVOKE.IRender_SetMotionBlurParam(swigCPtr, (int)eType, fParam);
  }

  public virtual ERendererError GetLastError() {
    ERendererError ret = (ERendererError)Engine2PINVOKE.IRender_GetLastError(swigCPtr);
    return ret;
  }

  public virtual int GetMaxShadowLights() {
    int ret = Engine2PINVOKE.IRender_GetMaxShadowLights(swigCPtr);
    return ret;
  }

  public virtual int FindShader(string pShaderName) {
    int ret = Engine2PINVOKE.IRender_FindShader(swigCPtr, pShaderName);
    return ret;
  }

  public virtual IMeshInfo AddCreateMesh(CXmlElement paraminfo) {
    global::System.IntPtr cPtr = Engine2PINVOKE.IRender_AddCreateMesh(swigCPtr, CXmlElement.getCPtr(paraminfo));
    IMeshInfo ret = (cPtr == global::System.IntPtr.Zero) ? null : new IMeshInfo(cPtr, false);
    return ret;
  }

  public virtual bool ReloadMesh(string name) {
    bool ret = Engine2PINVOKE.IRender_ReloadMesh(swigCPtr, name);
    return ret;
  }

  public virtual SWIGTYPE_p_HRESULT DeleteMesh(IMeshInfo arg0) {
    SWIGTYPE_p_HRESULT ret = new SWIGTYPE_p_HRESULT(Engine2PINVOKE.IRender_DeleteMesh(swigCPtr, IMeshInfo.getCPtr(arg0)), true);
    return ret;
  }

  public virtual SWIGTYPE_p_HRESULT ReloadShaderLib() {
    SWIGTYPE_p_HRESULT ret = new SWIGTYPE_p_HRESULT(Engine2PINVOKE.IRender_ReloadShaderLib(swigCPtr), true);
    return ret;
  }

  public virtual SWIGTYPE_p_CParam GetGamma() {
    global::System.IntPtr cPtr = Engine2PINVOKE.IRender_GetGamma(swigCPtr);
    SWIGTYPE_p_CParam ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_CParam(cPtr, false);
    return ret;
  }

  public virtual bool UpdateStats(SWIGTYPE_p_IStats pStats) {
    bool ret = Engine2PINVOKE.IRender_UpdateStats(swigCPtr, SWIGTYPE_p_IStats.getCPtr(pStats));
    return ret;
  }

  public virtual void ShowCursor(int arg0) {
    Engine2PINVOKE.IRender_ShowCursor(swigCPtr, arg0);
  }

  public virtual bool IsFullScreen() {
    bool ret = Engine2PINVOKE.IRender_IsFullScreen(swigCPtr);
    return ret;
  }

  public virtual bool IsShadowsEnable() {
    bool ret = Engine2PINVOKE.IRender_IsShadowsEnable(swigCPtr);
    return ret;
  }

  public virtual bool IsShowFPSEnable() {
    bool ret = Engine2PINVOKE.IRender_IsShowFPSEnable(swigCPtr);
    return ret;
  }

  public virtual bool IsVSyncEnable() {
    bool ret = Engine2PINVOKE.IRender_IsVSyncEnable(swigCPtr);
    return ret;
  }

  public virtual void SetShadowMode(int arg0) {
    Engine2PINVOKE.IRender_SetShadowMode(swigCPtr, arg0);
  }

  public virtual void SetShowFPS(bool arg0) {
    Engine2PINVOKE.IRender_SetShowFPS(swigCPtr, arg0);
  }

  public virtual void SetVSyncEnable(bool arg0) {
    Engine2PINVOKE.IRender_SetVSyncEnable(swigCPtr, arg0);
  }

  public virtual void SetMultisampeMode(int arg0) {
    Engine2PINVOKE.IRender_SetMultisampeMode(swigCPtr, arg0);
  }

  public virtual string GetProfileName(int arg0) {
    string ret = Engine2PINVOKE.IRender_GetProfileName(swigCPtr, arg0);
    return ret;
  }

  public virtual int GetCurrentProfile() {
    int ret = Engine2PINVOKE.IRender_GetCurrentProfile(swigCPtr);
    return ret;
  }

  public virtual SWIGTYPE_p_HRESULT PlayVideo(string arg0) {
    SWIGTYPE_p_HRESULT ret = new SWIGTYPE_p_HRESULT(Engine2PINVOKE.IRender_PlayVideo(swigCPtr, arg0), true);
    return ret;
  }

  public virtual void StopVideo() {
    Engine2PINVOKE.IRender_StopVideo(swigCPtr);
  }

  public virtual int IsVideoPlaying() {
    int ret = Engine2PINVOKE.IRender_IsVideoPlaying(swigCPtr);
    return ret;
  }

  public virtual SWIGTYPE_p_ETarget GetTarget() {
    SWIGTYPE_p_ETarget ret = new SWIGTYPE_p_ETarget(Engine2PINVOKE.IRender_GetTarget(swigCPtr), true);
    return ret;
  }

  public virtual SWIGTYPE_p_IRenderToTextureObject GetRenderToTextureObject(bool bZBuffer) {
    global::System.IntPtr cPtr = Engine2PINVOKE.IRender_GetRenderToTextureObject__SWIG_0(swigCPtr, bZBuffer);
    SWIGTYPE_p_IRenderToTextureObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_IRenderToTextureObject(cPtr, false);
    return ret;
  }

  public virtual SWIGTYPE_p_IRenderToTextureObject GetRenderToTextureObject() {
    global::System.IntPtr cPtr = Engine2PINVOKE.IRender_GetRenderToTextureObject__SWIG_1(swigCPtr);
    SWIGTYPE_p_IRenderToTextureObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_IRenderToTextureObject(cPtr, false);
    return ret;
  }

  public virtual void SetGUICallback(SWIGTYPE_p_f_void__void arg0) {
    Engine2PINVOKE.IRender_SetGUICallback(swigCPtr, SWIGTYPE_p_f_void__void.getCPtr(arg0));
  }

  public virtual void SetGUIInvalidateCallback(SWIGTYPE_p_f_void__void arg0) {
    Engine2PINVOKE.IRender_SetGUIInvalidateCallback(swigCPtr, SWIGTYPE_p_f_void__void.getCPtr(arg0));
  }

  public virtual void SetGUIRestoreCallback(SWIGTYPE_p_f_void__void arg0) {
    Engine2PINVOKE.IRender_SetGUIRestoreCallback(swigCPtr, SWIGTYPE_p_f_void__void.getCPtr(arg0));
  }

  public virtual bool SetColorChart(SWIGTYPE_p_TEXNUM tex0, SWIGTYPE_p_TEXNUM tex1, float fBlendFactor) {
    bool ret = Engine2PINVOKE.IRender_SetColorChart__SWIG_0(swigCPtr, SWIGTYPE_p_TEXNUM.getCPtr(tex0), SWIGTYPE_p_TEXNUM.getCPtr(tex1), fBlendFactor);
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool SetColorChart(SWIGTYPE_p_TEXNUM tex0, SWIGTYPE_p_TEXNUM tex1) {
    bool ret = Engine2PINVOKE.IRender_SetColorChart__SWIG_1(swigCPtr, SWIGTYPE_p_TEXNUM.getCPtr(tex0), SWIGTYPE_p_TEXNUM.getCPtr(tex1));
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool SetColorChart(SWIGTYPE_p_TEXNUM tex0) {
    bool ret = Engine2PINVOKE.IRender_SetColorChart__SWIG_2(swigCPtr, SWIGTYPE_p_TEXNUM.getCPtr(tex0));
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual SWIGTYPE_p_TEXNUM LoadTextureToSystemMemory(string name, bool bStreamed) {
    SWIGTYPE_p_TEXNUM ret = new SWIGTYPE_p_TEXNUM(Engine2PINVOKE.IRender_LoadTextureToSystemMemory(swigCPtr, name, bStreamed), true);
    return ret;
  }

  public virtual SWIGTYPE_p_HRESULT LockTexture(int num, SWIGTYPE_p_LOCKED_RECT pLocked, SWIGTYPE_p_RECT pRect, int Usage) {
    SWIGTYPE_p_HRESULT ret = new SWIGTYPE_p_HRESULT(Engine2PINVOKE.IRender_LockTexture(swigCPtr, num, SWIGTYPE_p_LOCKED_RECT.getCPtr(pLocked), SWIGTYPE_p_RECT.getCPtr(pRect), Usage), true);
    return ret;
  }

  public virtual void UnlockTexture(int num) {
    Engine2PINVOKE.IRender_UnlockTexture(swigCPtr, num);
  }

  public virtual bool SaveTextureToFile(SWIGTYPE_p_TEXNUM num, string filename, SWIGTYPE_p_IMAGE_FILEFORMAT format) {
    bool ret = Engine2PINVOKE.IRender_SaveTextureToFile(swigCPtr, SWIGTYPE_p_TEXNUM.getCPtr(num), filename, SWIGTYPE_p_IMAGE_FILEFORMAT.getCPtr(format));
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual SWIGTYPE_p_SRenderStatistics GetStatistics(uint nFlags) {
    global::System.IntPtr cPtr = Engine2PINVOKE.IRender_GetStatistics__SWIG_0(swigCPtr, nFlags);
    SWIGTYPE_p_SRenderStatistics ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_SRenderStatistics(cPtr, false);
    return ret;
  }

  public virtual SWIGTYPE_p_SRenderStatistics GetStatistics() {
    global::System.IntPtr cPtr = Engine2PINVOKE.IRender_GetStatistics__SWIG_1(swigCPtr);
    SWIGTYPE_p_SRenderStatistics ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_SRenderStatistics(cPtr, false);
    return ret;
  }

  public virtual bool RegisterGraph(SWIGTYPE_p_SRenderGraph Graph) {
    bool ret = Engine2PINVOKE.IRender_RegisterGraph(swigCPtr, SWIGTYPE_p_SRenderGraph.getCPtr(Graph));
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int UnregisterGraph(string szName) {
    int ret = Engine2PINVOKE.IRender_UnregisterGraph(swigCPtr, szName);
    return ret;
  }

  public virtual bool EnableGraph(string szName, bool bEnable) {
    bool ret = Engine2PINVOKE.IRender_EnableGraph(swigCPtr, szName, bEnable);
    return ret;
  }

  public virtual MeshFactory GetFactory() {
    global::System.IntPtr cPtr = Engine2PINVOKE.IRender_GetFactory(swigCPtr);
    MeshFactory ret = (cPtr == global::System.IntPtr.Zero) ? null : new MeshFactory(cPtr, false);
    return ret;
  }

  public virtual SceneGraphFactory GetSceneGraphFactory() {
    global::System.IntPtr cPtr = Engine2PINVOKE.IRender_GetSceneGraphFactory(swigCPtr);
    SceneGraphFactory ret = (cPtr == global::System.IntPtr.Zero) ? null : new SceneGraphFactory(cPtr, false);
    return ret;
  }

  public virtual IDecalManager GetDecalManager() {
    global::System.IntPtr cPtr = Engine2PINVOKE.IRender_GetDecalManager(swigCPtr);
    IDecalManager ret = (cPtr == global::System.IntPtr.Zero) ? null : new IDecalManager(cPtr, false);
    return ret;
  }

  public virtual IDeviceDependendentInfo GetDeviceDependendentInfo() {
    global::System.IntPtr cPtr = Engine2PINVOKE.IRender_GetDeviceDependendentInfo(swigCPtr);
    IDeviceDependendentInfo ret = (cPtr == global::System.IntPtr.Zero) ? null : new IDeviceDependendentInfo(cPtr, false);
    return ret;
  }

  public virtual AnimationManager GetAnimationManager() {
    global::System.IntPtr cPtr = Engine2PINVOKE.IRender_GetAnimationManager(swigCPtr);
    AnimationManager ret = (cPtr == global::System.IntPtr.Zero) ? null : new AnimationManager(cPtr, false);
    return ret;
  }

  public virtual SWIGTYPE_p_eAsyncState GetTextureState(SWIGTYPE_p_TEXNUM num) {
    SWIGTYPE_p_eAsyncState ret = new SWIGTYPE_p_eAsyncState(Engine2PINVOKE.IRender_GetTextureState(swigCPtr, SWIGTYPE_p_TEXNUM.getCPtr(num)), true);
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int GetTextureInfo(SWIGTYPE_p_TEXNUM num, SMemTextureInfo info) {
    int ret = Engine2PINVOKE.IRender_GetTextureInfo(swigCPtr, SWIGTYPE_p_TEXNUM.getCPtr(num), SMemTextureInfo.getCPtr(info));
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual SWIGTYPE_p_IMaterialLib GetMaterialLib() {
    global::System.IntPtr cPtr = Engine2PINVOKE.IRender_GetMaterialLib(swigCPtr);
    SWIGTYPE_p_IMaterialLib ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_IMaterialLib(cPtr, false);
    return ret;
  }

  public virtual void AddToBatchCount(uint arg0) {
    Engine2PINVOKE.IRender_AddToBatchCount(swigCPtr, arg0);
  }

  public virtual void ForceRenderMask(SWIGTYPE_p_TShaderMask mask) {
    Engine2PINVOKE.IRender_ForceRenderMask(swigCPtr, SWIGTYPE_p_TShaderMask.getCPtr(mask));
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual SWIGTYPE_p_TShaderMask GetForcedRenderMask() {
    SWIGTYPE_p_TShaderMask ret = new SWIGTYPE_p_TShaderMask(Engine2PINVOKE.IRender_GetForcedRenderMask(swigCPtr), true);
    return ret;
  }

  public virtual void DumpTextures(SWIGTYPE_p_Engine2__VectorT_Engine2__String_templateT_char_Engine2__StandardAllocator_t_t pDest) {
    Engine2PINVOKE.IRender_DumpTextures__SWIG_0(swigCPtr, SWIGTYPE_p_Engine2__VectorT_Engine2__String_templateT_char_Engine2__StandardAllocator_t_t.getCPtr(pDest));
  }

  public virtual void DumpTextures() {
    Engine2PINVOKE.IRender_DumpTextures__SWIG_1(swigCPtr);
  }

  public virtual void DumpMeshes(SWIGTYPE_p_Engine2__VectorT_Engine2__String_templateT_char_Engine2__StandardAllocator_t_t pDest) {
    Engine2PINVOKE.IRender_DumpMeshes__SWIG_0(swigCPtr, SWIGTYPE_p_Engine2__VectorT_Engine2__String_templateT_char_Engine2__StandardAllocator_t_t.getCPtr(pDest));
  }

  public virtual void DumpMeshes() {
    Engine2PINVOKE.IRender_DumpMeshes__SWIG_1(swigCPtr);
  }

  public virtual void DumpAnimations(SWIGTYPE_p_Engine2__VectorT_Engine2__String_templateT_char_Engine2__StandardAllocator_t_t pDest) {
    Engine2PINVOKE.IRender_DumpAnimations__SWIG_0(swigCPtr, SWIGTYPE_p_Engine2__VectorT_Engine2__String_templateT_char_Engine2__StandardAllocator_t_t.getCPtr(pDest));
  }

  public virtual void DumpAnimations() {
    Engine2PINVOKE.IRender_DumpAnimations__SWIG_1(swigCPtr);
  }

  public virtual void SetRenderViewport(SWIGTYPE_p_RenderViewport view) {
    Engine2PINVOKE.IRender_SetRenderViewport(swigCPtr, SWIGTYPE_p_RenderViewport.getCPtr(view));
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual SWIGTYPE_p_RenderViewport GetRenderViewport() {
    SWIGTYPE_p_RenderViewport ret = new SWIGTYPE_p_RenderViewport(Engine2PINVOKE.IRender_GetRenderViewport(swigCPtr), true);
    return ret;
  }

  public virtual void SetRenderScissors(SWIGTYPE_p_RECT rect) {
    Engine2PINVOKE.IRender_SetRenderScissors(swigCPtr, SWIGTYPE_p_RECT.getCPtr(rect));
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual SWIGTYPE_p_RECT GetRenderScissors() {
    SWIGTYPE_p_RECT ret = new SWIGTYPE_p_RECT(Engine2PINVOKE.IRender_GetRenderScissors(swigCPtr), true);
    return ret;
  }

  public virtual void SetTextureStreamingSource(int arg0) {
    Engine2PINVOKE.IRender_SetTextureStreamingSource(swigCPtr, arg0);
  }

  public virtual int GetTextureStreamingSource() {
    int ret = Engine2PINVOKE.IRender_GetTextureStreamingSource(swigCPtr);
    return ret;
  }

  public virtual bool IsActive() {
    bool ret = Engine2PINVOKE.IRender_IsActive(swigCPtr);
    return ret;
  }

  public virtual void TimerActivate() {
    Engine2PINVOKE.IRender_TimerActivate(swigCPtr);
  }

  public virtual void TimerDeactivate() {
    Engine2PINVOKE.IRender_TimerDeactivate(swigCPtr);
  }

}
