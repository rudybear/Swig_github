//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.7
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class CCamera : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CCamera(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CCamera obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~CCamera() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          Engine2PINVOKE.delete_CCamera(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public CCamera() : this(Engine2PINVOKE.new_CCamera(), true) {
  }

  public CVec3 GetEyePt() {
    CVec3 ret = new CVec3(Engine2PINVOKE.CCamera_GetEyePt(swigCPtr), false);
    return ret;
  }

  public CVec3 GetLookatPt() {
    CVec3 ret = new CVec3(Engine2PINVOKE.CCamera_GetLookatPt(swigCPtr), false);
    return ret;
  }

  public CVec3 GetUpVec() {
    CVec3 ret = new CVec3(Engine2PINVOKE.CCamera_GetUpVec(swigCPtr), false);
    return ret;
  }

  public CVec3 GetViewDir() {
    CVec3 ret = new CVec3(Engine2PINVOKE.CCamera_GetViewDir(swigCPtr), false);
    return ret;
  }

  public CVec3 GetCross() {
    CVec3 ret = new CVec3(Engine2PINVOKE.CCamera_GetCross(swigCPtr), false);
    return ret;
  }

  public CMatrix44 GetViewMatrix() {
    CMatrix44 ret = new CMatrix44(Engine2PINVOKE.CCamera_GetViewMatrix(swigCPtr), false);
    return ret;
  }

  public CMatrix44 GetBillboardMatrix() {
    CMatrix44 ret = new CMatrix44(Engine2PINVOKE.CCamera_GetBillboardMatrix(swigCPtr), false);
    return ret;
  }

  public CMatrix44 GetProjMatrix() {
    CMatrix44 ret = new CMatrix44(Engine2PINVOKE.CCamera_GetProjMatrix(swigCPtr), false);
    return ret;
  }

  public float GetFarPlane() {
    float ret = Engine2PINVOKE.CCamera_GetFarPlane(swigCPtr);
    return ret;
  }

  public float GetNearPlane() {
    float ret = Engine2PINVOKE.CCamera_GetNearPlane(swigCPtr);
    return ret;
  }

  public float GetFOV() {
    float ret = Engine2PINVOKE.CCamera_GetFOV(swigCPtr);
    return ret;
  }

  public float GetFOVv() {
    float ret = Engine2PINVOKE.CCamera_GetFOVv(swigCPtr);
    return ret;
  }

  public float GetAspect() {
    float ret = Engine2PINVOKE.CCamera_GetAspect(swigCPtr);
    return ret;
  }

  public void SetViewMatrix(CMatrix44 mat) {
    Engine2PINVOKE.CCamera_SetViewMatrix(swigCPtr, CMatrix44.getCPtr(mat));
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetShadowViewParams(CVec3 vEyePt, CVec3 vDirection) {
    Engine2PINVOKE.CCamera_SetShadowViewParams(swigCPtr, CVec3.getCPtr(vEyePt), CVec3.getCPtr(vDirection));
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetViewParams(CVec3 vEyePt, CVec3 vLookatPt, CVec3 vUpVec) {
    Engine2PINVOKE.CCamera_SetViewParams(swigCPtr, CVec3.getCPtr(vEyePt), CVec3.getCPtr(vLookatPt), CVec3.getCPtr(vUpVec));
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetViewParams2(CVec3 vLookatDir, CVec3 vUpVec) {
    Engine2PINVOKE.CCamera_SetViewParams2(swigCPtr, CVec3.getCPtr(vLookatDir), CVec3.getCPtr(vUpVec));
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetViewParams3(CVec3 vEyePt, CVec3 vLookatDir, CVec3 vUpVec) {
    Engine2PINVOKE.CCamera_SetViewParams3(swigCPtr, CVec3.getCPtr(vEyePt), CVec3.getCPtr(vLookatDir), CVec3.getCPtr(vUpVec));
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetProjParams(float fFOV, float fAspect, float fNearPlane, float fFarPlane, float fDeltaX, float fDeltaY) {
    Engine2PINVOKE.CCamera_SetProjParams__SWIG_0(swigCPtr, fFOV, fAspect, fNearPlane, fFarPlane, fDeltaX, fDeltaY);
  }

  public void SetProjParams(float fFOV, float fAspect, float fNearPlane, float fFarPlane, float fDeltaX) {
    Engine2PINVOKE.CCamera_SetProjParams__SWIG_1(swigCPtr, fFOV, fAspect, fNearPlane, fFarPlane, fDeltaX);
  }

  public void SetProjParams(float fFOV, float fAspect, float fNearPlane, float fFarPlane) {
    Engine2PINVOKE.CCamera_SetProjParams__SWIG_2(swigCPtr, fFOV, fAspect, fNearPlane, fFarPlane);
  }

  public void GetProjParams(SWIGTYPE_p_float fFOV, SWIGTYPE_p_float fAspect, SWIGTYPE_p_float fNearPlane, SWIGTYPE_p_float fFarPlane) {
    Engine2PINVOKE.CCamera_GetProjParams(swigCPtr, SWIGTYPE_p_float.getCPtr(fFOV), SWIGTYPE_p_float.getCPtr(fAspect), SWIGTYPE_p_float.getCPtr(fNearPlane), SWIGTYPE_p_float.getCPtr(fFarPlane));
  }

  public void SetProjMatrix(CMatrix44 mat) {
    Engine2PINVOKE.CCamera_SetProjMatrix(swigCPtr, CMatrix44.getCPtr(mat));
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetProjMatrixNoClipPlanes(CMatrix44 mat) {
    Engine2PINVOKE.CCamera_SetProjMatrixNoClipPlanes(swigCPtr, CMatrix44.getCPtr(mat));
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetNearFar(float fNear, float fFar) {
    Engine2PINVOKE.CCamera_SetNearFar(swigCPtr, fNear, fFar);
  }

  public CVec3 GetShadowEyePt() {
    CVec3 ret = new CVec3(Engine2PINVOKE.CCamera_GetShadowEyePt(swigCPtr), false);
    return ret;
  }

  public CVec3 GetShadowDirection() {
    CVec3 ret = new CVec3(Engine2PINVOKE.CCamera_GetShadowDirection(swigCPtr), false);
    return ret;
  }

  public void MoveTo(CVec3 vEyePt) {
    Engine2PINVOKE.CCamera_MoveTo(swigCPtr, CVec3.getCPtr(vEyePt));
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
  }

  public void MoveToPlane(CVec3 vEyePt, float y) {
    Engine2PINVOKE.CCamera_MoveToPlane(swigCPtr, CVec3.getCPtr(vEyePt), y);
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetViewParamsAngles(CVec3 vEyePt, float Yaw, float Picth, float Roll) {
    Engine2PINVOKE.CCamera_SetViewParamsAngles(swigCPtr, CVec3.getCPtr(vEyePt), Yaw, Picth, Roll);
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
  }

  public float GetYaw() {
    float ret = Engine2PINVOKE.CCamera_GetYaw(swigCPtr);
    return ret;
  }

  public float GetPicth() {
    float ret = Engine2PINVOKE.CCamera_GetPicth(swigCPtr);
    return ret;
  }

  public float GetRoll() {
    float ret = Engine2PINVOKE.CCamera_GetRoll(swigCPtr);
    return ret;
  }

  public Visibility ComputeBoxVisibility(SWIGTYPE_p_float min, SWIGTYPE_p_float max) {
    Visibility ret = (Visibility)Engine2PINVOKE.CCamera_ComputeBoxVisibility__SWIG_0(swigCPtr, SWIGTYPE_p_float.getCPtr(min), SWIGTYPE_p_float.getCPtr(max));
    return ret;
  }

  public Visibility ComputeBoxVisibility(SWIGTYPE_p_CAABBox box) {
    Visibility ret = (Visibility)Engine2PINVOKE.CCamera_ComputeBoxVisibility__SWIG_1(swigCPtr, SWIGTYPE_p_CAABBox.getCPtr(box));
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool ComputeSphereVisibility(float x, float y, float z, float radius) {
    bool ret = Engine2PINVOKE.CCamera_ComputeSphereVisibility__SWIG_0(swigCPtr, x, y, z, radius);
    return ret;
  }

  public bool ComputeSphereVisibility(SWIGTYPE_p_float coord) {
    bool ret = Engine2PINVOKE.CCamera_ComputeSphereVisibility__SWIG_1(swigCPtr, SWIGTYPE_p_float.getCPtr(coord));
    return ret;
  }

  public bool ComputeSphereVisibility(CVec3 point, float radius) {
    bool ret = Engine2PINVOKE.CCamera_ComputeSphereVisibility__SWIG_2(swigCPtr, CVec3.getCPtr(point), radius);
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int ProjectionVisibilityTesting(CVec3 Point) {
    int ret = Engine2PINVOKE.CCamera_ProjectionVisibilityTesting(swigCPtr, CVec3.getCPtr(Point));
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool LastFrameChanged() {
    bool ret = Engine2PINVOKE.CCamera_LastFrameChanged(swigCPtr);
    return ret;
  }

  public void ClearChangedFlag() {
    Engine2PINVOKE.CCamera_ClearChangedFlag(swigCPtr);
  }

  public void SetChangedFlag() {
    Engine2PINVOKE.CCamera_SetChangedFlag(swigCPtr);
  }

  public void GetUnprojectedBoundingVertices(CVec3 pVer) {
    Engine2PINVOKE.CCamera_GetUnprojectedBoundingVertices(swigCPtr, CVec3.getCPtr(pVer));
  }

  public void GetBoundingVertices(CVec3 pVer) {
    Engine2PINVOKE.CCamera_GetBoundingVertices(swigCPtr, CVec3.getCPtr(pVer));
  }

  public SWIGTYPE_p_CPlane GetFrustumPlane(int i) {
    global::System.IntPtr cPtr = Engine2PINVOKE.CCamera_GetFrustumPlane(swigCPtr, i);
    SWIGTYPE_p_CPlane ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_CPlane(cPtr, false);
    return ret;
  }

  public bool ComputePointVisibility(CVec3 point) {
    bool ret = Engine2PINVOKE.CCamera_ComputePointVisibility(swigCPtr, CVec3.getCPtr(point));
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
