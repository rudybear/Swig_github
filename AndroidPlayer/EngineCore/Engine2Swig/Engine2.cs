//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.7
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class Engine2 {
  public static ICore CreateCore(eStartGameType arg0, string pName) {
    global::System.IntPtr cPtr = Engine2PINVOKE.CreateCore__SWIG_0((int)arg0, pName);
    ICore ret = (cPtr == global::System.IntPtr.Zero) ? null : new ICore(cPtr, false);
    return ret;
  }

  public static ICore CreateCore(eStartGameType arg0) {
    global::System.IntPtr cPtr = Engine2PINVOKE.CreateCore__SWIG_1((int)arg0);
    ICore ret = (cPtr == global::System.IntPtr.Zero) ? null : new ICore(cPtr, false);
    return ret;
  }

  public static void DeleteCore(ICore pCore) {
    Engine2PINVOKE.DeleteCore(ICore.getCPtr(pCore));
  }

  public static int Color_RGBA(int r, int g, int b, int a, ERenderer rt) {
    int ret = Engine2PINVOKE.Color_RGBA(r, g, b, a, (int)rt);
    return ret;
  }

  public static int Color_RGBA_Texture(int r, int g, int b, int a, ERenderer rt) {
    int ret = Engine2PINVOKE.Color_RGBA_Texture(r, g, b, a, (int)rt);
    return ret;
  }

  public static CVec2 CVec2BaryCentric(CVec2 v1, CVec2 v2, CVec2 v3, float f, float g) {
    CVec2 ret = new CVec2(Engine2PINVOKE.CVec2BaryCentric(CVec2.getCPtr(v1), CVec2.getCPtr(v2), CVec2.getCPtr(v3), f, g), true);
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CVec3 mul_float(float arg0, CVec3 arg1) {
    CVec3 ret = new CVec3(Engine2PINVOKE.mul_float__SWIG_0(arg0, CVec3.getCPtr(arg1)), true);
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CVec4 mul_float(float arg0, CVec4 arg1) {
    CVec4 ret = new CVec4(Engine2PINVOKE.mul_float__SWIG_1(arg0, CVec4.getCPtr(arg1)), true);
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CVec2 CVec2Lerp(CVec2 v0, CVec2 v1, float t) {
    CVec2 ret = new CVec2(Engine2PINVOKE.CVec2Lerp(CVec2.getCPtr(v0), CVec2.getCPtr(v1), t), true);
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CVec2 CVec2Normalize(CVec2 v) {
    CVec2 ret = new CVec2(Engine2PINVOKE.CVec2Normalize(CVec2.getCPtr(v)), true);
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CVec2 CVec2NormalizeFast(CVec2 v) {
    CVec2 ret = new CVec2(Engine2PINVOKE.CVec2NormalizeFast(CVec2.getCPtr(v)), true);
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CVec3 CVec3Cross(CVec3 vOut, CVec3 v0, CVec3 v1) {
    global::System.IntPtr cPtr = Engine2PINVOKE.CVec3Cross(CVec3.getCPtr(vOut), CVec3.getCPtr(v0), CVec3.getCPtr(v1));
    CVec3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new CVec3(cPtr, false);
    return ret;
  }

  public static float CVec3Dot(CVec3 v0, CVec3 v1) {
    float ret = Engine2PINVOKE.CVec3Dot(CVec3.getCPtr(v0), CVec3.getCPtr(v1));
    return ret;
  }

  public static CVec3 CVec3Lerp(CVec3 vOut, CVec3 v0, CVec3 v1, float t) {
    global::System.IntPtr cPtr = Engine2PINVOKE.CVec3Lerp(CVec3.getCPtr(vOut), CVec3.getCPtr(v0), CVec3.getCPtr(v1), t);
    CVec3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new CVec3(cPtr, false);
    return ret;
  }

  public static bool less(CVec3 lhs, CVec3 rhs) {
    bool ret = Engine2PINVOKE.less(CVec3.getCPtr(lhs), CVec3.getCPtr(rhs));
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool great(CVec3 lhs, CVec3 rhs) {
    bool ret = Engine2PINVOKE.great(CVec3.getCPtr(lhs), CVec3.getCPtr(rhs));
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CVec3 CVec3TransformCoord(CVec3 vOut, CVec3 vIn, CMatrix44 mIn) {
    CVec3 ret = new CVec3(Engine2PINVOKE.CVec3TransformCoord(CVec3.getCPtr(vOut), CVec3.getCPtr(vIn), CMatrix44.getCPtr(mIn)), true);
    return ret;
  }

  public static CVec4 CVec3Transform(CVec4 vOut, CVec3 vIn, CMatrix44 mIn) {
    CVec4 ret = new CVec4(Engine2PINVOKE.CVec3Transform(CVec4.getCPtr(vOut), CVec3.getCPtr(vIn), CMatrix44.getCPtr(mIn)), true);
    return ret;
  }

  public static CVec3 CVec3TransformNormal(CVec3 vOut, CVec3 vIn, CMatrix44 mIn) {
    CVec3 ret = new CVec3(Engine2PINVOKE.CVec3TransformNormal(CVec3.getCPtr(vOut), CVec3.getCPtr(vIn), CMatrix44.getCPtr(mIn)), true);
    return ret;
  }

  public static CVec3 CVec3Project(CVec3 pt, SWIGTYPE_p_RenderViewport viewport, CMatrix44 projection, CMatrix44 view, CMatrix44 world) {
    CVec3 ret = new CVec3(Engine2PINVOKE.CVec3Project(CVec3.getCPtr(pt), SWIGTYPE_p_RenderViewport.getCPtr(viewport), CMatrix44.getCPtr(projection), CMatrix44.getCPtr(view), CMatrix44.getCPtr(world)), true);
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CVec3 CVec3Unproject(CVec3 pt, SWIGTYPE_p_RenderViewport viewport, CMatrix44 projection, CMatrix44 view, CMatrix44 world) {
    CVec3 ret = new CVec3(Engine2PINVOKE.CVec3Unproject(CVec3.getCPtr(pt), SWIGTYPE_p_RenderViewport.getCPtr(viewport), CMatrix44.getCPtr(projection), CMatrix44.getCPtr(view), CMatrix44.getCPtr(world)), true);
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CVec3 FromQuakeAngleToDir(int fAngle) {
    CVec3 ret = new CVec3(Engine2PINVOKE.FromQuakeAngleToDir(fAngle), true);
    return ret;
  }

  public static CVec3 FromQuakeAngleToEuler(int fAngle) {
    CVec3 ret = new CVec3(Engine2PINVOKE.FromQuakeAngleToEuler(fAngle), true);
    return ret;
  }

  public static CVec3 quat_vec_mult(SWIGTYPE_p_CQuaternion q, CVec3 v) {
    CVec3 ret = new CVec3(Engine2PINVOKE.quat_vec_mult(SWIGTYPE_p_CQuaternion.getCPtr(q), CVec3.getCPtr(v)), true);
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CVec3 vec_quat_mult(CVec3 v, SWIGTYPE_p_CQuaternion q) {
    CVec3 ret = new CVec3(Engine2PINVOKE.vec_quat_mult(CVec3.getCPtr(v), SWIGTYPE_p_CQuaternion.getCPtr(q)), true);
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CVec4 CVec4TransformPoint(CVec4 vOut, CVec4 vIn, CMatrix44 mat) {
    CVec4 ret = new CVec4(Engine2PINVOKE.CVec4TransformPoint(CVec4.getCPtr(vOut), CVec4.getCPtr(vIn), CMatrix44.getCPtr(mat)), true);
    return ret;
  }

  public static CVec4 CVec4Lerp(CVec4 vOut, CVec4 v0, CVec4 v1, float t) {
    global::System.IntPtr cPtr = Engine2PINVOKE.CVec4Lerp(CVec4.getCPtr(vOut), CVec4.getCPtr(v0), CVec4.getCPtr(v1), t);
    CVec4 ret = (cPtr == global::System.IntPtr.Zero) ? null : new CVec4(cPtr, false);
    return ret;
  }

  public static CMatrix44 MatrixOrthoLH(float w, float h, float zn, float zf) {
    CMatrix44 ret = new CMatrix44(Engine2PINVOKE.MatrixOrthoLH(w, h, zn, zf), true);
    return ret;
  }

  public static CMatrix44 MatrixOrthoOffCenterLH(float l, float r, float b, float t, float zn, float zf) {
    CMatrix44 ret = new CMatrix44(Engine2PINVOKE.MatrixOrthoOffCenterLH(l, r, b, t, zn, zf), true);
    return ret;
  }

  public static CMatrix44 MatrixLookAtLH(CVec3 nEye, CVec3 nAt, CVec3 nUp) {
    CMatrix44 ret = new CMatrix44(Engine2PINVOKE.MatrixLookAtLH(CVec3.getCPtr(nEye), CVec3.getCPtr(nAt), CVec3.getCPtr(nUp)), true);
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CMatrix44 MatrixLookAtRH(CVec3 nEye, CVec3 nAt, CVec3 nUp) {
    CMatrix44 ret = new CMatrix44(Engine2PINVOKE.MatrixLookAtRH(CVec3.getCPtr(nEye), CVec3.getCPtr(nAt), CVec3.getCPtr(nUp)), true);
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CMatrix44 MatrixRotationYawPitchRoll(float Yaw, float Pitch, float Roll) {
    CMatrix44 ret = new CMatrix44(Engine2PINVOKE.MatrixRotationYawPitchRoll(Yaw, Pitch, Roll), true);
    return ret;
  }

  public static CMatrix44 MatrixPerspectiveFovLH(float fovy, float Aspect, float zn, float zf) {
    CMatrix44 ret = new CMatrix44(Engine2PINVOKE.MatrixPerspectiveFovLH(fovy, Aspect, zn, zf), true);
    return ret;
  }

  public static CMatrix44 MatrixPerspectiveLH(float w, float h, float zn, float zf) {
    CMatrix44 ret = new CMatrix44(Engine2PINVOKE.MatrixPerspectiveLH(w, h, zn, zf), true);
    return ret;
  }

  public static CMatrix44 MatrixReflect(SWIGTYPE_p_CPlane plane) {
    CMatrix44 ret = new CMatrix44(Engine2PINVOKE.MatrixReflect(SWIGTYPE_p_CPlane.getCPtr(plane)), true);
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static CMatrix44 MatrixRotationX(CMatrix44 mat, float yaw) {
    CMatrix44 ret = new CMatrix44(Engine2PINVOKE.MatrixRotationX(CMatrix44.getCPtr(mat), yaw), true);
    return ret;
  }

  public static CMatrix44 MatrixRotationY(CMatrix44 mat, float pitch) {
    CMatrix44 ret = new CMatrix44(Engine2PINVOKE.MatrixRotationY(CMatrix44.getCPtr(mat), pitch), true);
    return ret;
  }

  public static CMatrix44 MatrixRotationZ(CMatrix44 mat, float roll) {
    CMatrix44 ret = new CMatrix44(Engine2PINVOKE.MatrixRotationZ(CMatrix44.getCPtr(mat), roll), true);
    return ret;
  }

  public static int XMLAddInt(CXmlElement pXml, Engine2String szName, int nValue) {
    int ret = Engine2PINVOKE.XMLAddInt(CXmlElement.getCPtr(pXml), Engine2String.getCPtr(szName), nValue);
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int XMLGetInt(CXmlElement pXml, Engine2String szName, int nDefaultValue, SWIGTYPE_p_int bResult) {
    int ret = Engine2PINVOKE.XMLGetInt(CXmlElement.getCPtr(pXml), Engine2String.getCPtr(szName), nDefaultValue, SWIGTYPE_p_int.getCPtr(bResult));
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int XMLAddFloat(CXmlElement pXml, Engine2String szName, float fValue) {
    int ret = Engine2PINVOKE.XMLAddFloat(CXmlElement.getCPtr(pXml), Engine2String.getCPtr(szName), fValue);
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static float XMLGetFloat(CXmlElement pXml, Engine2String szName, float fDefaultValue, SWIGTYPE_p_int bResult) {
    float ret = Engine2PINVOKE.XMLGetFloat(CXmlElement.getCPtr(pXml), Engine2String.getCPtr(szName), fDefaultValue, SWIGTYPE_p_int.getCPtr(bResult));
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int XMLGetBOOL(CXmlElement pXml, Engine2String szName) {
    int ret = Engine2PINVOKE.XMLGetBOOL(CXmlElement.getCPtr(pXml), Engine2String.getCPtr(szName));
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int GetXmlFileDataFromStream(SWIGTYPE_p_IVFSFileManager pFileManager, CXmlElement pXmlContainer, string szFileName, int bAbsFilePath) {
    int ret = Engine2PINVOKE.GetXmlFileDataFromStream__SWIG_0(SWIGTYPE_p_IVFSFileManager.getCPtr(pFileManager), CXmlElement.getCPtr(pXmlContainer), szFileName, bAbsFilePath);
    return ret;
  }

  public static int GetXmlFileDataFromStream(SWIGTYPE_p_IVFSFileManager pFileManager, CXmlElement pXmlContainer, string szFileName) {
    int ret = Engine2PINVOKE.GetXmlFileDataFromStream__SWIG_1(SWIGTYPE_p_IVFSFileManager.getCPtr(pFileManager), CXmlElement.getCPtr(pXmlContainer), szFileName);
    return ret;
  }

  public static readonly int ENGINE2_REV = Engine2PINVOKE.ENGINE2_REV_get();
  public static readonly int LogErrorMask = Engine2PINVOKE.LogErrorMask_get();
  public static readonly int LogNoCaretMask = Engine2PINVOKE.LogNoCaretMask_get();
  public static readonly int MM_USE_DIFFUSE_COLOR = Engine2PINVOKE.MM_USE_DIFFUSE_COLOR_get();
  public static readonly int FORCE_MATERIALS_AS_IDENTICAL = Engine2PINVOKE.FORCE_MATERIALS_AS_IDENTICAL_get();
  public static readonly int ALLOW_SUBMESHES_VISIBILITY = Engine2PINVOKE.ALLOW_SUBMESHES_VISIBILITY_get();
  public static readonly int CLEAR_COLLISION_INFO = Engine2PINVOKE.CLEAR_COLLISION_INFO_get();
  public static readonly int INSERT_INSTANCE_ID = Engine2PINVOKE.INSERT_INSTANCE_ID_get();
  public static readonly int BONE_INSTANCE_ID = Engine2PINVOKE.BONE_INSTANCE_ID_get();
  public static readonly int GUI_DEPTH_DISABLED = Engine2PINVOKE.GUI_DEPTH_DISABLED_get();
  public static readonly int GUI_DEPTH_ENABLED = Engine2PINVOKE.GUI_DEPTH_ENABLED_get();
  public static readonly int GUI_DEPTH_MASK = Engine2PINVOKE.GUI_DEPTH_MASK_get();
  public static readonly int GUI_SAMPLING_LINWRAP = Engine2PINVOKE.GUI_SAMPLING_LINWRAP_get();
  public static readonly int GUI_SAMPLING_LINCLAMP = Engine2PINVOKE.GUI_SAMPLING_LINCLAMP_get();
  public static readonly int GUI_SAMPLING_POINTWRAP = Engine2PINVOKE.GUI_SAMPLING_POINTWRAP_get();
  public static readonly int GUI_SAMPLING_BILINWRAP = Engine2PINVOKE.GUI_SAMPLING_BILINWRAP_get();
  public static readonly int GUI_SAMPLING_BILINCLAMP = Engine2PINVOKE.GUI_SAMPLING_BILINCLAMP_get();
  public static readonly int GUI_SAMPLING_POINTCLAMP = Engine2PINVOKE.GUI_SAMPLING_POINTCLAMP_get();
  public static readonly int GUI_SAMPLING_MASK = Engine2PINVOKE.GUI_SAMPLING_MASK_get();
  public static readonly int GUI_BLEND_NONE = Engine2PINVOKE.GUI_BLEND_NONE_get();
  public static readonly int GUI_BLEND_ALPHA = Engine2PINVOKE.GUI_BLEND_ALPHA_get();
  public static readonly int GUI_BLEND_ONE = Engine2PINVOKE.GUI_BLEND_ONE_get();
  public static readonly int GUI_BLEND_MASK = Engine2PINVOKE.GUI_BLEND_MASK_get();
  public static readonly int MESHNOTCREATED = Engine2PINVOKE.MESHNOTCREATED_get();
  public static readonly int OBJ_SHADOW_CASTER = Engine2PINVOKE.OBJ_SHADOW_CASTER_get();
  public static readonly int OBJ_SHADOW_RECEIVER = Engine2PINVOKE.OBJ_SHADOW_RECEIVER_get();
  public static readonly int OBJ_LIGHT_RECEIVER = Engine2PINVOKE.OBJ_LIGHT_RECEIVER_get();
  public static readonly int OBJ_IN_REFLECTION = Engine2PINVOKE.OBJ_IN_REFLECTION_get();
  public static readonly int OBJ_IN_REFRACTION = Engine2PINVOKE.OBJ_IN_REFRACTION_get();
  public static readonly int OBJ_IS_STATIC = Engine2PINVOKE.OBJ_IS_STATIC_get();
  public static readonly int OBJ_IN_FRAME = Engine2PINVOKE.OBJ_IN_FRAME_get();
  public static readonly int OBJ_USE_IMPOSTER = Engine2PINVOKE.OBJ_USE_IMPOSTER_get();
  public static readonly int OBJ_CAST_LIGHTMAP = Engine2PINVOKE.OBJ_CAST_LIGHTMAP_get();
  public static readonly int OBJ_USAGE_ATTACHMENT = Engine2PINVOKE.OBJ_USAGE_ATTACHMENT_get();
  public static readonly int OBJ_USE_LIGHTMAP = Engine2PINVOKE.OBJ_USE_LIGHTMAP_get();
  public static readonly int OBJ_SILHOUETTE = Engine2PINVOKE.OBJ_SILHOUETTE_get();
  public static readonly int OBJ_OVERLAY = Engine2PINVOKE.OBJ_OVERLAY_get();
  public static readonly int OBJ_IGNORE_BRIGHTNESS = Engine2PINVOKE.OBJ_IGNORE_BRIGHTNESS_get();
  public static readonly int OBJ_NO_SKINNING = Engine2PINVOKE.OBJ_NO_SKINNING_get();
  public static readonly int OBJ_TOON = Engine2PINVOKE.OBJ_TOON_get();
  public static readonly int OBJ_USE_TRACED_LIGHTMAP = Engine2PINVOKE.OBJ_USE_TRACED_LIGHTMAP_get();
  public static readonly int OBJ_ROAD = Engine2PINVOKE.OBJ_ROAD_get();
  public static readonly int OBJ_DONT_UPDATE_CM = Engine2PINVOKE.OBJ_DONT_UPDATE_CM_get();
  public static readonly int OBJ_ALWAYS_RENDERED = Engine2PINVOKE.OBJ_ALWAYS_RENDERED_get();
  public static readonly int OBJ_USE_INSTANCING = Engine2PINVOKE.OBJ_USE_INSTANCING_get();
  public static readonly int LIGHT_POINT = Engine2PINVOKE.LIGHT_POINT_get();
  public static readonly int LIGHT_SPOT = Engine2PINVOKE.LIGHT_SPOT_get();
  public static readonly int LIGHT_DIRECTIONAL = Engine2PINVOKE.LIGHT_DIRECTIONAL_get();
  public static readonly int LIGHT_PROJECTION = Engine2PINVOKE.LIGHT_PROJECTION_get();
  public static readonly int LIGHT_SHADOW = Engine2PINVOKE.LIGHT_SHADOW_get();
  public static readonly int LIGHT_AMBIENT = Engine2PINVOKE.LIGHT_AMBIENT_get();
  public static readonly int TOTALLYVISIBLE = Engine2PINVOKE.TOTALLYVISIBLE_get();
  public static readonly int TOSCREENLEFT = Engine2PINVOKE.TOSCREENLEFT_get();
  public static readonly int TOSCREENRIGHT = Engine2PINVOKE.TOSCREENRIGHT_get();
  public static readonly int TOSCREENTOP = Engine2PINVOKE.TOSCREENTOP_get();
  public static readonly int TOSCREENBOTTOM = Engine2PINVOKE.TOSCREENBOTTOM_get();
  public static readonly int TOSCREENBACK = Engine2PINVOKE.TOSCREENBACK_get();
  public static readonly int TOSCREENFRONT = Engine2PINVOKE.TOSCREENFRONT_get();
}
