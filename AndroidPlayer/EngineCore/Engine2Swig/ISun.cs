//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.7
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ISun : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public ISun(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(ISun obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public virtual CVec3 GetDirection() {
    CVec3 ret = new CVec3(Engine2PINVOKE.ISun_GetDirection(swigCPtr), true);
    return ret;
  }

  public virtual CVec3 GetPosition() {
    CVec3 ret = new CVec3(Engine2PINVOKE.ISun_GetPosition(swigCPtr), true);
    return ret;
  }

  public virtual float GetIntensity() {
    float ret = Engine2PINVOKE.ISun_GetIntensity(swigCPtr);
    return ret;
  }

  public virtual CVec4 GetColor() {
    CVec4 ret = new CVec4(Engine2PINVOKE.ISun_GetColor(swigCPtr), true);
    return ret;
  }

  public virtual CVec4 GetColorAndIntensity() {
    CVec4 ret = new CVec4(Engine2PINVOKE.ISun_GetColorAndIntensity(swigCPtr), true);
    return ret;
  }

  public virtual CVec4 GetColorWithIntensity() {
    CVec4 ret = new CVec4(Engine2PINVOKE.ISun_GetColorWithIntensity(swigCPtr), true);
    return ret;
  }

  public virtual CMatrix44 GetLMMatrix() {
    CMatrix44 ret = new CMatrix44(Engine2PINVOKE.ISun_GetLMMatrix(swigCPtr), false);
    return ret;
  }

  public virtual void SetLMMatrix(CMatrix44 mxLM) {
    Engine2PINVOKE.ISun_SetLMMatrix(swigCPtr, CMatrix44.getCPtr(mxLM));
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetSunIntensity(float fIntensity) {
    Engine2PINVOKE.ISun_SetSunIntensity(swigCPtr, fIntensity);
  }

  public virtual void SetSunThetaPhi(float fTheta, float fPhi) {
    Engine2PINVOKE.ISun_SetSunThetaPhi(swigCPtr, fTheta, fPhi);
  }

  public virtual float GetSunTheta() {
    float ret = Engine2PINVOKE.ISun_GetSunTheta(swigCPtr);
    return ret;
  }

  public virtual float GetSunPhi() {
    float ret = Engine2PINVOKE.ISun_GetSunPhi(swigCPtr);
    return ret;
  }

  public virtual void SetLight(ILight pSun) {
    Engine2PINVOKE.ISun_SetLight(swigCPtr, ILight.getCPtr(pSun));
  }

  public virtual ILight GetLight() {
    global::System.IntPtr cPtr = Engine2PINVOKE.ISun_GetLight(swigCPtr);
    ILight ret = (cPtr == global::System.IntPtr.Zero) ? null : new ILight(cPtr, false);
    return ret;
  }

}
