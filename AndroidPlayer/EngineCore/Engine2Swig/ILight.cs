//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.7
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ILight : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public ILight(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(ILight obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public virtual void InitLight(int ltType, float x, float y, float z) {
    Engine2PINVOKE.ILight_InitLight(swigCPtr, ltType, x, y, z);
  }

  public virtual void SetPos(CVec3 vecPos) {
    Engine2PINVOKE.ILight_SetPos(swigCPtr, CVec3.getCPtr(vecPos));
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetDirection(CVec3 vecDirection) {
    Engine2PINVOKE.ILight_SetDirection(swigCPtr, CVec3.getCPtr(vecDirection));
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetType(int nType) {
    Engine2PINVOKE.ILight_SetType(swigCPtr, nType);
  }

  public virtual void SetAmbient(CVec3 vecColor) {
    Engine2PINVOKE.ILight_SetAmbient__SWIG_0(swigCPtr, CVec3.getCPtr(vecColor));
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetAmbient(float r, float g, float b) {
    Engine2PINVOKE.ILight_SetAmbient__SWIG_1(swigCPtr, r, g, b);
  }

  public virtual void SetSpecular(CVec3 vecColor) {
    Engine2PINVOKE.ILight_SetSpecular__SWIG_0(swigCPtr, CVec3.getCPtr(vecColor));
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetSpecular(float r, float g, float b) {
    Engine2PINVOKE.ILight_SetSpecular__SWIG_1(swigCPtr, r, g, b);
  }

  public virtual void SetDiffuse(CVec3 vecColor) {
    Engine2PINVOKE.ILight_SetDiffuse__SWIG_0(swigCPtr, CVec3.getCPtr(vecColor));
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetDiffuse(float r, float g, float b) {
    Engine2PINVOKE.ILight_SetDiffuse__SWIG_1(swigCPtr, r, g, b);
  }

  public virtual void SetRange(float fRange) {
    Engine2PINVOKE.ILight_SetRange(swigCPtr, fRange);
  }

  public virtual void SetTheta(float f) {
    Engine2PINVOKE.ILight_SetTheta(swigCPtr, f);
  }

  public virtual void SetPhi(float f) {
    Engine2PINVOKE.ILight_SetPhi(swigCPtr, f);
  }

  public virtual void SetFalloff(float f) {
    Engine2PINVOKE.ILight_SetFalloff(swigCPtr, f);
  }

  public virtual float GetRange() {
    float ret = Engine2PINVOKE.ILight_GetRange__SWIG_0(swigCPtr);
    return ret;
  }

  public virtual float GetTheta() {
    float ret = Engine2PINVOKE.ILight_GetTheta__SWIG_0(swigCPtr);
    return ret;
  }

  public virtual float GetPhi() {
    float ret = Engine2PINVOKE.ILight_GetPhi__SWIG_0(swigCPtr);
    return ret;
  }

  public virtual float GetFalloff() {
    float ret = Engine2PINVOKE.ILight_GetFalloff__SWIG_0(swigCPtr);
    return ret;
  }

  public virtual void SetAttenuationAll(float fAttenuation0, float fAttenuation1, float fAttenuation2) {
    Engine2PINVOKE.ILight_SetAttenuationAll(swigCPtr, fAttenuation0, fAttenuation1, fAttenuation2);
  }

  public virtual CVec3 GetPos() {
    CVec3 ret = new CVec3(Engine2PINVOKE.ILight_GetPos(swigCPtr), false);
    return ret;
  }

  public virtual CVec3 GetDirection() {
    CVec3 ret = new CVec3(Engine2PINVOKE.ILight_GetDirection(swigCPtr), false);
    return ret;
  }

  public virtual int GetType() {
    int ret = Engine2PINVOKE.ILight_GetType(swigCPtr);
    return ret;
  }

  public virtual void GetAmbient(CVec3 vecColor) {
    Engine2PINVOKE.ILight_GetAmbient__SWIG_0(swigCPtr, CVec3.getCPtr(vecColor));
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void GetAmbient(SWIGTYPE_p_float r, SWIGTYPE_p_float g, SWIGTYPE_p_float b) {
    Engine2PINVOKE.ILight_GetAmbient__SWIG_1(swigCPtr, SWIGTYPE_p_float.getCPtr(r), SWIGTYPE_p_float.getCPtr(g), SWIGTYPE_p_float.getCPtr(b));
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void GetSpecular(CVec3 vecColor) {
    Engine2PINVOKE.ILight_GetSpecular__SWIG_0(swigCPtr, CVec3.getCPtr(vecColor));
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void GetSpecular(SWIGTYPE_p_float r, SWIGTYPE_p_float g, SWIGTYPE_p_float b) {
    Engine2PINVOKE.ILight_GetSpecular__SWIG_1(swigCPtr, SWIGTYPE_p_float.getCPtr(r), SWIGTYPE_p_float.getCPtr(g), SWIGTYPE_p_float.getCPtr(b));
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void GetDiffuse(CVec4 vecColor) {
    Engine2PINVOKE.ILight_GetDiffuse__SWIG_0(swigCPtr, CVec4.getCPtr(vecColor));
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void GetDiffuse(SWIGTYPE_p_float r, SWIGTYPE_p_float g, SWIGTYPE_p_float b) {
    Engine2PINVOKE.ILight_GetDiffuse__SWIG_1(swigCPtr, SWIGTYPE_p_float.getCPtr(r), SWIGTYPE_p_float.getCPtr(g), SWIGTYPE_p_float.getCPtr(b));
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void GetRange(SWIGTYPE_p_float fRange) {
    Engine2PINVOKE.ILight_GetRange__SWIG_1(swigCPtr, SWIGTYPE_p_float.getCPtr(fRange));
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void GetTheta(SWIGTYPE_p_float f) {
    Engine2PINVOKE.ILight_GetTheta__SWIG_1(swigCPtr, SWIGTYPE_p_float.getCPtr(f));
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void GetPhi(SWIGTYPE_p_float f) {
    Engine2PINVOKE.ILight_GetPhi__SWIG_1(swigCPtr, SWIGTYPE_p_float.getCPtr(f));
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void GetFalloff(SWIGTYPE_p_float f) {
    Engine2PINVOKE.ILight_GetFalloff__SWIG_1(swigCPtr, SWIGTYPE_p_float.getCPtr(f));
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void GetAttenuationAll(SWIGTYPE_p_float fAttenuation0, SWIGTYPE_p_float fAttenuation1, SWIGTYPE_p_float fAttenuation2) {
    Engine2PINVOKE.ILight_GetAttenuationAll(swigCPtr, SWIGTYPE_p_float.getCPtr(fAttenuation0), SWIGTYPE_p_float.getCPtr(fAttenuation1), SWIGTYPE_p_float.getCPtr(fAttenuation2));
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual int GetTexture() {
    int ret = Engine2PINVOKE.ILight_GetTexture(swigCPtr);
    return ret;
  }

  public virtual void SetTexture(int arg0) {
    Engine2PINVOKE.ILight_SetTexture(swigCPtr, arg0);
  }

  public virtual void Update() {
    Engine2PINVOKE.ILight_Update(swigCPtr);
  }

  public virtual float GetShadowsFadeDistance() {
    float ret = Engine2PINVOKE.ILight_GetShadowsFadeDistance(swigCPtr);
    return ret;
  }

  public virtual void SetShadowsFadeDistance(float f) {
    Engine2PINVOKE.ILight_SetShadowsFadeDistance(swigCPtr, f);
  }

  public virtual void SetNumShadowmapCascades(int nCascades) {
    Engine2PINVOKE.ILight_SetNumShadowmapCascades(swigCPtr, nCascades);
  }

  public virtual void SetShadowmapSize(int nSize) {
    Engine2PINVOKE.ILight_SetShadowmapSize(swigCPtr, nSize);
  }

  public virtual void CastShadowsState(bool bEnableShadow) {
    Engine2PINVOKE.ILight_CastShadowsState(swigCPtr, bEnableShadow);
  }

  public virtual bool GetMakeShadow() {
    bool ret = Engine2PINVOKE.ILight_GetMakeShadow(swigCPtr);
    return ret;
  }

  public virtual IShadowFrustrum AddShadowFrustrum(bool bVariance) {
    global::System.IntPtr cPtr = Engine2PINVOKE.ILight_AddShadowFrustrum__SWIG_0(swigCPtr, bVariance);
    IShadowFrustrum ret = (cPtr == global::System.IntPtr.Zero) ? null : new IShadowFrustrum(cPtr, false);
    return ret;
  }

  public virtual IShadowFrustrum AddShadowFrustrum() {
    global::System.IntPtr cPtr = Engine2PINVOKE.ILight_AddShadowFrustrum__SWIG_1(swigCPtr);
    IShadowFrustrum ret = (cPtr == global::System.IntPtr.Zero) ? null : new IShadowFrustrum(cPtr, false);
    return ret;
  }

  public virtual uint GetNumShadowFrustrums() {
    uint ret = Engine2PINVOKE.ILight_GetNumShadowFrustrums(swigCPtr);
    return ret;
  }

  public virtual IShadowFrustrum GetShadowFrustrum(int nFrustrum) {
    global::System.IntPtr cPtr = Engine2PINVOKE.ILight_GetShadowFrustrum(swigCPtr, nFrustrum);
    IShadowFrustrum ret = (cPtr == global::System.IntPtr.Zero) ? null : new IShadowFrustrum(cPtr, false);
    return ret;
  }

  public virtual void RemoveShadowFrustrum(int nFrustrum) {
    Engine2PINVOKE.ILight_RemoveShadowFrustrum(swigCPtr, nFrustrum);
  }

  public virtual void SetCurrentFrustrum(int nFrustrum) {
    Engine2PINVOKE.ILight_SetCurrentFrustrum(swigCPtr, nFrustrum);
  }

  public virtual IShadowFrustrum GetCurrentFrustrum() {
    global::System.IntPtr cPtr = Engine2PINVOKE.ILight_GetCurrentFrustrum(swigCPtr);
    IShadowFrustrum ret = (cPtr == global::System.IntPtr.Zero) ? null : new IShadowFrustrum(cPtr, false);
    return ret;
  }

  public virtual void SetVisibility(bool arg0) {
    Engine2PINVOKE.ILight_SetVisibility(swigCPtr, arg0);
  }

  public virtual bool GetVisibility() {
    bool ret = Engine2PINVOKE.ILight_GetVisibility(swigCPtr);
    return ret;
  }

  public virtual float GetRelativeIntesity(CVec3 rObjPos) {
    float ret = Engine2PINVOKE.ILight_GetRelativeIntesity(swigCPtr, CVec3.getCPtr(rObjPos));
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void AddFlare(string szTexName, float fSize, float fPos, uint nColor) {
    Engine2PINVOKE.ILight_AddFlare__SWIG_0(swigCPtr, szTexName, fSize, fPos, nColor);
  }

  public virtual void AddFlare(string szTexName, float fSize, float fPos) {
    Engine2PINVOKE.ILight_AddFlare__SWIG_1(swigCPtr, szTexName, fSize, fPos);
  }

  public virtual void ResetFlares() {
    Engine2PINVOKE.ILight_ResetFlares(swigCPtr);
  }

}
