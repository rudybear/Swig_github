//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.7
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class MeshAnimBakeInfo : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal MeshAnimBakeInfo(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(MeshAnimBakeInfo obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~MeshAnimBakeInfo() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          Engine2PINVOKE.delete_MeshAnimBakeInfo(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public class MeshAnimBakeFrameInfo : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal MeshAnimBakeFrameInfo(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(MeshAnimBakeFrameInfo obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~MeshAnimBakeFrameInfo() {
      Dispose();
    }
  
    public virtual void Dispose() {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            Engine2PINVOKE.delete_MeshAnimBakeInfo_MeshAnimBakeFrameInfo(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        global::System.GC.SuppressFinalize(this);
      }
    }
  
    public MeshAnimBakeFrameInfo() : this(Engine2PINVOKE.new_MeshAnimBakeInfo_MeshAnimBakeFrameInfo(), true) {
    }
  
    public SWIGTYPE_p_Engine2__String m_strAnimName {
      set {
        Engine2PINVOKE.MeshAnimBakeInfo_MeshAnimBakeFrameInfo_m_strAnimName_set(swigCPtr, SWIGTYPE_p_Engine2__String.getCPtr(value));
        if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        SWIGTYPE_p_Engine2__String ret = new SWIGTYPE_p_Engine2__String(Engine2PINVOKE.MeshAnimBakeInfo_MeshAnimBakeFrameInfo_m_strAnimName_get(swigCPtr), true);
        if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public int m_nAnimId {
      set {
        Engine2PINVOKE.MeshAnimBakeInfo_MeshAnimBakeFrameInfo_m_nAnimId_set(swigCPtr, value);
      } 
      get {
        int ret = Engine2PINVOKE.MeshAnimBakeInfo_MeshAnimBakeFrameInfo_m_nAnimId_get(swigCPtr);
        return ret;
      } 
    }
  
    public SWIGTYPE_p_Engine2__VectorT_AnimationParam_t m_vFramesInfo {
      set {
        Engine2PINVOKE.MeshAnimBakeInfo_MeshAnimBakeFrameInfo_m_vFramesInfo_set(swigCPtr, SWIGTYPE_p_Engine2__VectorT_AnimationParam_t.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = Engine2PINVOKE.MeshAnimBakeInfo_MeshAnimBakeFrameInfo_m_vFramesInfo_get(swigCPtr);
        SWIGTYPE_p_Engine2__VectorT_AnimationParam_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Engine2__VectorT_AnimationParam_t(cPtr, false);
        return ret;
      } 
    }
  
  }

  public MeshAnimBakeInfo() : this(Engine2PINVOKE.new_MeshAnimBakeInfo(), true) {
  }

  public SWIGTYPE_p_Engine2__String m_strSourceMeshName {
    set {
      Engine2PINVOKE.MeshAnimBakeInfo_m_strSourceMeshName_set(swigCPtr, SWIGTYPE_p_Engine2__String.getCPtr(value));
      if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_Engine2__String ret = new SWIGTYPE_p_Engine2__String(Engine2PINVOKE.MeshAnimBakeInfo_m_strSourceMeshName_get(swigCPtr), true);
      if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public IMeshInfo m_pSourceMeshInfo {
    set {
      Engine2PINVOKE.MeshAnimBakeInfo_m_pSourceMeshInfo_set(swigCPtr, IMeshInfo.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = Engine2PINVOKE.MeshAnimBakeInfo_m_pSourceMeshInfo_get(swigCPtr);
      IMeshInfo ret = (cPtr == global::System.IntPtr.Zero) ? null : new IMeshInfo(cPtr, false);
      return ret;
    } 
  }

  public int m_nFrameNumBase {
    set {
      Engine2PINVOKE.MeshAnimBakeInfo_m_nFrameNumBase_set(swigCPtr, value);
    } 
    get {
      int ret = Engine2PINVOKE.MeshAnimBakeInfo_m_nFrameNumBase_get(swigCPtr);
      return ret;
    } 
  }

  public int m_nMinLODLevel {
    set {
      Engine2PINVOKE.MeshAnimBakeInfo_m_nMinLODLevel_set(swigCPtr, value);
    } 
    get {
      int ret = Engine2PINVOKE.MeshAnimBakeInfo_m_nMinLODLevel_get(swigCPtr);
      return ret;
    } 
  }

  public bool m_bForceToBakeInSingleSubmesh {
    set {
      Engine2PINVOKE.MeshAnimBakeInfo_m_bForceToBakeInSingleSubmesh_set(swigCPtr, value);
    } 
    get {
      bool ret = Engine2PINVOKE.MeshAnimBakeInfo_m_bForceToBakeInSingleSubmesh_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_Engine2__String m_strFramePrefix {
    set {
      Engine2PINVOKE.MeshAnimBakeInfo_m_strFramePrefix_set(swigCPtr, SWIGTYPE_p_Engine2__String.getCPtr(value));
      if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_Engine2__String ret = new SWIGTYPE_p_Engine2__String(Engine2PINVOKE.MeshAnimBakeInfo_m_strFramePrefix_get(swigCPtr), true);
      if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_Engine2__VectorT_MeshAnimBakeInfo__MeshAnimBakeFrameInfo_t m_vAnimInfo {
    set {
      Engine2PINVOKE.MeshAnimBakeInfo_m_vAnimInfo_set(swigCPtr, SWIGTYPE_p_Engine2__VectorT_MeshAnimBakeInfo__MeshAnimBakeFrameInfo_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = Engine2PINVOKE.MeshAnimBakeInfo_m_vAnimInfo_get(swigCPtr);
      SWIGTYPE_p_Engine2__VectorT_MeshAnimBakeInfo__MeshAnimBakeFrameInfo_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Engine2__VectorT_MeshAnimBakeInfo__MeshAnimBakeFrameInfo_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_Engine2__String m_strResultMeshName {
    set {
      Engine2PINVOKE.MeshAnimBakeInfo_m_strResultMeshName_set(swigCPtr, SWIGTYPE_p_Engine2__String.getCPtr(value));
      if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_Engine2__String ret = new SWIGTYPE_p_Engine2__String(Engine2PINVOKE.MeshAnimBakeInfo_m_strResultMeshName_get(swigCPtr), true);
      if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public IMeshInfo m_pResultMesh {
    set {
      Engine2PINVOKE.MeshAnimBakeInfo_m_pResultMesh_set(swigCPtr, IMeshInfo.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = Engine2PINVOKE.MeshAnimBakeInfo_m_pResultMesh_get(swigCPtr);
      IMeshInfo ret = (cPtr == global::System.IntPtr.Zero) ? null : new IMeshInfo(cPtr, false);
      return ret;
    } 
  }

  public enum ErrorCode {
    eOk,
    eSourceFileNotFound,
    eDstFileNotCreated,
    eWrongMinLodlevel,
    eProvideNameForSourceAnimation
  }

}
