//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.7
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class IWindow : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal IWindow(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IWindow obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~IWindow() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          Engine2PINVOKE.delete_IWindow(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public virtual bool Create(int x, int y, int width, int height, bool bFullScreen) {
    bool ret = Engine2PINVOKE.IWindow_Create(swigCPtr, x, y, width, height, bFullScreen);
    return ret;
  }

  public virtual void SetName(Engine2String name) {
    Engine2PINVOKE.IWindow_SetName(swigCPtr, Engine2String.getCPtr(name));
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual Engine2String GetName() {
    Engine2String ret = new Engine2String(Engine2PINVOKE.IWindow_GetName(swigCPtr), false);
    return ret;
  }

  public virtual bool IsActive() {
    bool ret = Engine2PINVOKE.IWindow_IsActive(swigCPtr);
    return ret;
  }

  public virtual void SetFocus() {
    Engine2PINVOKE.IWindow_SetFocus(swigCPtr);
  }

  public virtual void Show(bool arg0) {
    Engine2PINVOKE.IWindow_Show(swigCPtr, arg0);
  }

  public virtual bool IsInFocus() {
    bool ret = Engine2PINVOKE.IWindow_IsInFocus(swigCPtr);
    return ret;
  }

  public virtual void SetSize(int width, int height, bool bFullscreen) {
    Engine2PINVOKE.IWindow_SetSize(swigCPtr, width, height, bFullscreen);
  }

  public virtual bool IsFullscreen() {
    bool ret = Engine2PINVOKE.IWindow_IsFullscreen(swigCPtr);
    return ret;
  }

  public virtual void SetPosition(int x, int y) {
    Engine2PINVOKE.IWindow_SetPosition(swigCPtr, x, y);
  }

  public virtual bool SetStyle(uint style) {
    bool ret = Engine2PINVOKE.IWindow_SetStyle(swigCPtr, style);
    return ret;
  }

  public virtual uint GetStyle() {
    uint ret = Engine2PINVOKE.IWindow_GetStyle(swigCPtr);
    return ret;
  }

  public virtual SWIGTYPE_p_RECT GetWindowRect() {
    SWIGTYPE_p_RECT ret = new SWIGTYPE_p_RECT(Engine2PINVOKE.IWindow_GetWindowRect(swigCPtr), true);
    return ret;
  }

  public virtual SWIGTYPE_p_RECT GetClientRect() {
    SWIGTYPE_p_RECT ret = new SWIGTYPE_p_RECT(Engine2PINVOKE.IWindow_GetClientRect(swigCPtr), true);
    return ret;
  }

  public virtual void RegisterListener(IWindowListener arg0) {
    Engine2PINVOKE.IWindow_RegisterListener(swigCPtr, IWindowListener.getCPtr(arg0));
  }

  public virtual void UnRegisterListener(IWindowListener arg0) {
    Engine2PINVOKE.IWindow_UnRegisterListener(swigCPtr, IWindowListener.getCPtr(arg0));
  }

  public virtual void Invalidate(SWIGTYPE_p_RECT arg0) {
    Engine2PINVOKE.IWindow_Invalidate(swigCPtr, SWIGTYPE_p_RECT.getCPtr(arg0));
  }

  public virtual void Close() {
    Engine2PINVOKE.IWindow_Close(swigCPtr);
  }

  public virtual SWIGTYPE_p_WIN_HWND GetWindowHandle() {
    SWIGTYPE_p_WIN_HWND ret = new SWIGTYPE_p_WIN_HWND(Engine2PINVOKE.IWindow_GetWindowHandle(swigCPtr), true);
    return ret;
  }

  public virtual void RegisterHWND(SWIGTYPE_p_WIN_HWND hWnd) {
    Engine2PINVOKE.IWindow_RegisterHWND(swigCPtr, SWIGTYPE_p_WIN_HWND.getCPtr(hWnd));
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void NotifyMessage(SWIGTYPE_p_UINT uMsg, SWIGTYPE_p_WPARAM wParam, SWIGTYPE_p_LPARAM lParam) {
    Engine2PINVOKE.IWindow_NotifyMessage(swigCPtr, SWIGTYPE_p_UINT.getCPtr(uMsg), SWIGTYPE_p_WPARAM.getCPtr(wParam), SWIGTYPE_p_LPARAM.getCPtr(lParam));
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
  }

  public enum Style {
    Resizeable = 0x00000001,
    Topmost = 0x00000002,
    Border = 0x00000004,
    ClientBorder = 0x00000008,
    TitleBar = 0x00000010,
    Popup = 0x00000020,
    MinMaxBox = 0x00000040,
    DefaultStyle = Resizeable|ClientBorder|TitleBar
  }

}
