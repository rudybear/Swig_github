//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.7
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class MeshFactory : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal MeshFactory(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(MeshFactory obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public virtual IBaseMeshInfo CreateBaseMesh(string name, SWIGTYPE_p_Engine2__VectorT_CParam_t arg1) {
    global::System.IntPtr cPtr = Engine2PINVOKE.MeshFactory_CreateBaseMesh(swigCPtr, name, SWIGTYPE_p_Engine2__VectorT_CParam_t.getCPtr(arg1));
    IBaseMeshInfo ret = (cPtr == global::System.IntPtr.Zero) ? null : new IBaseMeshInfo(cPtr, false);
    return ret;
  }

  public virtual SWIGTYPE_p_IAnimatedMeshInfo CreateAnimatedMesh(string name, SWIGTYPE_p_Engine2__VectorT_CParam_t arg1) {
    global::System.IntPtr cPtr = Engine2PINVOKE.MeshFactory_CreateAnimatedMesh(swigCPtr, name, SWIGTYPE_p_Engine2__VectorT_CParam_t.getCPtr(arg1));
    SWIGTYPE_p_IAnimatedMeshInfo ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_IAnimatedMeshInfo(cPtr, false);
    return ret;
  }

  public virtual SWIGTYPE_p_IParticleEmitter CreateParticleEmitter(SWIGTYPE_p_eParticleType arg0) {
    global::System.IntPtr cPtr = Engine2PINVOKE.MeshFactory_CreateParticleEmitter(swigCPtr, SWIGTYPE_p_eParticleType.getCPtr(arg0));
    SWIGTYPE_p_IParticleEmitter ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_IParticleEmitter(cPtr, false);
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void MeshMerger(MeshMergerInfo info) {
    Engine2PINVOKE.MeshFactory_MeshMerger(swigCPtr, MeshMergerInfo.getCPtr(info));
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void MeshMerger2(MeshMergerInfo2 info) {
    Engine2PINVOKE.MeshFactory_MeshMerger2(swigCPtr, MeshMergerInfo2.getCPtr(info));
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual MeshAnimBakeInfo.ErrorCode BakeAnimations(MeshAnimBakeInfo info) {
    MeshAnimBakeInfo.ErrorCode ret = (MeshAnimBakeInfo.ErrorCode)Engine2PINVOKE.MeshFactory_BakeAnimations(swigCPtr, MeshAnimBakeInfo.getCPtr(info));
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void CreateForest() {
    Engine2PINVOKE.MeshFactory_CreateForest(swigCPtr);
  }

}
