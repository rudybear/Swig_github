//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.7
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class IMeshInfo : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal IMeshInfo(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IMeshInfo obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public virtual IDecalMeshAccepter GetDecalAccepter() {
    global::System.IntPtr cPtr = Engine2PINVOKE.IMeshInfo_GetDecalAccepter(swigCPtr);
    IDecalMeshAccepter ret = (cPtr == global::System.IntPtr.Zero) ? null : new IDecalMeshAccepter(cPtr, false);
    return ret;
  }

  public virtual SWIGTYPE_p_eMeshType GetMeshType() {
    SWIGTYPE_p_eMeshType ret = new SWIGTYPE_p_eMeshType(Engine2PINVOKE.IMeshInfo_GetMeshType(swigCPtr), true);
    return ret;
  }

  public virtual void NewFrameStarted() {
    Engine2PINVOKE.IMeshInfo_NewFrameStarted(swigCPtr);
  }

  public virtual SWIGTYPE_p_HRESULT Cull(SWIGTYPE_p_eRenderType arg0, bool bFullyVisible) {
    SWIGTYPE_p_HRESULT ret = new SWIGTYPE_p_HRESULT(Engine2PINVOKE.IMeshInfo_Cull(swigCPtr, SWIGTYPE_p_eRenderType.getCPtr(arg0), bFullyVisible), true);
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual SWIGTYPE_p_HRESULT CullSimple(SWIGTYPE_p_eRenderType arg0, bool bFullyVisible) {
    SWIGTYPE_p_HRESULT ret = new SWIGTYPE_p_HRESULT(Engine2PINVOKE.IMeshInfo_CullSimple(swigCPtr, SWIGTYPE_p_eRenderType.getCPtr(arg0), bFullyVisible), true);
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual SWIGTYPE_p_HRESULT Restore() {
    SWIGTYPE_p_HRESULT ret = new SWIGTYPE_p_HRESULT(Engine2PINVOKE.IMeshInfo_Restore(swigCPtr), true);
    return ret;
  }

  public virtual SWIGTYPE_p_HRESULT ImmediateDraw(SWIGTYPE_p_eRenderType arg0) {
    SWIGTYPE_p_HRESULT ret = new SWIGTYPE_p_HRESULT(Engine2PINVOKE.IMeshInfo_ImmediateDraw(swigCPtr, SWIGTYPE_p_eRenderType.getCPtr(arg0)), true);
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual SWIGTYPE_p_HRESULT SetParam(SWIGTYPE_p_CParam pParamInfo) {
    SWIGTYPE_p_HRESULT ret = new SWIGTYPE_p_HRESULT(Engine2PINVOKE.IMeshInfo_SetParam(swigCPtr, SWIGTYPE_p_CParam.getCPtr(pParamInfo)), true);
    return ret;
  }

  public virtual SWIGTYPE_p_HRESULT DeleteParam(SWIGTYPE_p_CParam pParamInfo) {
    SWIGTYPE_p_HRESULT ret = new SWIGTYPE_p_HRESULT(Engine2PINVOKE.IMeshInfo_DeleteParam(swigCPtr, SWIGTYPE_p_CParam.getCPtr(pParamInfo)), true);
    return ret;
  }

  public virtual bool Update(bool bFromParent) {
    bool ret = Engine2PINVOKE.IMeshInfo_Update(swigCPtr, bFromParent);
    return ret;
  }

  public virtual SWIGTYPE_p_HRESULT InitMeshInfo(CXmlElement paraminfo) {
    SWIGTYPE_p_HRESULT ret = new SWIGTYPE_p_HRESULT(Engine2PINVOKE.IMeshInfo_InitMeshInfo(swigCPtr, CXmlElement.getCPtr(paraminfo)), true);
    return ret;
  }

  public int IsVisible() {
    int ret = Engine2PINVOKE.IMeshInfo_IsVisible(swigCPtr);
    return ret;
  }

  public virtual void SetVisibleState(bool state) {
    Engine2PINVOKE.IMeshInfo_SetVisibleState(swigCPtr, state);
  }

  public SWIGTYPE_p_ICullObject GetCullObject() {
    global::System.IntPtr cPtr = Engine2PINVOKE.IMeshInfo_GetCullObject(swigCPtr);
    SWIGTYPE_p_ICullObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ICullObject(cPtr, false);
    return ret;
  }

  public virtual IMeshInfo Copy() {
    global::System.IntPtr cPtr = Engine2PINVOKE.IMeshInfo_Copy(swigCPtr);
    IMeshInfo ret = (cPtr == global::System.IntPtr.Zero) ? null : new IMeshInfo(cPtr, false);
    return ret;
  }

  public virtual uint GetSortInt() {
    uint ret = Engine2PINVOKE.IMeshInfo_GetSortInt(swigCPtr);
    return ret;
  }

  public uint GetRenderFlags() {
    uint ret = Engine2PINVOKE.IMeshInfo_GetRenderFlags(swigCPtr);
    return ret;
  }

  public void SetRenderFlags(uint flags) {
    Engine2PINVOKE.IMeshInfo_SetRenderFlags(swigCPtr, flags);
  }

  public void ForceSetRenderFlags(uint flags) {
    Engine2PINVOKE.IMeshInfo_ForceSetRenderFlags(swigCPtr, flags);
  }

  public void RemoveRenderFlags(uint flags) {
    Engine2PINVOKE.IMeshInfo_RemoveRenderFlags(swigCPtr, flags);
  }

  public void DrawCustom(SWIGTYPE_p_eRenderType type) {
    Engine2PINVOKE.IMeshInfo_DrawCustom(swigCPtr, SWIGTYPE_p_eRenderType.getCPtr(type));
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual bool DrawFogPass(SWIGTYPE_p_eRenderType arg0) {
    bool ret = Engine2PINVOKE.IMeshInfo_DrawFogPass(swigCPtr, SWIGTYPE_p_eRenderType.getCPtr(arg0));
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void SetMatrix(CMatrix44 mat, int bFullUpdate) {
    Engine2PINVOKE.IMeshInfo_SetMatrix__SWIG_0(swigCPtr, CMatrix44.getCPtr(mat), bFullUpdate);
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetMatrix(CMatrix44 mat) {
    Engine2PINVOKE.IMeshInfo_SetMatrix__SWIG_1(swigCPtr, CMatrix44.getCPtr(mat));
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetRotation(SWIGTYPE_p_CQuat rot) {
    Engine2PINVOKE.IMeshInfo_SetRotation__SWIG_0(swigCPtr, SWIGTYPE_p_CQuat.getCPtr(rot));
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetRotation(CVec3 rot) {
    Engine2PINVOKE.IMeshInfo_SetRotation__SWIG_1(swigCPtr, CVec3.getCPtr(rot));
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetRotation(float yaw, float pitch, float roll) {
    Engine2PINVOKE.IMeshInfo_SetRotation__SWIG_2(swigCPtr, yaw, pitch, roll);
  }

  public CMatrix44 GetMatrix() {
    CMatrix44 ret = new CMatrix44(Engine2PINVOKE.IMeshInfo_GetMatrix(swigCPtr), false);
    return ret;
  }

  public virtual void SetTranslation(CVec3 vec) {
    Engine2PINVOKE.IMeshInfo_SetTranslation(swigCPtr, CVec3.getCPtr(vec));
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetMatrixTranslation(CVec3 vec) {
    Engine2PINVOKE.IMeshInfo_SetMatrixTranslation(swigCPtr, CVec3.getCPtr(vec));
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetBBoxTranslation(CVec3 vec) {
    Engine2PINVOKE.IMeshInfo_SetBBoxTranslation(swigCPtr, CVec3.getCPtr(vec));
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetBBox(SWIGTYPE_p_CAABBox box) {
    Engine2PINVOKE.IMeshInfo_SetBBox(swigCPtr, SWIGTYPE_p_CAABBox.getCPtr(box));
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_CAABBox GetBBox() {
    SWIGTYPE_p_CAABBox ret = new SWIGTYPE_p_CAABBox(Engine2PINVOKE.IMeshInfo_GetBBox(swigCPtr), false);
    return ret;
  }

  public float GetRadius() {
    float ret = Engine2PINVOKE.IMeshInfo_GetRadius(swigCPtr);
    return ret;
  }

  public void SetRadius(float rad) {
    Engine2PINVOKE.IMeshInfo_SetRadius(swigCPtr, rad);
  }

  public virtual bool TestRayIntersection(SWIGTYPE_p_CSegment nRay, CollisionInfo arg1) {
    bool ret = Engine2PINVOKE.IMeshInfo_TestRayIntersection(swigCPtr, SWIGTYPE_p_CSegment.getCPtr(nRay), CollisionInfo.getCPtr(arg1));
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void RemoveFromList(IMeshInfo arg0) {
    Engine2PINVOKE.IMeshInfo_RemoveFromList(swigCPtr, IMeshInfo.getCPtr(arg0));
  }

  public void SetDebugMode(eDebugMode mode) {
    Engine2PINVOKE.IMeshInfo_SetDebugMode(swigCPtr, (int)mode);
  }

  public eDebugMode GetDebugMode() {
    eDebugMode ret = (eDebugMode)Engine2PINVOKE.IMeshInfo_GetDebugMode(swigCPtr);
    return ret;
  }

  public virtual bool IsImmediate() {
    bool ret = Engine2PINVOKE.IMeshInfo_IsImmediate(swigCPtr);
    return ret;
  }

  public virtual void SetBrightness(CVec4 vBrightness) {
    Engine2PINVOKE.IMeshInfo_SetBrightness(swigCPtr, CVec4.getCPtr(vBrightness));
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual CVec4 GetBrightness() {
    CVec4 ret = new CVec4(Engine2PINVOKE.IMeshInfo_GetBrightness(swigCPtr), true);
    return ret;
  }

  public virtual void OnPositionChanged(CVec3 newPos) {
    Engine2PINVOKE.IMeshInfo_OnPositionChanged(swigCPtr, CVec3.getCPtr(newPos));
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void OnBBoxChanged(SWIGTYPE_p_CAABBox newBox) {
    Engine2PINVOKE.IMeshInfo_OnBBoxChanged(swigCPtr, SWIGTYPE_p_CAABBox.getCPtr(newBox));
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetLightInfo(SWIGTYPE_p_CLightArray array, int group) {
    Engine2PINVOKE.IMeshInfo_SetLightInfo(swigCPtr, SWIGTYPE_p_CLightArray.getCPtr(array), group);
  }

  public bool IsCopy() {
    bool ret = Engine2PINVOKE.IMeshInfo_IsCopy(swigCPtr);
    return ret;
  }

  public IMeshInfo GetNext() {
    global::System.IntPtr cPtr = Engine2PINVOKE.IMeshInfo_GetNext(swigCPtr);
    IMeshInfo ret = (cPtr == global::System.IntPtr.Zero) ? null : new IMeshInfo(cPtr, false);
    return ret;
  }

  public IMeshInfo GetPrev() {
    global::System.IntPtr cPtr = Engine2PINVOKE.IMeshInfo_GetPrev(swigCPtr);
    IMeshInfo ret = (cPtr == global::System.IntPtr.Zero) ? null : new IMeshInfo(cPtr, false);
    return ret;
  }

  public void SetNext(IMeshInfo p) {
    Engine2PINVOKE.IMeshInfo_SetNext(swigCPtr, IMeshInfo.getCPtr(p));
  }

  public void SetPrev(IMeshInfo p) {
    Engine2PINVOKE.IMeshInfo_SetPrev(swigCPtr, IMeshInfo.getCPtr(p));
  }

  public Engine2String m_strFileName {
    set {
      Engine2PINVOKE.IMeshInfo_m_strFileName_set(swigCPtr, Engine2String.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = Engine2PINVOKE.IMeshInfo_m_strFileName_get(swigCPtr);
      Engine2String ret = (cPtr == global::System.IntPtr.Zero) ? null : new Engine2String(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_CSmartPtrT_ICullObject_t m_pMesh {
    set {
      Engine2PINVOKE.IMeshInfo_m_pMesh_set(swigCPtr, SWIGTYPE_p_CSmartPtrT_ICullObject_t.getCPtr(value));
      if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_CSmartPtrT_ICullObject_t ret = new SWIGTYPE_p_CSmartPtrT_ICullObject_t(Engine2PINVOKE.IMeshInfo_m_pMesh_get(swigCPtr), true);
      if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_CSmartPtrT_ICullObject_t m_pOriginalMesh {
    set {
      Engine2PINVOKE.IMeshInfo_m_pOriginalMesh_set(swigCPtr, SWIGTYPE_p_CSmartPtrT_ICullObject_t.getCPtr(value));
      if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_CSmartPtrT_ICullObject_t ret = new SWIGTYPE_p_CSmartPtrT_ICullObject_t(Engine2PINVOKE.IMeshInfo_m_pOriginalMesh_get(swigCPtr), true);
      if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public IMeshInfo m_pParent {
    set {
      Engine2PINVOKE.IMeshInfo_m_pParent_set(swigCPtr, IMeshInfo.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = Engine2PINVOKE.IMeshInfo_m_pParent_get(swigCPtr);
      IMeshInfo ret = (cPtr == global::System.IntPtr.Zero) ? null : new IMeshInfo(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_void m_pSector {
    set {
      Engine2PINVOKE.IMeshInfo_m_pSector_set(swigCPtr, SWIGTYPE_p_void.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = Engine2PINVOKE.IMeshInfo_m_pSector_get(swigCPtr);
      SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
      return ret;
    } 
  }

}
