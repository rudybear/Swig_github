//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.7
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ICore : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ICore(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ICore obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ICore() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          Engine2PINVOKE.delete_ICore(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public virtual void Close() {
    Engine2PINVOKE.ICore_Close(swigCPtr);
  }

  public virtual SWIGTYPE_p_HRESULT ParseConsoleParams(string m_szParams) {
    SWIGTYPE_p_HRESULT ret = new SWIGTYPE_p_HRESULT(Engine2PINVOKE.ICore_ParseConsoleParams(swigCPtr, m_szParams), true);
    return ret;
  }

  public virtual bool Init(SWIGTYPE_p_HINSTANCE hInstance, string szCaption, SWIGTYPE_p_HICON hIcon) {
    bool ret = Engine2PINVOKE.ICore_Init__SWIG_0(swigCPtr, SWIGTYPE_p_HINSTANCE.getCPtr(hInstance), szCaption, SWIGTYPE_p_HICON.getCPtr(hIcon));
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool Init(SWIGTYPE_p_HINSTANCE hInstance, string szCaption) {
    bool ret = Engine2PINVOKE.ICore_Init__SWIG_1(swigCPtr, SWIGTYPE_p_HINSTANCE.getCPtr(hInstance), szCaption);
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool Init(SWIGTYPE_p_HINSTANCE hInstance) {
    bool ret = Engine2PINVOKE.ICore_Init__SWIG_2(swigCPtr, SWIGTYPE_p_HINSTANCE.getCPtr(hInstance));
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool Init(SWIGTYPE_p_CXmlElement init) {
    bool ret = Engine2PINVOKE.ICore_Init__SWIG_3(swigCPtr, SWIGTYPE_p_CXmlElement.getCPtr(init));
    return ret;
  }

  public virtual int Run() {
    int ret = Engine2PINVOKE.ICore_Run(swigCPtr);
    return ret;
  }

  public virtual SWIGTYPE_p_HRESULT Frame(bool Move) {
    SWIGTYPE_p_HRESULT ret = new SWIGTYPE_p_HRESULT(Engine2PINVOKE.ICore_Frame__SWIG_0(swigCPtr, Move), true);
    return ret;
  }

  public virtual SWIGTYPE_p_HRESULT Frame() {
    SWIGTYPE_p_HRESULT ret = new SWIGTYPE_p_HRESULT(Engine2PINVOKE.ICore_Frame__SWIG_1(swigCPtr), true);
    return ret;
  }

  public virtual IWindow AddWindow() {
    global::System.IntPtr cPtr = Engine2PINVOKE.ICore_AddWindow(swigCPtr);
    IWindow ret = (cPtr == global::System.IntPtr.Zero) ? null : new IWindow(cPtr, false);
    return ret;
  }

  public virtual IWindow GetWindow() {
    global::System.IntPtr cPtr = Engine2PINVOKE.ICore_GetWindow(swigCPtr);
    IWindow ret = (cPtr == global::System.IntPtr.Zero) ? null : new IWindow(cPtr, false);
    return ret;
  }

  public virtual void SetInitialWindowParameters(int xPos, int yPos, int width, int height, int bpp, int fullscreen) {
    Engine2PINVOKE.ICore_SetInitialWindowParameters(swigCPtr, xPos, yPos, width, height, bpp, fullscreen);
  }

  public virtual ILoadingProfilerManager GetLoadingProfiler() {
    global::System.IntPtr cPtr = Engine2PINVOKE.ICore_GetLoadingProfiler(swigCPtr);
    ILoadingProfilerManager ret = (cPtr == global::System.IntPtr.Zero) ? null : new ILoadingProfilerManager(cPtr, false);
    return ret;
  }

  public virtual IPerformanceProfilerManager GetPerformanceProfiler() {
    global::System.IntPtr cPtr = Engine2PINVOKE.ICore_GetPerformanceProfiler(swigCPtr);
    IPerformanceProfilerManager ret = (cPtr == global::System.IntPtr.Zero) ? null : new IPerformanceProfilerManager(cPtr, false);
    return ret;
  }

  public virtual SWIGTYPE_p_IVFSFileManager GetVFSManager() {
    global::System.IntPtr cPtr = Engine2PINVOKE.ICore_GetVFSManager(swigCPtr);
    SWIGTYPE_p_IVFSFileManager ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_IVFSFileManager(cPtr, false);
    return ret;
  }

  public virtual SWIGTYPE_p_IStreamEngine GetStreamingEngine(int num) {
    global::System.IntPtr cPtr = Engine2PINVOKE.ICore_GetStreamingEngine(swigCPtr, num);
    SWIGTYPE_p_IStreamEngine ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_IStreamEngine(cPtr, false);
    return ret;
  }

  public virtual IConfigFile GetConfigFile() {
    global::System.IntPtr cPtr = Engine2PINVOKE.ICore_GetConfigFile(swigCPtr);
    IConfigFile ret = (cPtr == global::System.IntPtr.Zero) ? null : new IConfigFile(cPtr, false);
    return ret;
  }

  public virtual IDebugInformationManager GetDebugInformationManager() {
    global::System.IntPtr cPtr = Engine2PINVOKE.ICore_GetDebugInformationManager(swigCPtr);
    IDebugInformationManager ret = (cPtr == global::System.IntPtr.Zero) ? null : new IDebugInformationManager(cPtr, false);
    return ret;
  }

  public virtual IStatisticsManager GetStatisticsManager() {
    global::System.IntPtr cPtr = Engine2PINVOKE.ICore_GetStatisticsManager(swigCPtr);
    IStatisticsManager ret = (cPtr == global::System.IntPtr.Zero) ? null : new IStatisticsManager(cPtr, false);
    return ret;
  }

  public virtual SWIGTYPE_p_IControlsManager GetControlsManager() {
    global::System.IntPtr cPtr = Engine2PINVOKE.ICore_GetControlsManager(swigCPtr);
    SWIGTYPE_p_IControlsManager ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_IControlsManager(cPtr, false);
    return ret;
  }

  public virtual ILogManager GetLogManager() {
    global::System.IntPtr cPtr = Engine2PINVOKE.ICore_GetLogManager(swigCPtr);
    ILogManager ret = (cPtr == global::System.IntPtr.Zero) ? null : new ILogManager(cPtr, false);
    return ret;
  }

  public virtual SWIGTYPE_p_IInput GetInputEngine() {
    global::System.IntPtr cPtr = Engine2PINVOKE.ICore_GetInputEngine(swigCPtr);
    SWIGTYPE_p_IInput ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_IInput(cPtr, false);
    return ret;
  }

  public virtual SWIGTYPE_p_IEntitySystem GetEntitySystem() {
    global::System.IntPtr cPtr = Engine2PINVOKE.ICore_GetEntitySystem(swigCPtr);
    SWIGTYPE_p_IEntitySystem ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_IEntitySystem(cPtr, false);
    return ret;
  }

  public virtual IScene GetScene() {
    global::System.IntPtr cPtr = Engine2PINVOKE.ICore_GetScene(swigCPtr);
    IScene ret = (cPtr == global::System.IntPtr.Zero) ? null : new IScene(cPtr, false);
    return ret;
  }

  public virtual int AddScene() {
    int ret = Engine2PINVOKE.ICore_AddScene(swigCPtr);
    return ret;
  }

  public virtual void RemoveScene(int arg0) {
    Engine2PINVOKE.ICore_RemoveScene(swigCPtr, arg0);
  }

  public virtual int GetActiveSceneID() {
    int ret = Engine2PINVOKE.ICore_GetActiveSceneID(swigCPtr);
    return ret;
  }

  public virtual bool SetActiveScene(int arg0) {
    bool ret = Engine2PINVOKE.ICore_SetActiveScene(swigCPtr, arg0);
    return ret;
  }

  public virtual int SetGameMod(IGameMod pGameMod) {
    int ret = Engine2PINVOKE.ICore_SetGameMod(swigCPtr, IGameMod.getCPtr(pGameMod));
    return ret;
  }

  public virtual IGameMod GetGameMod() {
    global::System.IntPtr cPtr = Engine2PINVOKE.ICore_GetGameMod(swigCPtr);
    IGameMod ret = (cPtr == global::System.IntPtr.Zero) ? null : new IGameMod(cPtr, false);
    return ret;
  }

  public virtual bool RegisterSubscription(IChangesSubscription arg0) {
    bool ret = Engine2PINVOKE.ICore_RegisterSubscription(swigCPtr, IChangesSubscription.getCPtr(arg0));
    return ret;
  }

  public virtual bool UnregisterSubscription(IChangesSubscription arg0) {
    bool ret = Engine2PINVOKE.ICore_UnregisterSubscription(swigCPtr, IChangesSubscription.getCPtr(arg0));
    return ret;
  }

  public virtual int LoadRenderConfig(string szProfile) {
    int ret = Engine2PINVOKE.ICore_LoadRenderConfig(swigCPtr, szProfile);
    return ret;
  }

}
