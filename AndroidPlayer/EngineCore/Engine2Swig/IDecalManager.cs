//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.7
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class IDecalManager : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal IDecalManager(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IDecalManager obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~IDecalManager() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          Engine2PINVOKE.delete_IDecalManager(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public virtual SWIGTYPE_p_uint32 SpawnDecal(EngineDecalInfo arg0) {
    SWIGTYPE_p_uint32 ret = new SWIGTYPE_p_uint32(Engine2PINVOKE.IDecalManager_SpawnDecal(swigCPtr, EngineDecalInfo.getCPtr(arg0)), true);
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool MoveDecal(SWIGTYPE_p_uint32 decalID, EngineDecalInfo arg1) {
    bool ret = Engine2PINVOKE.IDecalManager_MoveDecal(swigCPtr, SWIGTYPE_p_uint32.getCPtr(decalID), EngineDecalInfo.getCPtr(arg1));
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual SWIGTYPE_p_IMaterial GetDecalMaterial(SWIGTYPE_p_uint32 decalID) {
    global::System.IntPtr cPtr = Engine2PINVOKE.IDecalManager_GetDecalMaterial(swigCPtr, SWIGTYPE_p_uint32.getCPtr(decalID));
    SWIGTYPE_p_IMaterial ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_IMaterial(cPtr, false);
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual IMeshInfo GetDecalMesh(SWIGTYPE_p_uint32 decalID) {
    global::System.IntPtr cPtr = Engine2PINVOKE.IDecalManager_GetDecalMesh(swigCPtr, SWIGTYPE_p_uint32.getCPtr(decalID));
    IMeshInfo ret = (cPtr == global::System.IntPtr.Zero) ? null : new IMeshInfo(cPtr, false);
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool RemoveDecal(SWIGTYPE_p_uint32 id) {
    bool ret = Engine2PINVOKE.IDecalManager_RemoveDecal(swigCPtr, SWIGTYPE_p_uint32.getCPtr(id));
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void SetTransparency(SWIGTYPE_p_uint32 id, float fTransparency) {
    Engine2PINVOKE.IDecalManager_SetTransparency(swigCPtr, SWIGTYPE_p_uint32.getCPtr(id), fTransparency);
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual float GetTransparency(SWIGTYPE_p_uint32 id) {
    float ret = Engine2PINVOKE.IDecalManager_GetTransparency(swigCPtr, SWIGTYPE_p_uint32.getCPtr(id));
    if (Engine2PINVOKE.SWIGPendingException.Pending) throw Engine2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
