/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.7
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGCSHARP


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_Engine2(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_Engine2(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_Engine2(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else


#include "public/Core/ICore.h"
#include "Public/Core/IGameMod.h"
#include "Public/Render/IRender.h"
#include "public/Common/Strings.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Engine2String_npos_get() {
  unsigned long jresult ;
  size_t result;
  
  result = Engine2::String_template< char,Engine2::StandardAllocator >::npos;
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Engine2String__SWIG_0() {
  void * jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator > *result = 0 ;
  
  result = (Engine2::String_template< char,Engine2::StandardAllocator > *)new Engine2::String_template< char,Engine2::StandardAllocator >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Engine2String__SWIG_1(void * jarg1) {
  void * jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator >::_Self *arg1 = 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator > *result = 0 ;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator >::_Self *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Engine2::String_template< char,Engine2::StandardAllocator >::_Self const & type is null", 0);
    return 0;
  } 
  result = (Engine2::String_template< char,Engine2::StandardAllocator > *)new Engine2::String_template< char,Engine2::StandardAllocator >((Engine2::String_template< char,Engine2::StandardAllocator >::_Self const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Engine2String__SWIG_2(void * jarg1, unsigned long jarg2, unsigned long jarg3) {
  void * jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator >::_Self *arg1 = 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type arg2 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type arg3 ;
  Engine2::String_template< char,Engine2::StandardAllocator > *result = 0 ;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator >::_Self *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Engine2::String_template< char,Engine2::StandardAllocator >::_Self const & type is null", 0);
    return 0;
  } 
  arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::size_type)jarg2; 
  arg3 = (Engine2::String_template< char,Engine2::StandardAllocator >::size_type)jarg3; 
  result = (Engine2::String_template< char,Engine2::StandardAllocator > *)new Engine2::String_template< char,Engine2::StandardAllocator >((Engine2::String_template< char,Engine2::StandardAllocator >::_Self const &)*arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Engine2String__SWIG_3(char jarg1, unsigned long jarg2) {
  void * jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator >::value_type arg1 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type arg2 ;
  Engine2::String_template< char,Engine2::StandardAllocator > *result = 0 ;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator >::value_type)jarg1; 
  arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::size_type)jarg2; 
  result = (Engine2::String_template< char,Engine2::StandardAllocator > *)new Engine2::String_template< char,Engine2::StandardAllocator >(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Engine2String__SWIG_4(char jarg1) {
  void * jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator >::value_type arg1 ;
  Engine2::String_template< char,Engine2::StandardAllocator > *result = 0 ;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator >::value_type)jarg1; 
  result = (Engine2::String_template< char,Engine2::StandardAllocator > *)new Engine2::String_template< char,Engine2::StandardAllocator >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Engine2String__SWIG_5(char * jarg1) {
  void * jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator >::const_str arg1 = (Engine2::String_template< char,Engine2::StandardAllocator >::const_str) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator > *result = 0 ;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator >::const_str)jarg1; 
  result = (Engine2::String_template< char,Engine2::StandardAllocator > *)new Engine2::String_template< char,Engine2::StandardAllocator >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Engine2String__SWIG_6(char * jarg1, unsigned long jarg2) {
  void * jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator >::const_str arg1 = (Engine2::String_template< char,Engine2::StandardAllocator >::const_str) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type arg2 ;
  Engine2::String_template< char,Engine2::StandardAllocator > *result = 0 ;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator >::const_str)jarg1; 
  arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::size_type)jarg2; 
  result = (Engine2::String_template< char,Engine2::StandardAllocator > *)new Engine2::String_template< char,Engine2::StandardAllocator >(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Engine2String__SWIG_7(char * jarg1, char * jarg2) {
  void * jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator >::const_iterator arg1 = (Engine2::String_template< char,Engine2::StandardAllocator >::const_iterator) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::const_iterator arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::const_iterator) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator > *result = 0 ;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator >::const_iterator)jarg1; 
  arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::const_iterator)jarg2; 
  result = (Engine2::String_template< char,Engine2::StandardAllocator > *)new Engine2::String_template< char,Engine2::StandardAllocator >(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Engine2String(void * jarg1) {
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Engine2String_length(void * jarg1) {
  unsigned long jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type result;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  result = ((Engine2::String_template< char,Engine2::StandardAllocator > const *)arg1)->length();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Engine2String_size(void * jarg1) {
  unsigned long jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type result;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  result = ((Engine2::String_template< char,Engine2::StandardAllocator > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Engine2String_empty(void * jarg1) {
  unsigned int jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  bool result;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  result = (bool)((Engine2::String_template< char,Engine2::StandardAllocator > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Engine2String_clear(void * jarg1) {
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Engine2String_capacity(void * jarg1) {
  unsigned long jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type result;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  result = ((Engine2::String_template< char,Engine2::StandardAllocator > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Engine2String_reserve__SWIG_0(void * jarg1, unsigned long jarg2) {
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type arg2 ;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Engine2String_reserve__SWIG_1(void * jarg1) {
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  (arg1)->reserve();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Engine2String_append__SWIG_0(void * jarg1, char * jarg2) {
  void * jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::value_type *arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::value_type *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::_Self *result = 0 ;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::value_type *)jarg2; 
  result = (Engine2::String_template< char,Engine2::StandardAllocator >::_Self *) &(arg1)->append((Engine2::String_template< char,Engine2::StandardAllocator >::value_type const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Engine2String_append__SWIG_1(void * jarg1, char * jarg2, unsigned long jarg3) {
  void * jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::value_type *arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::value_type *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type arg3 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::_Self *result = 0 ;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::value_type *)jarg2; 
  arg3 = (Engine2::String_template< char,Engine2::StandardAllocator >::size_type)jarg3; 
  result = (Engine2::String_template< char,Engine2::StandardAllocator >::_Self *) &(arg1)->append((Engine2::String_template< char,Engine2::StandardAllocator >::value_type const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Engine2String_append__SWIG_2(void * jarg1, void * jarg2, unsigned long jarg3, unsigned long jarg4) {
  void * jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::_Self *arg2 = 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type arg3 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type arg4 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::_Self *result = 0 ;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::_Self *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Engine2::String_template< char,Engine2::StandardAllocator >::_Self const & type is null", 0);
    return 0;
  } 
  arg3 = (Engine2::String_template< char,Engine2::StandardAllocator >::size_type)jarg3; 
  arg4 = (Engine2::String_template< char,Engine2::StandardAllocator >::size_type)jarg4; 
  result = (Engine2::String_template< char,Engine2::StandardAllocator >::_Self *) &(arg1)->append((Engine2::String_template< char,Engine2::StandardAllocator >::_Self const &)*arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Engine2String_append__SWIG_3(void * jarg1, void * jarg2) {
  void * jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::_Self *arg2 = 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::_Self *result = 0 ;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::_Self *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Engine2::String_template< char,Engine2::StandardAllocator >::_Self const & type is null", 0);
    return 0;
  } 
  result = (Engine2::String_template< char,Engine2::StandardAllocator >::_Self *) &(arg1)->append((Engine2::String_template< char,Engine2::StandardAllocator >::_Self const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Engine2String_append__SWIG_4(void * jarg1, unsigned long jarg2, char jarg3) {
  void * jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type arg2 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::value_type arg3 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::_Self *result = 0 ;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::size_type)jarg2; 
  arg3 = (Engine2::String_template< char,Engine2::StandardAllocator >::value_type)jarg3; 
  result = (Engine2::String_template< char,Engine2::StandardAllocator >::_Self *) &(arg1)->append(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Engine2String_append__SWIG_5(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::const_iterator arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::const_iterator) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::const_iterator arg3 = (Engine2::String_template< char,Engine2::StandardAllocator >::const_iterator) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::_Self *result = 0 ;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::const_iterator)jarg2; 
  arg3 = (Engine2::String_template< char,Engine2::StandardAllocator >::const_iterator)jarg3; 
  result = (Engine2::String_template< char,Engine2::StandardAllocator >::_Self *) &(arg1)->append(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Engine2String_assign__SWIG_0(void * jarg1, char * jarg2) {
  void * jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::const_str arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::const_str) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::_Self *result = 0 ;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::const_str)jarg2; 
  result = (Engine2::String_template< char,Engine2::StandardAllocator >::_Self *) &(arg1)->assign(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Engine2String_assign__SWIG_1(void * jarg1, char * jarg2, unsigned long jarg3) {
  void * jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::const_str arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::const_str) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type arg3 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::_Self *result = 0 ;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::const_str)jarg2; 
  arg3 = (Engine2::String_template< char,Engine2::StandardAllocator >::size_type)jarg3; 
  result = (Engine2::String_template< char,Engine2::StandardAllocator >::_Self *) &(arg1)->assign(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Engine2String_assign__SWIG_2(void * jarg1, void * jarg2, unsigned long jarg3, unsigned long jarg4) {
  void * jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::_Self *arg2 = 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type arg3 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type arg4 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::_Self *result = 0 ;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::_Self *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Engine2::String_template< char,Engine2::StandardAllocator >::_Self const & type is null", 0);
    return 0;
  } 
  arg3 = (Engine2::String_template< char,Engine2::StandardAllocator >::size_type)jarg3; 
  arg4 = (Engine2::String_template< char,Engine2::StandardAllocator >::size_type)jarg4; 
  result = (Engine2::String_template< char,Engine2::StandardAllocator >::_Self *) &(arg1)->assign((Engine2::String_template< char,Engine2::StandardAllocator >::_Self const &)*arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Engine2String_assign__SWIG_3(void * jarg1, void * jarg2) {
  void * jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::_Self *arg2 = 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::_Self *result = 0 ;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::_Self *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Engine2::String_template< char,Engine2::StandardAllocator >::_Self const & type is null", 0);
    return 0;
  } 
  result = (Engine2::String_template< char,Engine2::StandardAllocator >::_Self *) &(arg1)->assign((Engine2::String_template< char,Engine2::StandardAllocator >::_Self const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Engine2String_assign__SWIG_4(void * jarg1, unsigned long jarg2, char jarg3) {
  void * jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type arg2 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::value_type arg3 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::_Self *result = 0 ;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::size_type)jarg2; 
  arg3 = (Engine2::String_template< char,Engine2::StandardAllocator >::value_type)jarg3; 
  result = (Engine2::String_template< char,Engine2::StandardAllocator >::_Self *) &(arg1)->assign(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Engine2String_assign__SWIG_5(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::const_iterator arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::const_iterator) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::const_iterator arg3 = (Engine2::String_template< char,Engine2::StandardAllocator >::const_iterator) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::_Self *result = 0 ;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::const_iterator)jarg2; 
  arg3 = (Engine2::String_template< char,Engine2::StandardAllocator >::const_iterator)jarg3; 
  result = (Engine2::String_template< char,Engine2::StandardAllocator >::_Self *) &(arg1)->assign(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_Engine2String_at(void * jarg1, unsigned long jarg2) {
  char jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type arg2 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::value_type result;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::size_type)jarg2; 
  result = (Engine2::String_template< char,Engine2::StandardAllocator >::value_type)((Engine2::String_template< char,Engine2::StandardAllocator > const *)arg1)->at(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Engine2String_begin__SWIG_0(void * jarg1) {
  char * jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::const_iterator result;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  result = (Engine2::String_template< char,Engine2::StandardAllocator >::const_iterator)((Engine2::String_template< char,Engine2::StandardAllocator > const *)arg1)->begin();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Engine2String_end__SWIG_0(void * jarg1) {
  char * jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::const_iterator result;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  result = (Engine2::String_template< char,Engine2::StandardAllocator >::const_iterator)((Engine2::String_template< char,Engine2::StandardAllocator > const *)arg1)->end();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Engine2String_c_str(void * jarg1) {
  char * jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::value_type *result = 0 ;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  result = (Engine2::String_template< char,Engine2::StandardAllocator >::value_type *)((Engine2::String_template< char,Engine2::StandardAllocator > const *)arg1)->c_str();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Engine2String_data(void * jarg1) {
  char * jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::value_type *result = 0 ;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  result = (Engine2::String_template< char,Engine2::StandardAllocator >::value_type *)((Engine2::String_template< char,Engine2::StandardAllocator > const *)arg1)->data();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Engine2String_compare__SWIG_0(void * jarg1, void * jarg2) {
  int jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::_Self *arg2 = 0 ;
  int result;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::_Self *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Engine2::String_template< char,Engine2::StandardAllocator >::_Self const & type is null", 0);
    return 0;
  } 
  result = (int)((Engine2::String_template< char,Engine2::StandardAllocator > const *)arg1)->compare((Engine2::String_template< char,Engine2::StandardAllocator >::_Self const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Engine2String_compare__SWIG_1(void * jarg1, unsigned long jarg2, unsigned long jarg3, void * jarg4) {
  int jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type arg2 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type arg3 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::_Self *arg4 = 0 ;
  int result;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::size_type)jarg2; 
  arg3 = (Engine2::String_template< char,Engine2::StandardAllocator >::size_type)jarg3; 
  arg4 = (Engine2::String_template< char,Engine2::StandardAllocator >::_Self *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Engine2::String_template< char,Engine2::StandardAllocator >::_Self const & type is null", 0);
    return 0;
  } 
  result = (int)((Engine2::String_template< char,Engine2::StandardAllocator > const *)arg1)->compare(arg2,arg3,(Engine2::String_template< char,Engine2::StandardAllocator >::_Self const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Engine2String_compare__SWIG_2(void * jarg1, unsigned long jarg2, unsigned long jarg3, void * jarg4, unsigned long jarg5, unsigned long jarg6) {
  int jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type arg2 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type arg3 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::_Self *arg4 = 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type arg5 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type arg6 ;
  int result;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::size_type)jarg2; 
  arg3 = (Engine2::String_template< char,Engine2::StandardAllocator >::size_type)jarg3; 
  arg4 = (Engine2::String_template< char,Engine2::StandardAllocator >::_Self *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Engine2::String_template< char,Engine2::StandardAllocator >::_Self const & type is null", 0);
    return 0;
  } 
  arg5 = (Engine2::String_template< char,Engine2::StandardAllocator >::size_type)jarg5; 
  arg6 = (Engine2::String_template< char,Engine2::StandardAllocator >::size_type)jarg6; 
  result = (int)((Engine2::String_template< char,Engine2::StandardAllocator > const *)arg1)->compare(arg2,arg3,(Engine2::String_template< char,Engine2::StandardAllocator >::_Self const &)*arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Engine2String_compare__SWIG_3(void * jarg1, char * jarg2) {
  int jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::value_type *arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::value_type *) 0 ;
  int result;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::value_type *)jarg2; 
  result = (int)((Engine2::String_template< char,Engine2::StandardAllocator > const *)arg1)->compare((Engine2::String_template< char,Engine2::StandardAllocator >::value_type const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Engine2String_compare__SWIG_4(void * jarg1, unsigned long jarg2, unsigned long jarg3, char * jarg4) {
  int jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type arg2 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type arg3 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::value_type *arg4 = (Engine2::String_template< char,Engine2::StandardAllocator >::value_type *) 0 ;
  int result;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::size_type)jarg2; 
  arg3 = (Engine2::String_template< char,Engine2::StandardAllocator >::size_type)jarg3; 
  arg4 = (Engine2::String_template< char,Engine2::StandardAllocator >::value_type *)jarg4; 
  result = (int)((Engine2::String_template< char,Engine2::StandardAllocator > const *)arg1)->compare(arg2,arg3,(Engine2::String_template< char,Engine2::StandardAllocator >::value_type const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Engine2String_compareWithPos__SWIG_0(void * jarg1, unsigned long jarg2, unsigned long jarg3, char * jarg4, unsigned long jarg5) {
  int jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type arg2 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type arg3 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::value_type *arg4 = (Engine2::String_template< char,Engine2::StandardAllocator >::value_type *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type arg5 ;
  int result;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::size_type)jarg2; 
  arg3 = (Engine2::String_template< char,Engine2::StandardAllocator >::size_type)jarg3; 
  arg4 = (Engine2::String_template< char,Engine2::StandardAllocator >::value_type *)jarg4; 
  arg5 = (Engine2::String_template< char,Engine2::StandardAllocator >::size_type)jarg5; 
  result = (int)((Engine2::String_template< char,Engine2::StandardAllocator > const *)arg1)->compareWithPos(arg2,arg3,(Engine2::String_template< char,Engine2::StandardAllocator >::value_type const *)arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Engine2String_compareWithPos__SWIG_1(void * jarg1, unsigned long jarg2, unsigned long jarg3, char * jarg4) {
  int jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type arg2 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type arg3 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::value_type *arg4 = (Engine2::String_template< char,Engine2::StandardAllocator >::value_type *) 0 ;
  int result;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::size_type)jarg2; 
  arg3 = (Engine2::String_template< char,Engine2::StandardAllocator >::size_type)jarg3; 
  arg4 = (Engine2::String_template< char,Engine2::StandardAllocator >::value_type *)jarg4; 
  result = (int)((Engine2::String_template< char,Engine2::StandardAllocator > const *)arg1)->compareWithPos(arg2,arg3,(Engine2::String_template< char,Engine2::StandardAllocator >::value_type const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Engine2String_compareNoCase__SWIG_0(void * jarg1, void * jarg2) {
  int jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::_Self *arg2 = 0 ;
  int result;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::_Self *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Engine2::String_template< char,Engine2::StandardAllocator >::_Self const & type is null", 0);
    return 0;
  } 
  result = (int)((Engine2::String_template< char,Engine2::StandardAllocator > const *)arg1)->compareNoCase((Engine2::String_template< char,Engine2::StandardAllocator >::_Self const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Engine2String_compareNoCase__SWIG_1(void * jarg1, unsigned long jarg2, unsigned long jarg3, void * jarg4) {
  int jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type arg2 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type arg3 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::_Self *arg4 = 0 ;
  int result;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::size_type)jarg2; 
  arg3 = (Engine2::String_template< char,Engine2::StandardAllocator >::size_type)jarg3; 
  arg4 = (Engine2::String_template< char,Engine2::StandardAllocator >::_Self *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Engine2::String_template< char,Engine2::StandardAllocator >::_Self const & type is null", 0);
    return 0;
  } 
  result = (int)((Engine2::String_template< char,Engine2::StandardAllocator > const *)arg1)->compareNoCase(arg2,arg3,(Engine2::String_template< char,Engine2::StandardAllocator >::_Self const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Engine2String_compareNoCase__SWIG_2(void * jarg1, unsigned long jarg2, unsigned long jarg3, void * jarg4, unsigned long jarg5, unsigned long jarg6) {
  int jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type arg2 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type arg3 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::_Self *arg4 = 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type arg5 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type arg6 ;
  int result;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::size_type)jarg2; 
  arg3 = (Engine2::String_template< char,Engine2::StandardAllocator >::size_type)jarg3; 
  arg4 = (Engine2::String_template< char,Engine2::StandardAllocator >::_Self *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Engine2::String_template< char,Engine2::StandardAllocator >::_Self const & type is null", 0);
    return 0;
  } 
  arg5 = (Engine2::String_template< char,Engine2::StandardAllocator >::size_type)jarg5; 
  arg6 = (Engine2::String_template< char,Engine2::StandardAllocator >::size_type)jarg6; 
  result = (int)((Engine2::String_template< char,Engine2::StandardAllocator > const *)arg1)->compareNoCase(arg2,arg3,(Engine2::String_template< char,Engine2::StandardAllocator >::_Self const &)*arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Engine2String_compareNoCase__SWIG_3(void * jarg1, char * jarg2) {
  int jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::value_type *arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::value_type *) 0 ;
  int result;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::value_type *)jarg2; 
  result = (int)((Engine2::String_template< char,Engine2::StandardAllocator > const *)arg1)->compareNoCase((Engine2::String_template< char,Engine2::StandardAllocator >::value_type const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Engine2String_compareNoCase__SWIG_4(void * jarg1, unsigned long jarg2, unsigned long jarg3, char * jarg4) {
  int jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type arg2 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type arg3 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::value_type *arg4 = (Engine2::String_template< char,Engine2::StandardAllocator >::value_type *) 0 ;
  int result;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::size_type)jarg2; 
  arg3 = (Engine2::String_template< char,Engine2::StandardAllocator >::size_type)jarg3; 
  arg4 = (Engine2::String_template< char,Engine2::StandardAllocator >::value_type *)jarg4; 
  result = (int)((Engine2::String_template< char,Engine2::StandardAllocator > const *)arg1)->compareNoCase(arg2,arg3,(Engine2::String_template< char,Engine2::StandardAllocator >::value_type const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Engine2String_compareNoCaseWithPos__SWIG_0(void * jarg1, unsigned long jarg2, unsigned long jarg3, char * jarg4, unsigned long jarg5) {
  int jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type arg2 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type arg3 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::value_type *arg4 = (Engine2::String_template< char,Engine2::StandardAllocator >::value_type *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type arg5 ;
  int result;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::size_type)jarg2; 
  arg3 = (Engine2::String_template< char,Engine2::StandardAllocator >::size_type)jarg3; 
  arg4 = (Engine2::String_template< char,Engine2::StandardAllocator >::value_type *)jarg4; 
  arg5 = (Engine2::String_template< char,Engine2::StandardAllocator >::size_type)jarg5; 
  result = (int)((Engine2::String_template< char,Engine2::StandardAllocator > const *)arg1)->compareNoCaseWithPos(arg2,arg3,(Engine2::String_template< char,Engine2::StandardAllocator >::value_type const *)arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Engine2String_compareNoCaseWithPos__SWIG_1(void * jarg1, unsigned long jarg2, unsigned long jarg3, char * jarg4) {
  int jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type arg2 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type arg3 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::value_type *arg4 = (Engine2::String_template< char,Engine2::StandardAllocator >::value_type *) 0 ;
  int result;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::size_type)jarg2; 
  arg3 = (Engine2::String_template< char,Engine2::StandardAllocator >::size_type)jarg3; 
  arg4 = (Engine2::String_template< char,Engine2::StandardAllocator >::value_type *)jarg4; 
  result = (int)((Engine2::String_template< char,Engine2::StandardAllocator > const *)arg1)->compareNoCaseWithPos(arg2,arg3,(Engine2::String_template< char,Engine2::StandardAllocator >::value_type const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Engine2String_copy__SWIG_0(void * jarg1, char * jarg2, unsigned long jarg3, unsigned long jarg4) {
  unsigned long jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::value_type *arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::value_type *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type arg3 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type arg4 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type result;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::value_type *)jarg2; 
  arg3 = (Engine2::String_template< char,Engine2::StandardAllocator >::size_type)jarg3; 
  arg4 = (Engine2::String_template< char,Engine2::StandardAllocator >::size_type)jarg4; 
  result = ((Engine2::String_template< char,Engine2::StandardAllocator > const *)arg1)->copy(arg2,arg3,arg4);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Engine2String_copy__SWIG_1(void * jarg1, char * jarg2, unsigned long jarg3) {
  unsigned long jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::value_type *arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::value_type *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type arg3 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type result;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::value_type *)jarg2; 
  arg3 = (Engine2::String_template< char,Engine2::StandardAllocator >::size_type)jarg3; 
  result = ((Engine2::String_template< char,Engine2::StandardAllocator > const *)arg1)->copy(arg2,arg3);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Engine2String_push_back(void * jarg1, char jarg2) {
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::value_type arg2 ;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::value_type)jarg2; 
  (arg1)->push_back(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Engine2String_resize__SWIG_0(void * jarg1, unsigned long jarg2, char jarg3) {
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type arg2 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::value_type arg3 ;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::size_type)jarg2; 
  arg3 = (Engine2::String_template< char,Engine2::StandardAllocator >::value_type)jarg3; 
  (arg1)->resize(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Engine2String_resize__SWIG_1(void * jarg1, unsigned long jarg2) {
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type arg2 ;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::size_type)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Engine2String_substr__SWIG_0(void * jarg1, unsigned long jarg2, unsigned long jarg3) {
  void * jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type arg2 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type arg3 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::_Self result;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::size_type)jarg2; 
  arg3 = (Engine2::String_template< char,Engine2::StandardAllocator >::size_type)jarg3; 
  result = ((Engine2::String_template< char,Engine2::StandardAllocator > const *)arg1)->substr(arg2,arg3);
  jresult = new Engine2::String_template< char,Engine2::StandardAllocator >::_Self((const Engine2::String_template< char,Engine2::StandardAllocator >::_Self &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Engine2String_substr__SWIG_1(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type arg2 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::_Self result;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::size_type)jarg2; 
  result = ((Engine2::String_template< char,Engine2::StandardAllocator > const *)arg1)->substr(arg2);
  jresult = new Engine2::String_template< char,Engine2::StandardAllocator >::_Self((const Engine2::String_template< char,Engine2::StandardAllocator >::_Self &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Engine2String_replace__SWIG_0(void * jarg1, char jarg2, char jarg3) {
  void * jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::value_type arg2 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::value_type arg3 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::_Self *result = 0 ;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::value_type)jarg2; 
  arg3 = (Engine2::String_template< char,Engine2::StandardAllocator >::value_type)jarg3; 
  result = (Engine2::String_template< char,Engine2::StandardAllocator >::_Self *) &(arg1)->replace(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Engine2String_replace__SWIG_1(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::const_str arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::const_str) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::const_str arg3 = (Engine2::String_template< char,Engine2::StandardAllocator >::const_str) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::_Self *result = 0 ;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::const_str)jarg2; 
  arg3 = (Engine2::String_template< char,Engine2::StandardAllocator >::const_str)jarg3; 
  result = (Engine2::String_template< char,Engine2::StandardAllocator >::_Self *) &(arg1)->replace(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Engine2String_replace__SWIG_2(void * jarg1, unsigned long jarg2, unsigned long jarg3, char * jarg4) {
  void * jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type arg2 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type arg3 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::const_str arg4 = (Engine2::String_template< char,Engine2::StandardAllocator >::const_str) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::_Self *result = 0 ;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::size_type)jarg2; 
  arg3 = (Engine2::String_template< char,Engine2::StandardAllocator >::size_type)jarg3; 
  arg4 = (Engine2::String_template< char,Engine2::StandardAllocator >::const_str)jarg4; 
  result = (Engine2::String_template< char,Engine2::StandardAllocator >::_Self *) &(arg1)->replace(arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Engine2String_replace__SWIG_3(void * jarg1, unsigned long jarg2, unsigned long jarg3, char * jarg4, unsigned long jarg5) {
  void * jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type arg2 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type arg3 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::const_str arg4 = (Engine2::String_template< char,Engine2::StandardAllocator >::const_str) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type arg5 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::_Self *result = 0 ;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::size_type)jarg2; 
  arg3 = (Engine2::String_template< char,Engine2::StandardAllocator >::size_type)jarg3; 
  arg4 = (Engine2::String_template< char,Engine2::StandardAllocator >::const_str)jarg4; 
  arg5 = (Engine2::String_template< char,Engine2::StandardAllocator >::size_type)jarg5; 
  result = (Engine2::String_template< char,Engine2::StandardAllocator >::_Self *) &(arg1)->replace(arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Engine2String_replace__SWIG_4(void * jarg1, unsigned long jarg2, unsigned long jarg3, unsigned long jarg4, char jarg5) {
  void * jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type arg2 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type arg3 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type arg4 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::value_type arg5 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::_Self *result = 0 ;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::size_type)jarg2; 
  arg3 = (Engine2::String_template< char,Engine2::StandardAllocator >::size_type)jarg3; 
  arg4 = (Engine2::String_template< char,Engine2::StandardAllocator >::size_type)jarg4; 
  arg5 = (Engine2::String_template< char,Engine2::StandardAllocator >::value_type)jarg5; 
  result = (Engine2::String_template< char,Engine2::StandardAllocator >::_Self *) &(arg1)->replace(arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Engine2String_insert__SWIG_0(void * jarg1, unsigned long jarg2, char jarg3) {
  void * jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type arg2 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::value_type arg3 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::_Self *result = 0 ;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::size_type)jarg2; 
  arg3 = (Engine2::String_template< char,Engine2::StandardAllocator >::value_type)jarg3; 
  result = (Engine2::String_template< char,Engine2::StandardAllocator >::_Self *) &(arg1)->insert(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Engine2String_insert__SWIG_1(void * jarg1, unsigned long jarg2, unsigned long jarg3, char jarg4) {
  void * jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type arg2 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type arg3 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::value_type arg4 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::_Self *result = 0 ;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::size_type)jarg2; 
  arg3 = (Engine2::String_template< char,Engine2::StandardAllocator >::size_type)jarg3; 
  arg4 = (Engine2::String_template< char,Engine2::StandardAllocator >::value_type)jarg4; 
  result = (Engine2::String_template< char,Engine2::StandardAllocator >::_Self *) &(arg1)->insert(arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Engine2String_insert__SWIG_2(void * jarg1, unsigned long jarg2, char * jarg3) {
  void * jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type arg2 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::const_str arg3 = (Engine2::String_template< char,Engine2::StandardAllocator >::const_str) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::_Self *result = 0 ;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::size_type)jarg2; 
  arg3 = (Engine2::String_template< char,Engine2::StandardAllocator >::const_str)jarg3; 
  result = (Engine2::String_template< char,Engine2::StandardAllocator >::_Self *) &(arg1)->insert(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Engine2String_insert__SWIG_3(void * jarg1, unsigned long jarg2, char * jarg3, unsigned long jarg4) {
  void * jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type arg2 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::const_str arg3 = (Engine2::String_template< char,Engine2::StandardAllocator >::const_str) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type arg4 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::_Self *result = 0 ;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::size_type)jarg2; 
  arg3 = (Engine2::String_template< char,Engine2::StandardAllocator >::const_str)jarg3; 
  arg4 = (Engine2::String_template< char,Engine2::StandardAllocator >::size_type)jarg4; 
  result = (Engine2::String_template< char,Engine2::StandardAllocator >::_Self *) &(arg1)->insert(arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Engine2String_erase__SWIG_0(void * jarg1, unsigned long jarg2, unsigned long jarg3) {
  void * jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type arg2 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type arg3 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::_Self *result = 0 ;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::size_type)jarg2; 
  arg3 = (Engine2::String_template< char,Engine2::StandardAllocator >::size_type)jarg3; 
  result = (Engine2::String_template< char,Engine2::StandardAllocator >::_Self *) &(arg1)->erase(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Engine2String_erase__SWIG_1(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type arg2 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::_Self *result = 0 ;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::size_type)jarg2; 
  result = (Engine2::String_template< char,Engine2::StandardAllocator >::_Self *) &(arg1)->erase(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Engine2String_find__SWIG_0(void * jarg1, char jarg2, unsigned long jarg3) {
  unsigned long jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::value_type arg2 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type arg3 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type result;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::value_type)jarg2; 
  arg3 = (Engine2::String_template< char,Engine2::StandardAllocator >::size_type)jarg3; 
  result = ((Engine2::String_template< char,Engine2::StandardAllocator > const *)arg1)->find(arg2,arg3);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Engine2String_find__SWIG_1(void * jarg1, char jarg2) {
  unsigned long jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::value_type arg2 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type result;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::value_type)jarg2; 
  result = ((Engine2::String_template< char,Engine2::StandardAllocator > const *)arg1)->find(arg2);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Engine2String_find__SWIG_2(void * jarg1, char * jarg2, unsigned long jarg3) {
  unsigned long jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::const_str arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::const_str) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type arg3 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type result;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::const_str)jarg2; 
  arg3 = (Engine2::String_template< char,Engine2::StandardAllocator >::size_type)jarg3; 
  result = ((Engine2::String_template< char,Engine2::StandardAllocator > const *)arg1)->find(arg2,arg3);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Engine2String_find__SWIG_3(void * jarg1, char * jarg2) {
  unsigned long jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::const_str arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::const_str) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type result;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::const_str)jarg2; 
  result = ((Engine2::String_template< char,Engine2::StandardAllocator > const *)arg1)->find(arg2);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Engine2String_rfind__SWIG_0(void * jarg1, char jarg2, unsigned long jarg3) {
  unsigned long jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::value_type arg2 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type arg3 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type result;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::value_type)jarg2; 
  arg3 = (Engine2::String_template< char,Engine2::StandardAllocator >::size_type)jarg3; 
  result = ((Engine2::String_template< char,Engine2::StandardAllocator > const *)arg1)->rfind(arg2,arg3);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Engine2String_rfind__SWIG_1(void * jarg1, char jarg2) {
  unsigned long jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::value_type arg2 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type result;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::value_type)jarg2; 
  result = ((Engine2::String_template< char,Engine2::StandardAllocator > const *)arg1)->rfind(arg2);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Engine2String_find_last_of__SWIG_0(void * jarg1, char jarg2, unsigned long jarg3) {
  unsigned long jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::value_type arg2 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type arg3 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type result;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::value_type)jarg2; 
  arg3 = (Engine2::String_template< char,Engine2::StandardAllocator >::size_type)jarg3; 
  result = ((Engine2::String_template< char,Engine2::StandardAllocator > const *)arg1)->find_last_of(arg2,arg3);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Engine2String_find_last_of__SWIG_1(void * jarg1, char jarg2) {
  unsigned long jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::value_type arg2 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type result;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::value_type)jarg2; 
  result = ((Engine2::String_template< char,Engine2::StandardAllocator > const *)arg1)->find_last_of(arg2);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Engine2String_find_first_of__SWIG_0(void * jarg1, char jarg2, unsigned long jarg3) {
  unsigned long jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::value_type arg2 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type arg3 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type result;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::value_type)jarg2; 
  arg3 = (Engine2::String_template< char,Engine2::StandardAllocator >::size_type)jarg3; 
  result = ((Engine2::String_template< char,Engine2::StandardAllocator > const *)arg1)->find_first_of(arg2,arg3);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Engine2String_find_first_of__SWIG_1(void * jarg1, char jarg2) {
  unsigned long jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::value_type arg2 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type result;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::value_type)jarg2; 
  result = ((Engine2::String_template< char,Engine2::StandardAllocator > const *)arg1)->find_first_of(arg2);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Engine2String_find_first_of__SWIG_2(void * jarg1, char * jarg2, unsigned long jarg3) {
  unsigned long jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::const_str arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::const_str) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type arg3 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type result;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::const_str)jarg2; 
  arg3 = (Engine2::String_template< char,Engine2::StandardAllocator >::size_type)jarg3; 
  result = ((Engine2::String_template< char,Engine2::StandardAllocator > const *)arg1)->find_first_of(arg2,arg3);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Engine2String_find_first_of__SWIG_3(void * jarg1, char * jarg2) {
  unsigned long jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::const_str arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::const_str) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type result;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::const_str)jarg2; 
  result = ((Engine2::String_template< char,Engine2::StandardAllocator > const *)arg1)->find_first_of(arg2);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Engine2String_find_first_of__SWIG_4(void * jarg1, void * jarg2, unsigned long jarg3) {
  unsigned long jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::_Self *arg2 = 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type arg3 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type result;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::_Self *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Engine2::String_template< char,Engine2::StandardAllocator >::_Self const & type is null", 0);
    return 0;
  } 
  arg3 = (Engine2::String_template< char,Engine2::StandardAllocator >::size_type)jarg3; 
  result = ((Engine2::String_template< char,Engine2::StandardAllocator > const *)arg1)->find_first_of((Engine2::String_template< char,Engine2::StandardAllocator >::_Self const &)*arg2,arg3);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Engine2String_find_first_of__SWIG_5(void * jarg1, void * jarg2) {
  unsigned long jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::_Self *arg2 = 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type result;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::_Self *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Engine2::String_template< char,Engine2::StandardAllocator >::_Self const & type is null", 0);
    return 0;
  } 
  result = ((Engine2::String_template< char,Engine2::StandardAllocator > const *)arg1)->find_first_of((Engine2::String_template< char,Engine2::StandardAllocator >::_Self const &)*arg2);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Engine2String_find_first_not_of__SWIG_0(void * jarg1, char jarg2, unsigned long jarg3) {
  unsigned long jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::value_type arg2 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type arg3 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type result;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::value_type)jarg2; 
  arg3 = (Engine2::String_template< char,Engine2::StandardAllocator >::size_type)jarg3; 
  result = ((Engine2::String_template< char,Engine2::StandardAllocator > const *)arg1)->find_first_not_of(arg2,arg3);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Engine2String_find_first_not_of__SWIG_1(void * jarg1, char jarg2) {
  unsigned long jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::value_type arg2 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type result;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::value_type)jarg2; 
  result = ((Engine2::String_template< char,Engine2::StandardAllocator > const *)arg1)->find_first_not_of(arg2);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Engine2String_find_first_not_of__SWIG_2(void * jarg1, char * jarg2, unsigned long jarg3) {
  unsigned long jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::value_type *arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::value_type *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type arg3 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type result;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::value_type *)jarg2; 
  arg3 = (Engine2::String_template< char,Engine2::StandardAllocator >::size_type)jarg3; 
  result = ((Engine2::String_template< char,Engine2::StandardAllocator > const *)arg1)->find_first_not_of((Engine2::String_template< char,Engine2::StandardAllocator >::value_type const *)arg2,arg3);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Engine2String_find_first_not_of__SWIG_3(void * jarg1, char * jarg2) {
  unsigned long jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::value_type *arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::value_type *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type result;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::value_type *)jarg2; 
  result = ((Engine2::String_template< char,Engine2::StandardAllocator > const *)arg1)->find_first_not_of((Engine2::String_template< char,Engine2::StandardAllocator >::value_type const *)arg2);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Engine2String_find_first_not_of__SWIG_4(void * jarg1, char * jarg2, unsigned long jarg3, unsigned long jarg4) {
  unsigned long jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::value_type *arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::value_type *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type arg3 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type arg4 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type result;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::value_type *)jarg2; 
  arg3 = (Engine2::String_template< char,Engine2::StandardAllocator >::size_type)jarg3; 
  arg4 = (Engine2::String_template< char,Engine2::StandardAllocator >::size_type)jarg4; 
  result = ((Engine2::String_template< char,Engine2::StandardAllocator > const *)arg1)->find_first_not_of((Engine2::String_template< char,Engine2::StandardAllocator >::value_type const *)arg2,arg3,arg4);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Engine2String_find_first_not_of__SWIG_5(void * jarg1, void * jarg2, unsigned long jarg3) {
  unsigned long jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::_Self *arg2 = 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type arg3 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type result;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::_Self *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Engine2::String_template< char,Engine2::StandardAllocator >::_Self const & type is null", 0);
    return 0;
  } 
  arg3 = (Engine2::String_template< char,Engine2::StandardAllocator >::size_type)jarg3; 
  result = ((Engine2::String_template< char,Engine2::StandardAllocator > const *)arg1)->find_first_not_of((Engine2::String_template< char,Engine2::StandardAllocator >::_Self const &)*arg2,arg3);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Engine2String_find_first_not_of__SWIG_6(void * jarg1, void * jarg2) {
  unsigned long jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::_Self *arg2 = 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type result;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::_Self *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Engine2::String_template< char,Engine2::StandardAllocator >::_Self const & type is null", 0);
    return 0;
  } 
  result = ((Engine2::String_template< char,Engine2::StandardAllocator > const *)arg1)->find_first_not_of((Engine2::String_template< char,Engine2::StandardAllocator >::_Self const &)*arg2);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Engine2String_swap(void * jarg1, void * jarg2) {
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::_Self *arg2 = 0 ;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::_Self *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Engine2::String_template< char,Engine2::StandardAllocator >::_Self & type is null", 0);
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Engine2String_FixPathToUnix(void * jarg1) {
  void * jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::_Self *result = 0 ;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  result = (Engine2::String_template< char,Engine2::StandardAllocator >::_Self *) &(arg1)->FixPathToUnix();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Engine2String_Format(void * jarg1, char * jarg2) {
  void * jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::value_type *arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::value_type *) 0 ;
  void *arg3 = 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::_Self *result = 0 ;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::value_type *)jarg2; 
  result = (Engine2::String_template< char,Engine2::StandardAllocator >::_Self *) &(arg1)->Format((Engine2::String_template< char,Engine2::StandardAllocator >::value_type const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Engine2String_MakeLower(void * jarg1) {
  void * jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::_Self *result = 0 ;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  result = (Engine2::String_template< char,Engine2::StandardAllocator >::_Self *) &(arg1)->MakeLower();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Engine2String_MakeLowerLocale(void * jarg1) {
  void * jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::_Self *result = 0 ;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  result = (Engine2::String_template< char,Engine2::StandardAllocator >::_Self *) &(arg1)->MakeLowerLocale();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Engine2String_MakeUpper(void * jarg1) {
  void * jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator > *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::_Self *result = 0 ;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator > *)jarg1; 
  result = (Engine2::String_template< char,Engine2::StandardAllocator >::_Self *) &(arg1)->MakeUpper();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Engine2String__strlen(char * jarg1) {
  unsigned long jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator >::const_str arg1 = (Engine2::String_template< char,Engine2::StandardAllocator >::const_str) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::size_type result;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator >::const_str)jarg1; 
  result = Engine2::String_template< char,Engine2::StandardAllocator >::SWIGTEMPLATEDISAMBIGUATOR _strlen((char const *)arg1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Engine2String__strchr(char * jarg1, char jarg2) {
  char * jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator >::const_str arg1 = (Engine2::String_template< char,Engine2::StandardAllocator >::const_str) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::value_type arg2 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::const_str result;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator >::const_str)jarg1; 
  arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::value_type)jarg2; 
  result = (Engine2::String_template< char,Engine2::StandardAllocator >::const_str)Engine2::String_template< char,Engine2::StandardAllocator >::SWIGTEMPLATEDISAMBIGUATOR _strchr((char const *)arg1,arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Engine2String__strstr(char * jarg1, char * jarg2) {
  char * jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator >::value_type *arg1 = (Engine2::String_template< char,Engine2::StandardAllocator >::value_type *) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::const_str arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::const_str) 0 ;
  Engine2::String_template< char,Engine2::StandardAllocator >::value_type *result = 0 ;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator >::value_type *)jarg1; 
  arg2 = (Engine2::String_template< char,Engine2::StandardAllocator >::const_str)jarg2; 
  result = (Engine2::String_template< char,Engine2::StandardAllocator >::value_type *)Engine2::String_template< char,Engine2::StandardAllocator >::SWIGTEMPLATEDISAMBIGUATOR _strstr(arg1,(char const *)arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Engine2String__IsValidString(char * jarg1) {
  unsigned int jresult ;
  Engine2::String_template< char,Engine2::StandardAllocator >::const_str arg1 = (Engine2::String_template< char,Engine2::StandardAllocator >::const_str) 0 ;
  bool result;
  
  arg1 = (Engine2::String_template< char,Engine2::StandardAllocator >::const_str)jarg1; 
  result = (bool)Engine2::String_template< char,Engine2::StandardAllocator >::SWIGTEMPLATEDISAMBIGUATOR _IsValidString((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Engine2String__usedMemory(int jarg1) {
  int jresult ;
  int arg1 ;
  int result;
  
  arg1 = (int)jarg1; 
  result = (int)Engine2::String_template< char,Engine2::StandardAllocator >::SWIGTEMPLATEDISAMBIGUATOR _usedMemory(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ENGINE2_REV_get() {
  int jresult ;
  int result;
  
  result = (int)(0x1000);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LogErrorMask_get() {
  int jresult ;
  int result;
  
  result = (int)(0x10000000);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LogNoCaretMask_get() {
  int jresult ;
  int result;
  
  result = (int)(0x01000000);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ComponentInfo_m_iParent_set(void * jarg1, unsigned int jarg2) {
  ComponentInfo *arg1 = (ComponentInfo *) 0 ;
  uint32 arg2 ;
  
  arg1 = (ComponentInfo *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->m_iParent = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ComponentInfo_m_iParent_get(void * jarg1) {
  unsigned int jresult ;
  ComponentInfo *arg1 = (ComponentInfo *) 0 ;
  uint32 result;
  
  arg1 = (ComponentInfo *)jarg1; 
  result = (uint32) ((arg1)->m_iParent);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ComponentInfo_m_strName_set(void * jarg1, char * jarg2) {
  ComponentInfo *arg1 = (ComponentInfo *) 0 ;
  char *arg2 ;
  
  arg1 = (ComponentInfo *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->m_strName, (const char *)arg2, 512-1);
      arg1->m_strName[512-1] = 0;
    } else {
      arg1->m_strName[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ComponentInfo_m_strName_get(void * jarg1) {
  char * jresult ;
  ComponentInfo *arg1 = (ComponentInfo *) 0 ;
  char *result = 0 ;
  
  arg1 = (ComponentInfo *)jarg1; 
  result = (char *)(char *) ((arg1)->m_strName);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ComponentInfo_m_iMemoryUsage_set(void * jarg1, void * jarg2) {
  ComponentInfo *arg1 = (ComponentInfo *) 0 ;
  uint64 arg2 ;
  uint64 *argp2 ;
  
  arg1 = (ComponentInfo *)jarg1; 
  argp2 = (uint64 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_iMemoryUsage = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ComponentInfo_m_iMemoryUsage_get(void * jarg1) {
  void * jresult ;
  ComponentInfo *arg1 = (ComponentInfo *) 0 ;
  uint64 result;
  
  arg1 = (ComponentInfo *)jarg1; 
  result =  ((arg1)->m_iMemoryUsage);
  jresult = new uint64((const uint64 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ComponentInfo_m_iCount_set(void * jarg1, void * jarg2) {
  ComponentInfo *arg1 = (ComponentInfo *) 0 ;
  uint64 arg2 ;
  uint64 *argp2 ;
  
  arg1 = (ComponentInfo *)jarg1; 
  argp2 = (uint64 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_iCount = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ComponentInfo_m_iCount_get(void * jarg1) {
  void * jresult ;
  ComponentInfo *arg1 = (ComponentInfo *) 0 ;
  uint64 result;
  
  arg1 = (ComponentInfo *)jarg1; 
  result =  ((arg1)->m_iCount);
  jresult = new uint64((const uint64 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ComponentInfo() {
  void * jresult ;
  ComponentInfo *result = 0 ;
  
  result = (ComponentInfo *)new ComponentInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ComponentInfo(void * jarg1) {
  ComponentInfo *arg1 = (ComponentInfo *) 0 ;
  
  arg1 = (ComponentInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SCoreStatistics_m_Components_set(void * jarg1, void * jarg2) {
  SCoreStatistics *arg1 = (SCoreStatistics *) 0 ;
  Engine2::Vector< ComponentInfo > *arg2 = (Engine2::Vector< ComponentInfo > *) 0 ;
  
  arg1 = (SCoreStatistics *)jarg1; 
  arg2 = (Engine2::Vector< ComponentInfo > *)jarg2; 
  if (arg1) (arg1)->m_Components = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SCoreStatistics_m_Components_get(void * jarg1) {
  void * jresult ;
  SCoreStatistics *arg1 = (SCoreStatistics *) 0 ;
  Engine2::Vector< ComponentInfo > *result = 0 ;
  
  arg1 = (SCoreStatistics *)jarg1; 
  result = (Engine2::Vector< ComponentInfo > *)& ((arg1)->m_Components);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SCoreStatistics() {
  void * jresult ;
  SCoreStatistics *result = 0 ;
  
  result = (SCoreStatistics *)new SCoreStatistics();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SCoreStatistics(void * jarg1) {
  SCoreStatistics *arg1 = (SCoreStatistics *) 0 ;
  
  arg1 = (SCoreStatistics *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IChangesSubscription_GetNumSubfolders(void * jarg1) {
  unsigned long jresult ;
  IChangesSubscription *arg1 = (IChangesSubscription *) 0 ;
  size_t result;
  
  arg1 = (IChangesSubscription *)jarg1; 
  result = (arg1)->GetNumSubfolders();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IChangesSubscription_GetSubfolder(void * jarg1, unsigned long jarg2) {
  char * jresult ;
  IChangesSubscription *arg1 = (IChangesSubscription *) 0 ;
  size_t arg2 ;
  char *result = 0 ;
  
  arg1 = (IChangesSubscription *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (char *)(arg1)->GetSubfolder(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IChangesSubscription_GetNumExtensions(void * jarg1) {
  unsigned long jresult ;
  IChangesSubscription *arg1 = (IChangesSubscription *) 0 ;
  size_t result;
  
  arg1 = (IChangesSubscription *)jarg1; 
  result = (arg1)->GetNumExtensions();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IChangesSubscription_GetExtension(void * jarg1, unsigned long jarg2) {
  char * jresult ;
  IChangesSubscription *arg1 = (IChangesSubscription *) 0 ;
  size_t arg2 ;
  char *result = 0 ;
  
  arg1 = (IChangesSubscription *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (char *)(arg1)->GetExtension(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IChangesSubscription_FileChanged(void * jarg1, char * jarg2) {
  IChangesSubscription *arg1 = (IChangesSubscription *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (IChangesSubscription *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->FileChanged((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IChangesSubscription(void * jarg1) {
  IChangesSubscription *arg1 = (IChangesSubscription *) 0 ;
  
  arg1 = (IChangesSubscription *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IStatisticsManager_AddTexturesReadBytesStats(void * jarg1, unsigned long jarg2) {
  IStatisticsManager *arg1 = (IStatisticsManager *) 0 ;
  size_t arg2 ;
  
  arg1 = (IStatisticsManager *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->AddTexturesReadBytesStats(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IStatisticsManager_AddModelsReadBytesStats(void * jarg1, unsigned long jarg2) {
  IStatisticsManager *arg1 = (IStatisticsManager *) 0 ;
  size_t arg2 ;
  
  arg1 = (IStatisticsManager *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->AddModelsReadBytesStats(arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IStatisticsManager_GetTexturesReadBytesStats(void * jarg1) {
  unsigned long jresult ;
  IStatisticsManager *arg1 = (IStatisticsManager *) 0 ;
  size_t result;
  
  arg1 = (IStatisticsManager *)jarg1; 
  result = (arg1)->GetTexturesReadBytesStats();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IStatisticsManager_GetModelsReadBytesStats(void * jarg1) {
  unsigned long jresult ;
  IStatisticsManager *arg1 = (IStatisticsManager *) 0 ;
  size_t result;
  
  arg1 = (IStatisticsManager *)jarg1; 
  result = (arg1)->GetModelsReadBytesStats();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IStatisticsManager_GetTotalReadBytesStats(void * jarg1) {
  unsigned long jresult ;
  IStatisticsManager *arg1 = (IStatisticsManager *) 0 ;
  size_t result;
  
  arg1 = (IStatisticsManager *)jarg1; 
  result = (arg1)->GetTotalReadBytesStats();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IStatisticsManager_DumpToLog(void * jarg1) {
  IStatisticsManager *arg1 = (IStatisticsManager *) 0 ;
  
  arg1 = (IStatisticsManager *)jarg1; 
  (arg1)->DumpToLog();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IStatisticsManager_DumpToScreen(void * jarg1) {
  IStatisticsManager *arg1 = (IStatisticsManager *) 0 ;
  
  arg1 = (IStatisticsManager *)jarg1; 
  (arg1)->DumpToScreen();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IStatisticsManager_CreateStats(void * jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  IStatisticsManager *arg1 = (IStatisticsManager *) 0 ;
  EStatsType arg2 ;
  float arg3 ;
  EStatsType *argp2 ;
  IStats *result = 0 ;
  
  arg1 = (IStatisticsManager *)jarg1; 
  argp2 = (EStatsType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EStatsType", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (float)jarg3; 
  result = (IStats *)(arg1)->CreateStats(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IStatisticsManager(void * jarg1) {
  IStatisticsManager *arg1 = (IStatisticsManager *) 0 ;
  
  arg1 = (IStatisticsManager *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ILogListener_AddError(void * jarg1, char * jarg2) {
  ILogListener *arg1 = (ILogListener *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ILogListener *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->AddError((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ILogListener_AddWarning(void * jarg1, char * jarg2) {
  ILogListener *arg1 = (ILogListener *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ILogListener *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->AddWarning((char const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ILogListener() {
  void * jresult ;
  ILogListener *result = 0 ;
  
  result = (ILogListener *)new ILogListener();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ILogListener(void * jarg1) {
  ILogListener *arg1 = (ILogListener *) 0 ;
  
  arg1 = (ILogListener *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IProfilerListener_StartLog(void * jarg1) {
  IProfilerListener *arg1 = (IProfilerListener *) 0 ;
  
  arg1 = (IProfilerListener *)jarg1; 
  (arg1)->StartLog();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IProfilerListener_AddLogMessage(void * jarg1, char * jarg2) {
  IProfilerListener *arg1 = (IProfilerListener *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (IProfilerListener *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->AddLogMessage((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IProfilerListener_EndLog(void * jarg1) {
  IProfilerListener *arg1 = (IProfilerListener *) 0 ;
  
  arg1 = (IProfilerListener *)jarg1; 
  (arg1)->EndLog();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IProfilerListener() {
  void * jresult ;
  IProfilerListener *result = 0 ;
  
  result = (IProfilerListener *)new IProfilerListener();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IProfilerListener(void * jarg1) {
  IProfilerListener *arg1 = (IProfilerListener *) 0 ;
  
  arg1 = (IProfilerListener *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ILoadingProfilerManager_EnableProfiling(void * jarg1, unsigned int jarg2) {
  ILoadingProfilerManager *arg1 = (ILoadingProfilerManager *) 0 ;
  bool arg2 ;
  
  arg1 = (ILoadingProfilerManager *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->EnableProfiling(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ILoadingProfilerManager_DumpStatsToXML(void * jarg1, char * jarg2) {
  ILoadingProfilerManager *arg1 = (ILoadingProfilerManager *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ILoadingProfilerManager *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->DumpStatsToXML((char const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ILoadingProfilerManager_DumpStatsToString(void * jarg1) {
  void * jresult ;
  ILoadingProfilerManager *arg1 = (ILoadingProfilerManager *) 0 ;
  Engine2::String result;
  
  arg1 = (ILoadingProfilerManager *)jarg1; 
  result = (arg1)->DumpStatsToString();
  jresult = new Engine2::String((const Engine2::String &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ILoadingProfilerManager_StartLoadingSection(void * jarg1, char * jarg2, char * jarg3) {
  int jresult ;
  ILoadingProfilerManager *arg1 = (ILoadingProfilerManager *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  arg1 = (ILoadingProfilerManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (int)(arg1)->StartLoadingSection((char const *)arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ILoadingProfilerManager_EndLoadingSection(void * jarg1, int jarg2, double jarg3) {
  ILoadingProfilerManager *arg1 = (ILoadingProfilerManager *) 0 ;
  int arg2 ;
  double arg3 ;
  
  arg1 = (ILoadingProfilerManager *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->EndLoadingSection(arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ILoadingProfilerManager_StartProfilerInfo(void * jarg1, char * jarg2, char * jarg3) {
  int jresult ;
  ILoadingProfilerManager *arg1 = (ILoadingProfilerManager *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  arg1 = (ILoadingProfilerManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (int)(arg1)->StartProfilerInfo((char const *)arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ILoadingProfilerManager_EndProfilerInfo(void * jarg1, int jarg2, double jarg3) {
  ILoadingProfilerManager *arg1 = (ILoadingProfilerManager *) 0 ;
  int arg2 ;
  double arg3 ;
  
  arg1 = (ILoadingProfilerManager *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->EndProfilerInfo(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ILoadingProfilerManager_Clear(void * jarg1) {
  ILoadingProfilerManager *arg1 = (ILoadingProfilerManager *) 0 ;
  
  arg1 = (ILoadingProfilerManager *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ILoadingProfilerManager(void * jarg1) {
  ILoadingProfilerManager *arg1 = (ILoadingProfilerManager *) 0 ;
  
  arg1 = (ILoadingProfilerManager *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IDebugInformationManager_LoadParam(void * jarg1, void * jarg2) {
  IDebugInformationManager *arg1 = (IDebugInformationManager *) 0 ;
  CParam *arg2 = (CParam *) 0 ;
  
  arg1 = (IDebugInformationManager *)jarg1; 
  arg2 = (CParam *)jarg2; 
  (arg1)->LoadParam(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IDebugInformationManager_AddDebugParam(void * jarg1, void * jarg2, char * jarg3) {
  IDebugInformationManager *arg1 = (IDebugInformationManager *) 0 ;
  CParam *arg2 = (CParam *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (IDebugInformationManager *)jarg1; 
  arg2 = (CParam *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->AddDebugParam(arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IDebugInformationManager_RemoveDebugParam(void * jarg1, void * jarg2) {
  IDebugInformationManager *arg1 = (IDebugInformationManager *) 0 ;
  CParam *arg2 = (CParam *) 0 ;
  
  arg1 = (IDebugInformationManager *)jarg1; 
  arg2 = (CParam *)jarg2; 
  (arg1)->RemoveDebugParam(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IDebugInformationManager_GetDebugParamNums(void * jarg1) {
  unsigned int jresult ;
  IDebugInformationManager *arg1 = (IDebugInformationManager *) 0 ;
  uint32 result;
  
  arg1 = (IDebugInformationManager *)jarg1; 
  result = (uint32)(arg1)->GetDebugParamNums();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IDebugInformationManager_GetDebugParamSection(void * jarg1, unsigned int jarg2) {
  char * jresult ;
  IDebugInformationManager *arg1 = (IDebugInformationManager *) 0 ;
  uint32 arg2 ;
  char *result = 0 ;
  
  arg1 = (IDebugInformationManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (char *)(arg1)->GetDebugParamSection(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IDebugInformationManager_GetDebugParam(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  IDebugInformationManager *arg1 = (IDebugInformationManager *) 0 ;
  uint32 arg2 ;
  CParam *result = 0 ;
  
  arg1 = (IDebugInformationManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (CParam *)(arg1)->GetDebugParam(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IDebugInformationManager_GetDebugParamByName(void * jarg1, char * jarg2) {
  void * jresult ;
  IDebugInformationManager *arg1 = (IDebugInformationManager *) 0 ;
  char *arg2 = (char *) 0 ;
  CParam *result = 0 ;
  
  arg1 = (IDebugInformationManager *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (CParam *)(arg1)->GetDebugParamByName((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IDebugInformationManager_ExecuteString(void * jarg1, char * jarg2) {
  IDebugInformationManager *arg1 = (IDebugInformationManager *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (IDebugInformationManager *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->ExecuteString((char const *)arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_IDebugInformationManager_GetNumCVars(void * jarg1) {
  int jresult ;
  IDebugInformationManager *arg1 = (IDebugInformationManager *) 0 ;
  int result;
  
  arg1 = (IDebugInformationManager *)jarg1; 
  result = (int)(arg1)->GetNumCVars();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IDebugInformationManager_GetCVarName(void * jarg1, int jarg2) {
  char * jresult ;
  IDebugInformationManager *arg1 = (IDebugInformationManager *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  arg1 = (IDebugInformationManager *)jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)(arg1)->GetCVarName(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IDebugInformationManager_GetCVarValue(void * jarg1, int jarg2) {
  char * jresult ;
  IDebugInformationManager *arg1 = (IDebugInformationManager *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  arg1 = (IDebugInformationManager *)jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)(arg1)->GetCVarValue(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IDebugInformationManager_GetCVarType(void * jarg1, int jarg2) {
  char * jresult ;
  IDebugInformationManager *arg1 = (IDebugInformationManager *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  arg1 = (IDebugInformationManager *)jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)(arg1)->GetCVarType(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IDebugInformationManager_SetDebugParamInt(void * jarg1, char * jarg2, int jarg3) {
  unsigned int jresult ;
  IDebugInformationManager *arg1 = (IDebugInformationManager *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (IDebugInformationManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->SetDebugParamInt((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IDebugInformationManager_SetDebugParamFloat(void * jarg1, char * jarg2, float jarg3) {
  unsigned int jresult ;
  IDebugInformationManager *arg1 = (IDebugInformationManager *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  bool result;
  
  arg1 = (IDebugInformationManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (float)jarg3; 
  result = (bool)(arg1)->SetDebugParamFloat((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IDebugInformationManager_SetDebugParamString(void * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  IDebugInformationManager *arg1 = (IDebugInformationManager *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = (IDebugInformationManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (bool)(arg1)->SetDebugParamString((char const *)arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IDebugInformationManager(void * jarg1) {
  IDebugInformationManager *arg1 = (IDebugInformationManager *) 0 ;
  
  arg1 = (IDebugInformationManager *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IPerformanceProfilerManager_StartProfilerInfo(void * jarg1, char * jarg2, char * jarg3) {
  int jresult ;
  IPerformanceProfilerManager *arg1 = (IPerformanceProfilerManager *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  arg1 = (IPerformanceProfilerManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (int)(arg1)->StartProfilerInfo((char const *)arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IPerformanceProfilerManager_EndProfilerInfo(void * jarg1, int jarg2, double jarg3) {
  IPerformanceProfilerManager *arg1 = (IPerformanceProfilerManager *) 0 ;
  int arg2 ;
  double arg3 ;
  
  arg1 = (IPerformanceProfilerManager *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->EndProfilerInfo(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IPerformanceProfilerManager_DumpProfilerInfoToLog(void * jarg1) {
  IPerformanceProfilerManager *arg1 = (IPerformanceProfilerManager *) 0 ;
  
  arg1 = (IPerformanceProfilerManager *)jarg1; 
  (arg1)->DumpProfilerInfoToLog();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IPerformanceProfilerManager_SetProfilerListener(void * jarg1, void * jarg2) {
  IPerformanceProfilerManager *arg1 = (IPerformanceProfilerManager *) 0 ;
  IProfilerListener *arg2 = (IProfilerListener *) 0 ;
  
  arg1 = (IPerformanceProfilerManager *)jarg1; 
  arg2 = (IProfilerListener *)jarg2; 
  (arg1)->SetProfilerListener(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IPerformanceProfilerManager(void * jarg1) {
  IPerformanceProfilerManager *arg1 = (IPerformanceProfilerManager *) 0 ;
  
  arg1 = (IPerformanceProfilerManager *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IConfigFile_GetGameType(void * jarg1) {
  char * jresult ;
  IConfigFile *arg1 = (IConfigFile *) 0 ;
  char *result = 0 ;
  
  arg1 = (IConfigFile *)jarg1; 
  result = (char *)(arg1)->GetGameType();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IConfigFile_GetPath(void * jarg1, char * jarg2) {
  char * jresult ;
  IConfigFile *arg1 = (IConfigFile *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  arg1 = (IConfigFile *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (char *)(arg1)->GetPath((char const *)arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IConfigFile_GetTexturesPathCount(void * jarg1) {
  unsigned int jresult ;
  IConfigFile *arg1 = (IConfigFile *) 0 ;
  uint32 result;
  
  arg1 = (IConfigFile *)jarg1; 
  result = (uint32)(arg1)->GetTexturesPathCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IConfigFile_GetTexturesPath(void * jarg1, unsigned int jarg2) {
  char * jresult ;
  IConfigFile *arg1 = (IConfigFile *) 0 ;
  uint32 arg2 ;
  char *result = 0 ;
  
  arg1 = (IConfigFile *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (char *)(arg1)->GetTexturesPath(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IConfigFile_GetModelsPathCount(void * jarg1) {
  unsigned int jresult ;
  IConfigFile *arg1 = (IConfigFile *) 0 ;
  uint32 result;
  
  arg1 = (IConfigFile *)jarg1; 
  result = (uint32)(arg1)->GetModelsPathCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IConfigFile_GetModelsPath(void * jarg1, unsigned int jarg2) {
  char * jresult ;
  IConfigFile *arg1 = (IConfigFile *) 0 ;
  uint32 arg2 ;
  char *result = 0 ;
  
  arg1 = (IConfigFile *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (char *)(arg1)->GetModelsPath(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IConfigFile_GetTerrainPath(void * jarg1) {
  char * jresult ;
  IConfigFile *arg1 = (IConfigFile *) 0 ;
  char *result = 0 ;
  
  arg1 = (IConfigFile *)jarg1; 
  result = (char *)(arg1)->GetTerrainPath();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IConfigFile_GetEffectsPathCount(void * jarg1) {
  unsigned int jresult ;
  IConfigFile *arg1 = (IConfigFile *) 0 ;
  uint32 result;
  
  arg1 = (IConfigFile *)jarg1; 
  result = (uint32)(arg1)->GetEffectsPathCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IConfigFile_GetEffectsPath(void * jarg1, unsigned int jarg2) {
  char * jresult ;
  IConfigFile *arg1 = (IConfigFile *) 0 ;
  uint32 arg2 ;
  char *result = 0 ;
  
  arg1 = (IConfigFile *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (char *)(arg1)->GetEffectsPath(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IConfigFile_GetEffectsWritePath(void * jarg1) {
  char * jresult ;
  IConfigFile *arg1 = (IConfigFile *) 0 ;
  char *result = 0 ;
  
  arg1 = (IConfigFile *)jarg1; 
  result = (char *)(arg1)->GetEffectsWritePath();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IConfigFile_GetScriptsPathCount(void * jarg1) {
  unsigned int jresult ;
  IConfigFile *arg1 = (IConfigFile *) 0 ;
  uint32 result;
  
  arg1 = (IConfigFile *)jarg1; 
  result = (uint32)(arg1)->GetScriptsPathCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IConfigFile_GetScriptsPath(void * jarg1, unsigned int jarg2) {
  char * jresult ;
  IConfigFile *arg1 = (IConfigFile *) 0 ;
  uint32 arg2 ;
  char *result = 0 ;
  
  arg1 = (IConfigFile *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (char *)(arg1)->GetScriptsPath(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IConfigFile_GetSoundPath(void * jarg1) {
  char * jresult ;
  IConfigFile *arg1 = (IConfigFile *) 0 ;
  char *result = 0 ;
  
  arg1 = (IConfigFile *)jarg1; 
  result = (char *)(arg1)->GetSoundPath();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IConfigFile_GetDataFolder(void * jarg1) {
  char * jresult ;
  IConfigFile *arg1 = (IConfigFile *) 0 ;
  char *result = 0 ;
  
  arg1 = (IConfigFile *)jarg1; 
  result = (char *)(arg1)->GetDataFolder();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IConfigFile_GetGameDialog(void * jarg1) {
  char * jresult ;
  IConfigFile *arg1 = (IConfigFile *) 0 ;
  char *result = 0 ;
  
  arg1 = (IConfigFile *)jarg1; 
  result = (char *)(arg1)->GetGameDialog();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IConfigFile_GetAnimationFolder(void * jarg1) {
  char * jresult ;
  IConfigFile *arg1 = (IConfigFile *) 0 ;
  char *result = 0 ;
  
  arg1 = (IConfigFile *)jarg1; 
  result = (char *)(arg1)->GetAnimationFolder();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IConfigFile_GetParticlesPathCount(void * jarg1) {
  unsigned int jresult ;
  IConfigFile *arg1 = (IConfigFile *) 0 ;
  uint32 result;
  
  arg1 = (IConfigFile *)jarg1; 
  result = (uint32)(arg1)->GetParticlesPathCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IConfigFile_GetParticlesPath(void * jarg1, unsigned int jarg2) {
  char * jresult ;
  IConfigFile *arg1 = (IConfigFile *) 0 ;
  uint32 arg2 ;
  char *result = 0 ;
  
  arg1 = (IConfigFile *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (char *)(arg1)->GetParticlesPath(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IConfigFile_LoadConfigFromFile__SWIG_0(void * jarg1, char * jarg2, void * jarg3, int jarg4) {
  int jresult ;
  IConfigFile *arg1 = (IConfigFile *) 0 ;
  char *arg2 = (char *) 0 ;
  CParam *arg3 = (CParam *) 0 ;
  int arg4 ;
  BOOL result;
  
  arg1 = (IConfigFile *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (CParam *)jarg3; 
  arg4 = (int)jarg4; 
  result = (BOOL)(arg1)->LoadConfigFromFile((char const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IConfigFile_LoadConfigFromFile__SWIG_1(void * jarg1, char * jarg2, void * jarg3) {
  int jresult ;
  IConfigFile *arg1 = (IConfigFile *) 0 ;
  char *arg2 = (char *) 0 ;
  CParam *arg3 = (CParam *) 0 ;
  BOOL result;
  
  arg1 = (IConfigFile *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (CParam *)jarg3; 
  result = (BOOL)(arg1)->LoadConfigFromFile((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IConfigFile_LoadConfigFromFile__SWIG_2(void * jarg1, char * jarg2) {
  int jresult ;
  IConfigFile *arg1 = (IConfigFile *) 0 ;
  char *arg2 = (char *) 0 ;
  BOOL result;
  
  arg1 = (IConfigFile *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (BOOL)(arg1)->LoadConfigFromFile((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IConfigFile_LoadRenderConfig(void * jarg1, char * jarg2) {
  int jresult ;
  IConfigFile *arg1 = (IConfigFile *) 0 ;
  char *arg2 = (char *) 0 ;
  BOOL result;
  
  arg1 = (IConfigFile *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (BOOL)(arg1)->LoadRenderConfig((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IConfigFile_SaveConfig(void * jarg1) {
  IConfigFile *arg1 = (IConfigFile *) 0 ;
  
  arg1 = (IConfigFile *)jarg1; 
  (arg1)->SaveConfig();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IConfigFile_GetConfigXML(void * jarg1) {
  void * jresult ;
  IConfigFile *arg1 = (IConfigFile *) 0 ;
  CXmlElement *result = 0 ;
  
  arg1 = (IConfigFile *)jarg1; 
  result = (CXmlElement *)(arg1)->GetConfigXML();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IConfigFile(void * jarg1) {
  IConfigFile *arg1 = (IConfigFile *) 0 ;
  
  arg1 = (IConfigFile *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ILogManager_RegisterListener(void * jarg1, void * jarg2) {
  ILogManager *arg1 = (ILogManager *) 0 ;
  ILogListener *arg2 = (ILogListener *) 0 ;
  
  arg1 = (ILogManager *)jarg1; 
  arg2 = (ILogListener *)jarg2; 
  (arg1)->RegisterListener(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ILogManager_AddToLog(void * jarg1, unsigned int jarg2, char * jarg3) {
  ILogManager *arg1 = (ILogManager *) 0 ;
  uint32 arg2 ;
  char *arg3 = (char *) 0 ;
  void *arg4 = 0 ;
  
  arg1 = (ILogManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->AddToLog(arg2,(char const *)arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ILogManager_SetLastErrorLogging(void * jarg1, unsigned int jarg2) {
  ILogManager *arg1 = (ILogManager *) 0 ;
  bool arg2 ;
  
  arg1 = (ILogManager *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetLastErrorLogging(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ILogManager_GetLastErrorCount(void * jarg1) {
  unsigned int jresult ;
  ILogManager *arg1 = (ILogManager *) 0 ;
  uint32 result;
  
  arg1 = (ILogManager *)jarg1; 
  result = (uint32)(arg1)->GetLastErrorCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ILogManager_GetLastError(void * jarg1, unsigned int jarg2) {
  char * jresult ;
  ILogManager *arg1 = (ILogManager *) 0 ;
  uint32 arg2 ;
  char *result = 0 ;
  
  arg1 = (ILogManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (char *)(arg1)->GetLastError(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ILogManager_ClearLastErrorList(void * jarg1) {
  ILogManager *arg1 = (ILogManager *) 0 ;
  
  arg1 = (ILogManager *)jarg1; 
  (arg1)->ClearLastErrorList();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ILogManager_SetLogCallback(void * jarg1, void * jarg2) {
  ILogManager *arg1 = (ILogManager *) 0 ;
  pLoggingFunction *arg2 = (pLoggingFunction *) 0 ;
  
  arg1 = (ILogManager *)jarg1; 
  arg2 = (pLoggingFunction *)jarg2; 
  (arg1)->SetLogCallback(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ILogManager_GetLastRenderError(void * jarg1) {
  int jresult ;
  ILogManager *arg1 = (ILogManager *) 0 ;
  ERendererError result;
  
  arg1 = (ILogManager *)jarg1; 
  result = (ERendererError)(arg1)->GetLastRenderError();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ILogManager_SetLastRenderError(void * jarg1, int jarg2) {
  ILogManager *arg1 = (ILogManager *) 0 ;
  ERendererError arg2 ;
  
  arg1 = (ILogManager *)jarg1; 
  arg2 = (ERendererError)jarg2; 
  (arg1)->SetLastRenderError(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ILogManager(void * jarg1) {
  ILogManager *arg1 = (ILogManager *) 0 ;
  
  arg1 = (ILogManager *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ICore(void * jarg1) {
  ICore *arg1 = (ICore *) 0 ;
  
  arg1 = (ICore *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ICore_Close(void * jarg1) {
  ICore *arg1 = (ICore *) 0 ;
  
  arg1 = (ICore *)jarg1; 
  (arg1)->Close();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ICore_ParseConsoleParams(void * jarg1, char * jarg2) {
  void * jresult ;
  ICore *arg1 = (ICore *) 0 ;
  char *arg2 = (char *) 0 ;
  HRESULT result;
  
  arg1 = (ICore *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (arg1)->ParseConsoleParams((char const *)arg2);
  jresult = new HRESULT((const HRESULT &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ICore_Init__SWIG_0(void * jarg1, void * jarg2, char * jarg3, void * jarg4) {
  unsigned int jresult ;
  ICore *arg1 = (ICore *) 0 ;
  HINSTANCE arg2 ;
  char *arg3 = (char *) 0 ;
  HICON arg4 ;
  HINSTANCE *argp2 ;
  HICON *argp4 ;
  bool result;
  
  arg1 = (ICore *)jarg1; 
  argp2 = (HINSTANCE *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HINSTANCE", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (char *)jarg3; 
  argp4 = (HICON *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HICON", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (bool)(arg1)->Init(arg2,(char const *)arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ICore_Init__SWIG_1(void * jarg1, void * jarg2, char * jarg3) {
  unsigned int jresult ;
  ICore *arg1 = (ICore *) 0 ;
  HINSTANCE arg2 ;
  char *arg3 = (char *) 0 ;
  HINSTANCE *argp2 ;
  bool result;
  
  arg1 = (ICore *)jarg1; 
  argp2 = (HINSTANCE *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HINSTANCE", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (char *)jarg3; 
  result = (bool)(arg1)->Init(arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ICore_Init__SWIG_2(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ICore *arg1 = (ICore *) 0 ;
  HINSTANCE arg2 ;
  HINSTANCE *argp2 ;
  bool result;
  
  arg1 = (ICore *)jarg1; 
  argp2 = (HINSTANCE *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HINSTANCE", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->Init(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ICore_Init__SWIG_3(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ICore *arg1 = (ICore *) 0 ;
  CXmlElement *arg2 = (CXmlElement *) 0 ;
  bool result;
  
  arg1 = (ICore *)jarg1; 
  arg2 = (CXmlElement *)jarg2; 
  result = (bool)(arg1)->Init(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ICore_Run(void * jarg1) {
  int jresult ;
  ICore *arg1 = (ICore *) 0 ;
  int result;
  
  arg1 = (ICore *)jarg1; 
  result = (int)(arg1)->Run();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ICore_Frame__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  ICore *arg1 = (ICore *) 0 ;
  bool arg2 ;
  HRESULT result;
  
  arg1 = (ICore *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (arg1)->Frame(arg2);
  jresult = new HRESULT((const HRESULT &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ICore_Frame__SWIG_1(void * jarg1) {
  void * jresult ;
  ICore *arg1 = (ICore *) 0 ;
  HRESULT result;
  
  arg1 = (ICore *)jarg1; 
  result = (arg1)->Frame();
  jresult = new HRESULT((const HRESULT &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ICore_AddWindow(void * jarg1) {
  void * jresult ;
  ICore *arg1 = (ICore *) 0 ;
  IWindow *result = 0 ;
  
  arg1 = (ICore *)jarg1; 
  result = (IWindow *)(arg1)->AddWindow();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ICore_GetWindow(void * jarg1) {
  void * jresult ;
  ICore *arg1 = (ICore *) 0 ;
  IWindow *result = 0 ;
  
  arg1 = (ICore *)jarg1; 
  result = (IWindow *)(arg1)->GetWindow();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ICore_SetInitialWindowParameters(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, int jarg6, int jarg7) {
  ICore *arg1 = (ICore *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  BOOL arg7 ;
  
  arg1 = (ICore *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (BOOL)jarg7; 
  (arg1)->SetInitialWindowParameters(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ICore_GetLoadingProfiler(void * jarg1) {
  void * jresult ;
  ICore *arg1 = (ICore *) 0 ;
  ILoadingProfilerManager *result = 0 ;
  
  arg1 = (ICore *)jarg1; 
  result = (ILoadingProfilerManager *)(arg1)->GetLoadingProfiler();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ICore_GetPerformanceProfiler(void * jarg1) {
  void * jresult ;
  ICore *arg1 = (ICore *) 0 ;
  IPerformanceProfilerManager *result = 0 ;
  
  arg1 = (ICore *)jarg1; 
  result = (IPerformanceProfilerManager *)(arg1)->GetPerformanceProfiler();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ICore_GetVFSManager(void * jarg1) {
  void * jresult ;
  ICore *arg1 = (ICore *) 0 ;
  IVFSFileManager *result = 0 ;
  
  arg1 = (ICore *)jarg1; 
  result = (IVFSFileManager *)(arg1)->GetVFSManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ICore_GetStreamingEngine(void * jarg1, int jarg2) {
  void * jresult ;
  ICore *arg1 = (ICore *) 0 ;
  int arg2 ;
  IStreamEngine *result = 0 ;
  
  arg1 = (ICore *)jarg1; 
  arg2 = (int)jarg2; 
  result = (IStreamEngine *)(arg1)->GetStreamingEngine(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ICore_GetConfigFile(void * jarg1) {
  void * jresult ;
  ICore *arg1 = (ICore *) 0 ;
  IConfigFile *result = 0 ;
  
  arg1 = (ICore *)jarg1; 
  result = (IConfigFile *)(arg1)->GetConfigFile();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ICore_GetDebugInformationManager(void * jarg1) {
  void * jresult ;
  ICore *arg1 = (ICore *) 0 ;
  IDebugInformationManager *result = 0 ;
  
  arg1 = (ICore *)jarg1; 
  result = (IDebugInformationManager *)(arg1)->GetDebugInformationManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ICore_GetStatisticsManager(void * jarg1) {
  void * jresult ;
  ICore *arg1 = (ICore *) 0 ;
  IStatisticsManager *result = 0 ;
  
  arg1 = (ICore *)jarg1; 
  result = (IStatisticsManager *)(arg1)->GetStatisticsManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ICore_GetControlsManager(void * jarg1) {
  void * jresult ;
  ICore *arg1 = (ICore *) 0 ;
  IControlsManager *result = 0 ;
  
  arg1 = (ICore *)jarg1; 
  result = (IControlsManager *)(arg1)->GetControlsManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ICore_GetLogManager(void * jarg1) {
  void * jresult ;
  ICore *arg1 = (ICore *) 0 ;
  ILogManager *result = 0 ;
  
  arg1 = (ICore *)jarg1; 
  result = (ILogManager *)(arg1)->GetLogManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ICore_GetInputEngine(void * jarg1) {
  void * jresult ;
  ICore *arg1 = (ICore *) 0 ;
  IInput *result = 0 ;
  
  arg1 = (ICore *)jarg1; 
  result = (IInput *)(arg1)->GetInputEngine();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ICore_GetEntitySystem(void * jarg1) {
  void * jresult ;
  ICore *arg1 = (ICore *) 0 ;
  IEntitySystem *result = 0 ;
  
  arg1 = (ICore *)jarg1; 
  result = (IEntitySystem *)(arg1)->GetEntitySystem();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ICore_GetScene(void * jarg1) {
  void * jresult ;
  ICore *arg1 = (ICore *) 0 ;
  IScene *result = 0 ;
  
  arg1 = (ICore *)jarg1; 
  result = (IScene *)(arg1)->GetScene();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ICore_AddScene(void * jarg1) {
  int jresult ;
  ICore *arg1 = (ICore *) 0 ;
  int result;
  
  arg1 = (ICore *)jarg1; 
  result = (int)(arg1)->AddScene();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ICore_RemoveScene(void * jarg1, int jarg2) {
  ICore *arg1 = (ICore *) 0 ;
  int arg2 ;
  
  arg1 = (ICore *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->RemoveScene(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ICore_GetActiveSceneID(void * jarg1) {
  int jresult ;
  ICore *arg1 = (ICore *) 0 ;
  int result;
  
  arg1 = (ICore *)jarg1; 
  result = (int)(arg1)->GetActiveSceneID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ICore_SetActiveScene(void * jarg1, int jarg2) {
  unsigned int jresult ;
  ICore *arg1 = (ICore *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (ICore *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->SetActiveScene(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ICore_SetGameMod(void * jarg1, void * jarg2) {
  int jresult ;
  ICore *arg1 = (ICore *) 0 ;
  IGameMod *arg2 = (IGameMod *) 0 ;
  BOOL result;
  
  arg1 = (ICore *)jarg1; 
  arg2 = (IGameMod *)jarg2; 
  result = (BOOL)(arg1)->SetGameMod(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ICore_GetGameMod(void * jarg1) {
  void * jresult ;
  ICore *arg1 = (ICore *) 0 ;
  IGameMod *result = 0 ;
  
  arg1 = (ICore *)jarg1; 
  result = (IGameMod *)(arg1)->GetGameMod();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ICore_RegisterSubscription(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ICore *arg1 = (ICore *) 0 ;
  IChangesSubscription *arg2 = (IChangesSubscription *) 0 ;
  bool result;
  
  arg1 = (ICore *)jarg1; 
  arg2 = (IChangesSubscription *)jarg2; 
  result = (bool)(arg1)->RegisterSubscription(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ICore_UnregisterSubscription(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ICore *arg1 = (ICore *) 0 ;
  IChangesSubscription *arg2 = (IChangesSubscription *) 0 ;
  bool result;
  
  arg1 = (ICore *)jarg1; 
  arg2 = (IChangesSubscription *)jarg2; 
  result = (bool)(arg1)->UnregisterSubscription(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ICore_LoadRenderConfig(void * jarg1, char * jarg2) {
  int jresult ;
  ICore *arg1 = (ICore *) 0 ;
  char *arg2 = (char *) 0 ;
  BOOL result;
  
  arg1 = (ICore *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (BOOL)(arg1)->LoadRenderConfig((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CreateCore__SWIG_0(int jarg1, char * jarg2) {
  void * jresult ;
  eStartGameType arg1 ;
  char *arg2 = (char *) 0 ;
  ICore *result = 0 ;
  
  arg1 = (eStartGameType)jarg1; 
  arg2 = (char *)jarg2; 
  result = (ICore *)CreateCore(arg1,(char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CreateCore__SWIG_1(int jarg1) {
  void * jresult ;
  eStartGameType arg1 ;
  ICore *result = 0 ;
  
  arg1 = (eStartGameType)jarg1; 
  result = (ICore *)CreateCore(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DeleteCore(void * jarg1) {
  ICore *arg1 = (ICore *) 0 ;
  
  arg1 = (ICore *)jarg1; 
  DeleteCore(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AutoProfilerGuard(char * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  ICore *arg3 = (ICore *) 0 ;
  AutoProfilerGuard *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (ICore *)jarg3; 
  result = (AutoProfilerGuard *)new AutoProfilerGuard((char const *)arg1,(char const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_AutoProfilerGuard_GetTime(void * jarg1) {
  double jresult ;
  AutoProfilerGuard *arg1 = (AutoProfilerGuard *) 0 ;
  double result;
  
  arg1 = (AutoProfilerGuard *)jarg1; 
  result = (double)(arg1)->GetTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AutoProfilerGuard(void * jarg1) {
  AutoProfilerGuard *arg1 = (AutoProfilerGuard *) 0 ;
  
  arg1 = (AutoProfilerGuard *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AutoLoadingSectionGuard(char * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  ICore *arg3 = (ICore *) 0 ;
  AutoLoadingSectionGuard *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (ICore *)jarg3; 
  result = (AutoLoadingSectionGuard *)new AutoLoadingSectionGuard((char const *)arg1,(char const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AutoLoadingSectionGuard(void * jarg1) {
  AutoLoadingSectionGuard *arg1 = (AutoLoadingSectionGuard *) 0 ;
  
  arg1 = (AutoLoadingSectionGuard *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AutoLoadingProfilerGuard(char * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  ICore *arg3 = (ICore *) 0 ;
  AutoLoadingProfilerGuard *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (ICore *)jarg3; 
  result = (AutoLoadingProfilerGuard *)new AutoLoadingProfilerGuard((char const *)arg1,(char const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AutoLoadingProfilerGuard(void * jarg1) {
  AutoLoadingProfilerGuard *arg1 = (AutoLoadingProfilerGuard *) 0 ;
  
  arg1 = (AutoLoadingProfilerGuard *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameModImport_pArray_set(void * jarg1, void * jarg2) {
  GameModImport *arg1 = (GameModImport *) 0 ;
  IMeshArray *arg2 = (IMeshArray *) 0 ;
  
  arg1 = (GameModImport *)jarg1; 
  arg2 = (IMeshArray *)jarg2; 
  if (arg1) (arg1)->pArray = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameModImport_pArray_get(void * jarg1) {
  void * jresult ;
  GameModImport *arg1 = (GameModImport *) 0 ;
  IMeshArray *result = 0 ;
  
  arg1 = (GameModImport *)jarg1; 
  result = (IMeshArray *) ((arg1)->pArray);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameModImport_pRender_set(void * jarg1, void * jarg2) {
  GameModImport *arg1 = (GameModImport *) 0 ;
  IRender *arg2 = (IRender *) 0 ;
  
  arg1 = (GameModImport *)jarg1; 
  arg2 = (IRender *)jarg2; 
  if (arg1) (arg1)->pRender = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameModImport_pRender_get(void * jarg1) {
  void * jresult ;
  GameModImport *arg1 = (GameModImport *) 0 ;
  IRender *result = 0 ;
  
  arg1 = (GameModImport *)jarg1; 
  result = (IRender *) ((arg1)->pRender);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameModImport_pScene_set(void * jarg1, void * jarg2) {
  GameModImport *arg1 = (GameModImport *) 0 ;
  IScene *arg2 = (IScene *) 0 ;
  
  arg1 = (GameModImport *)jarg1; 
  arg2 = (IScene *)jarg2; 
  if (arg1) (arg1)->pScene = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameModImport_pScene_get(void * jarg1) {
  void * jresult ;
  GameModImport *arg1 = (GameModImport *) 0 ;
  IScene *result = 0 ;
  
  arg1 = (GameModImport *)jarg1; 
  result = (IScene *) ((arg1)->pScene);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameModImport_pCore_set(void * jarg1, void * jarg2) {
  GameModImport *arg1 = (GameModImport *) 0 ;
  ICore *arg2 = (ICore *) 0 ;
  
  arg1 = (GameModImport *)jarg1; 
  arg2 = (ICore *)jarg2; 
  if (arg1) (arg1)->pCore = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameModImport_pCore_get(void * jarg1) {
  void * jresult ;
  GameModImport *arg1 = (GameModImport *) 0 ;
  ICore *result = 0 ;
  
  arg1 = (GameModImport *)jarg1; 
  result = (ICore *) ((arg1)->pCore);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameModImport_pSoundLib_set(void * jarg1, void * jarg2) {
  GameModImport *arg1 = (GameModImport *) 0 ;
  ISoundLib *arg2 = (ISoundLib *) 0 ;
  
  arg1 = (GameModImport *)jarg1; 
  arg2 = (ISoundLib *)jarg2; 
  if (arg1) (arg1)->pSoundLib = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameModImport_pSoundLib_get(void * jarg1) {
  void * jresult ;
  GameModImport *arg1 = (GameModImport *) 0 ;
  ISoundLib *result = 0 ;
  
  arg1 = (GameModImport *)jarg1; 
  result = (ISoundLib *) ((arg1)->pSoundLib);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameModImport_pControlsManager_set(void * jarg1, void * jarg2) {
  GameModImport *arg1 = (GameModImport *) 0 ;
  IControlsManager *arg2 = (IControlsManager *) 0 ;
  
  arg1 = (GameModImport *)jarg1; 
  arg2 = (IControlsManager *)jarg2; 
  if (arg1) (arg1)->pControlsManager = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameModImport_pControlsManager_get(void * jarg1) {
  void * jresult ;
  GameModImport *arg1 = (GameModImport *) 0 ;
  IControlsManager *result = 0 ;
  
  arg1 = (GameModImport *)jarg1; 
  result = (IControlsManager *) ((arg1)->pControlsManager);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameModImport_pConsole_set(void * jarg1, void * jarg2) {
  GameModImport *arg1 = (GameModImport *) 0 ;
  CXmlParams *arg2 = (CXmlParams *) 0 ;
  
  arg1 = (GameModImport *)jarg1; 
  arg2 = (CXmlParams *)jarg2; 
  if (arg1) (arg1)->pConsole = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameModImport_pConsole_get(void * jarg1) {
  void * jresult ;
  GameModImport *arg1 = (GameModImport *) 0 ;
  CXmlParams *result = 0 ;
  
  arg1 = (GameModImport *)jarg1; 
  result = (CXmlParams *) ((arg1)->pConsole);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameModImport_pGameConfig_set(void * jarg1, void * jarg2) {
  GameModImport *arg1 = (GameModImport *) 0 ;
  CXmlElement *arg2 = (CXmlElement *) 0 ;
  
  arg1 = (GameModImport *)jarg1; 
  arg2 = (CXmlElement *)jarg2; 
  if (arg1) (arg1)->pGameConfig = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameModImport_pGameConfig_get(void * jarg1) {
  void * jresult ;
  GameModImport *arg1 = (GameModImport *) 0 ;
  CXmlElement *result = 0 ;
  
  arg1 = (GameModImport *)jarg1; 
  result = (CXmlElement *) ((arg1)->pGameConfig);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GameModImport() {
  void * jresult ;
  GameModImport *result = 0 ;
  
  result = (GameModImport *)new GameModImport();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GameModImport(void * jarg1) {
  GameModImport *arg1 = (GameModImport *) 0 ;
  
  arg1 = (GameModImport *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IGameMod(void * jarg1) {
  IGameMod *arg1 = (IGameMod *) 0 ;
  
  arg1 = (IGameMod *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGameMod_ImportVars(void * jarg1, void * jarg2) {
  void * jresult ;
  IGameMod *arg1 = (IGameMod *) 0 ;
  GameModImport *arg2 = 0 ;
  HRESULT result;
  
  arg1 = (IGameMod *)jarg1; 
  arg2 = (GameModImport *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GameModImport const & type is null", 0);
    return 0;
  } 
  result = (arg1)->ImportVars((GameModImport const &)*arg2);
  jresult = new HRESULT((const HRESULT &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGameMod_Init(void * jarg1) {
  void * jresult ;
  IGameMod *arg1 = (IGameMod *) 0 ;
  HRESULT result;
  
  arg1 = (IGameMod *)jarg1; 
  result = (arg1)->Init();
  jresult = new HRESULT((const HRESULT &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGameMod_Restore(void * jarg1) {
  void * jresult ;
  IGameMod *arg1 = (IGameMod *) 0 ;
  HRESULT result;
  
  arg1 = (IGameMod *)jarg1; 
  result = (arg1)->Restore();
  jresult = new HRESULT((const HRESULT &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGameMod_Move(void * jarg1) {
  void * jresult ;
  IGameMod *arg1 = (IGameMod *) 0 ;
  HRESULT result;
  
  arg1 = (IGameMod *)jarg1; 
  result = (arg1)->Move();
  jresult = new HRESULT((const HRESULT &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGameMod_KillGame(void * jarg1) {
  IGameMod *arg1 = (IGameMod *) 0 ;
  
  arg1 = (IGameMod *)jarg1; 
  (arg1)->KillGame();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGameMod_GetCameraPosRot(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  IGameMod *arg1 = (IGameMod *) 0 ;
  CVec3 *arg2 = 0 ;
  CMatrix44 *arg3 = 0 ;
  HRESULT result;
  
  arg1 = (IGameMod *)jarg1; 
  arg2 = (CVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec3 & type is null", 0);
    return 0;
  } 
  arg3 = (CMatrix44 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CMatrix44 & type is null", 0);
    return 0;
  } 
  result = (arg1)->GetCameraPosRot(*arg2,*arg3);
  jresult = new HRESULT((const HRESULT &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGameMod_GetStatistics(void * jarg1) {
  void * jresult ;
  IGameMod *arg1 = (IGameMod *) 0 ;
  SCoreStatistics *result = 0 ;
  
  arg1 = (IGameMod *)jarg1; 
  result = (SCoreStatistics *)((IGameMod const *)arg1)->GetStatistics();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGameMod_GetLevelLog(void * jarg1) {
  void * jresult ;
  IGameMod *arg1 = (IGameMod *) 0 ;
  ILevelLogData *result = 0 ;
  
  arg1 = (IGameMod *)jarg1; 
  result = (ILevelLogData *)(arg1)->GetLevelLog();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGameMod_ProcessMessage(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  IGameMod *arg1 = (IGameMod *) 0 ;
  UINT arg2 ;
  WPARAM arg3 ;
  LPARAM arg4 ;
  UINT *argp2 ;
  WPARAM *argp3 ;
  LPARAM *argp4 ;
  
  arg1 = (IGameMod *)jarg1; 
  argp2 = (UINT *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UINT", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (WPARAM *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null WPARAM", 0);
    return ;
  }
  arg3 = *argp3; 
  argp4 = (LPARAM *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null LPARAM", 0);
    return ;
  }
  arg4 = *argp4; 
  (arg1)->ProcessMessage(arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IGameMod_PostConstruct(void * jarg1) {
  void * jresult ;
  IGameMod *arg1 = (IGameMod *) 0 ;
  HRESULT result;
  
  arg1 = (IGameMod *)jarg1; 
  result = (arg1)->PostConstruct();
  jresult = new HRESULT((const HRESULT &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IGameMod_GetMouseInverted(void * jarg1) {
  int jresult ;
  IGameMod *arg1 = (IGameMod *) 0 ;
  BOOL result;
  
  arg1 = (IGameMod *)jarg1; 
  result = (BOOL)(arg1)->GetMouseInverted();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGameMod_UpdateLoadingScreen(void * jarg1) {
  IGameMod *arg1 = (IGameMod *) 0 ;
  
  arg1 = (IGameMod *)jarg1; 
  (arg1)->UpdateLoadingScreen();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGameMod_GiveAll(void * jarg1) {
  IGameMod *arg1 = (IGameMod *) 0 ;
  
  arg1 = (IGameMod *)jarg1; 
  (arg1)->GiveAll();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGameMod_NoClip(void * jarg1) {
  IGameMod *arg1 = (IGameMod *) 0 ;
  
  arg1 = (IGameMod *)jarg1; 
  (arg1)->NoClip();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IWindowListener_OnCreate(void * jarg1) {
  IWindowListener *arg1 = (IWindowListener *) 0 ;
  
  arg1 = (IWindowListener *)jarg1; 
  (arg1)->OnCreate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IWindowListener_OnDestroy(void * jarg1) {
  IWindowListener *arg1 = (IWindowListener *) 0 ;
  
  arg1 = (IWindowListener *)jarg1; 
  (arg1)->OnDestroy();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IWindowListener_OnRequestClose(void * jarg1) {
  IWindowListener *arg1 = (IWindowListener *) 0 ;
  
  arg1 = (IWindowListener *)jarg1; 
  (arg1)->OnRequestClose();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IWindowListener_OnActivate(void * jarg1) {
  IWindowListener *arg1 = (IWindowListener *) 0 ;
  
  arg1 = (IWindowListener *)jarg1; 
  (arg1)->OnActivate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IWindowListener_OnDeactivate(void * jarg1) {
  IWindowListener *arg1 = (IWindowListener *) 0 ;
  
  arg1 = (IWindowListener *)jarg1; 
  (arg1)->OnDeactivate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IWindowListener_OnPreActivate(void * jarg1) {
  IWindowListener *arg1 = (IWindowListener *) 0 ;
  
  arg1 = (IWindowListener *)jarg1; 
  (arg1)->OnPreActivate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IWindowListener_OnPreDeactivate(void * jarg1) {
  IWindowListener *arg1 = (IWindowListener *) 0 ;
  
  arg1 = (IWindowListener *)jarg1; 
  (arg1)->OnPreDeactivate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IWindowListener_OnMove(void * jarg1, int jarg2, int jarg3) {
  IWindowListener *arg1 = (IWindowListener *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (IWindowListener *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->OnMove(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IWindowListener_OnResize(void * jarg1, int jarg2, int jarg3) {
  IWindowListener *arg1 = (IWindowListener *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (IWindowListener *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->OnResize(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IWindowListener_OnChangeStyle(void * jarg1, unsigned int jarg2) {
  IWindowListener *arg1 = (IWindowListener *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (IWindowListener *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->OnChangeStyle(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IWindowListener_OnMemoryWarning(void * jarg1) {
  IWindowListener *arg1 = (IWindowListener *) 0 ;
  
  arg1 = (IWindowListener *)jarg1; 
  (arg1)->OnMemoryWarning();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IWindowListener(void * jarg1) {
  IWindowListener *arg1 = (IWindowListener *) 0 ;
  
  arg1 = (IWindowListener *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IWindow(void * jarg1) {
  IWindow *arg1 = (IWindow *) 0 ;
  
  arg1 = (IWindow *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IWindow_Create(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, unsigned int jarg6) {
  unsigned int jresult ;
  IWindow *arg1 = (IWindow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  bool arg6 ;
  bool result;
  
  arg1 = (IWindow *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = jarg6 ? true : false; 
  result = (bool)(arg1)->Create(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IWindow_SetName(void * jarg1, void * jarg2) {
  IWindow *arg1 = (IWindow *) 0 ;
  Engine2::String *arg2 = 0 ;
  
  arg1 = (IWindow *)jarg1; 
  arg2 = (Engine2::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Engine2::String const & type is null", 0);
    return ;
  } 
  (arg1)->SetName((Engine2::String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IWindow_GetName(void * jarg1) {
  void * jresult ;
  IWindow *arg1 = (IWindow *) 0 ;
  Engine2::String *result = 0 ;
  
  arg1 = (IWindow *)jarg1; 
  result = (Engine2::String *) &((IWindow const *)arg1)->GetName();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IWindow_IsActive(void * jarg1) {
  unsigned int jresult ;
  IWindow *arg1 = (IWindow *) 0 ;
  bool result;
  
  arg1 = (IWindow *)jarg1; 
  result = (bool)((IWindow const *)arg1)->IsActive();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IWindow_SetFocus(void * jarg1) {
  IWindow *arg1 = (IWindow *) 0 ;
  
  arg1 = (IWindow *)jarg1; 
  (arg1)->SetFocus();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IWindow_Show(void * jarg1, unsigned int jarg2) {
  IWindow *arg1 = (IWindow *) 0 ;
  bool arg2 ;
  
  arg1 = (IWindow *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->Show(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IWindow_IsInFocus(void * jarg1) {
  unsigned int jresult ;
  IWindow *arg1 = (IWindow *) 0 ;
  bool result;
  
  arg1 = (IWindow *)jarg1; 
  result = (bool)((IWindow const *)arg1)->IsInFocus();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IWindow_SetSize(void * jarg1, int jarg2, int jarg3, unsigned int jarg4) {
  IWindow *arg1 = (IWindow *) 0 ;
  int arg2 ;
  int arg3 ;
  bool arg4 ;
  
  arg1 = (IWindow *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->SetSize(arg2,arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IWindow_IsFullscreen(void * jarg1) {
  unsigned int jresult ;
  IWindow *arg1 = (IWindow *) 0 ;
  bool result;
  
  arg1 = (IWindow *)jarg1; 
  result = (bool)((IWindow const *)arg1)->IsFullscreen();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IWindow_SetPosition(void * jarg1, int jarg2, int jarg3) {
  IWindow *arg1 = (IWindow *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (IWindow *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->SetPosition(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IWindow_SetStyle(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  IWindow *arg1 = (IWindow *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  arg1 = (IWindow *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)(arg1)->SetStyle(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IWindow_GetStyle(void * jarg1) {
  unsigned int jresult ;
  IWindow *arg1 = (IWindow *) 0 ;
  unsigned int result;
  
  arg1 = (IWindow *)jarg1; 
  result = (unsigned int)((IWindow const *)arg1)->GetStyle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IWindow_GetWindowRect(void * jarg1) {
  void * jresult ;
  IWindow *arg1 = (IWindow *) 0 ;
  RECT result;
  
  arg1 = (IWindow *)jarg1; 
  result = ((IWindow const *)arg1)->GetWindowRect();
  jresult = new RECT((const RECT &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IWindow_GetClientRect(void * jarg1) {
  void * jresult ;
  IWindow *arg1 = (IWindow *) 0 ;
  RECT result;
  
  arg1 = (IWindow *)jarg1; 
  result = ((IWindow const *)arg1)->GetClientRect();
  jresult = new RECT((const RECT &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IWindow_RegisterListener(void * jarg1, void * jarg2) {
  IWindow *arg1 = (IWindow *) 0 ;
  IWindowListener *arg2 = (IWindowListener *) 0 ;
  
  arg1 = (IWindow *)jarg1; 
  arg2 = (IWindowListener *)jarg2; 
  (arg1)->RegisterListener(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IWindow_UnRegisterListener(void * jarg1, void * jarg2) {
  IWindow *arg1 = (IWindow *) 0 ;
  IWindowListener *arg2 = (IWindowListener *) 0 ;
  
  arg1 = (IWindow *)jarg1; 
  arg2 = (IWindowListener *)jarg2; 
  (arg1)->UnRegisterListener(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IWindow_Invalidate(void * jarg1, void * jarg2) {
  IWindow *arg1 = (IWindow *) 0 ;
  RECT *arg2 = (RECT *) 0 ;
  
  arg1 = (IWindow *)jarg1; 
  arg2 = (RECT *)jarg2; 
  (arg1)->Invalidate((RECT const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IWindow_Close(void * jarg1) {
  IWindow *arg1 = (IWindow *) 0 ;
  
  arg1 = (IWindow *)jarg1; 
  (arg1)->Close();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IWindow_GetWindowHandle(void * jarg1) {
  void * jresult ;
  IWindow *arg1 = (IWindow *) 0 ;
  WIN_HWND result;
  
  arg1 = (IWindow *)jarg1; 
  result = ((IWindow const *)arg1)->GetWindowHandle();
  jresult = new WIN_HWND((const WIN_HWND &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IWindow_RegisterHWND(void * jarg1, void * jarg2) {
  IWindow *arg1 = (IWindow *) 0 ;
  WIN_HWND arg2 ;
  WIN_HWND *argp2 ;
  
  arg1 = (IWindow *)jarg1; 
  argp2 = (WIN_HWND *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null WIN_HWND", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->RegisterHWND(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IWindow_NotifyMessage(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  IWindow *arg1 = (IWindow *) 0 ;
  UINT arg2 ;
  WPARAM arg3 ;
  LPARAM arg4 ;
  UINT *argp2 ;
  WPARAM *argp3 ;
  LPARAM *argp4 ;
  
  arg1 = (IWindow *)jarg1; 
  argp2 = (UINT *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UINT", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (WPARAM *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null WPARAM", 0);
    return ;
  }
  arg3 = *argp3; 
  argp4 = (LPARAM *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null LPARAM", 0);
    return ;
  }
  arg4 = *argp4; 
  (arg1)->NotifyMessage(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IScene(void * jarg1) {
  IScene *arg1 = (IScene *) 0 ;
  
  arg1 = (IScene *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IScene_AddWeather(void * jarg1) {
  unsigned long jresult ;
  IScene *arg1 = (IScene *) 0 ;
  size_t result;
  
  arg1 = (IScene *)jarg1; 
  result = (arg1)->AddWeather();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IScene_RemoveWeather(void * jarg1, unsigned long jarg2) {
  IScene *arg1 = (IScene *) 0 ;
  size_t arg2 ;
  
  arg1 = (IScene *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->RemoveWeather(arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IScene_GetWeathersCount(void * jarg1) {
  unsigned long jresult ;
  IScene *arg1 = (IScene *) 0 ;
  size_t result;
  
  arg1 = (IScene *)jarg1; 
  result = (arg1)->GetWeathersCount();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IScene_GetActiveWeather(void * jarg1) {
  unsigned long jresult ;
  IScene *arg1 = (IScene *) 0 ;
  size_t result;
  
  arg1 = (IScene *)jarg1; 
  result = (arg1)->GetActiveWeather();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IScene_SetActiveWeather(void * jarg1, unsigned long jarg2) {
  IScene *arg1 = (IScene *) 0 ;
  size_t arg2 ;
  
  arg1 = (IScene *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->SetActiveWeather(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IScene_ProjParams(void * jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  IScene *arg1 = (IScene *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  HRESULT result;
  
  arg1 = (IScene *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (arg1)->ProjParams(arg2,arg3,arg4);
  jresult = new HRESULT((const HRESULT &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IScene_Restore(void * jarg1) {
  void * jresult ;
  IScene *arg1 = (IScene *) 0 ;
  HRESULT result;
  
  arg1 = (IScene *)jarg1; 
  result = (arg1)->Restore();
  jresult = new HRESULT((const HRESULT &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IScene_Invalidate(void * jarg1) {
  void * jresult ;
  IScene *arg1 = (IScene *) 0 ;
  HRESULT result;
  
  arg1 = (IScene *)jarg1; 
  result = (arg1)->Invalidate();
  jresult = new HRESULT((const HRESULT &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IScene_RenderFrame(void * jarg1) {
  IScene *arg1 = (IScene *) 0 ;
  
  arg1 = (IScene *)jarg1; 
  (arg1)->RenderFrame();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IScene_GetCamera(void * jarg1) {
  void * jresult ;
  IScene *arg1 = (IScene *) 0 ;
  CCamera *result = 0 ;
  
  arg1 = (IScene *)jarg1; 
  result = (CCamera *)((IScene const *)arg1)->GetCamera();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IScene_SetCamera(void * jarg1, void * jarg2) {
  IScene *arg1 = (IScene *) 0 ;
  CCamera *arg2 = (CCamera *) 0 ;
  
  arg1 = (IScene *)jarg1; 
  arg2 = (CCamera *)jarg2; 
  (arg1)->SetCamera(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IScene_RenderSceneObjects(void * jarg1, void * jarg2) {
  void * jresult ;
  IScene *arg1 = (IScene *) 0 ;
  eRenderType arg2 ;
  eRenderType *argp2 ;
  RenderStatistics result;
  
  arg1 = (IScene *)jarg1; 
  argp2 = (eRenderType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eRenderType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->RenderSceneObjects(arg2);
  jresult = new RenderStatistics((const RenderStatistics &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IScene_ImmediateRenderSceneObjects(void * jarg1, void * jarg2) {
  void * jresult ;
  IScene *arg1 = (IScene *) 0 ;
  eRenderType arg2 ;
  eRenderType *argp2 ;
  HRESULT result;
  
  arg1 = (IScene *)jarg1; 
  argp2 = (eRenderType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eRenderType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->ImmediateRenderSceneObjects(arg2);
  jresult = new HRESULT((const HRESULT &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IScene_RenderScene2DObjects(void * jarg1) {
  void * jresult ;
  IScene *arg1 = (IScene *) 0 ;
  HRESULT result;
  
  arg1 = (IScene *)jarg1; 
  result = (arg1)->RenderScene2DObjects();
  jresult = new HRESULT((const HRESULT &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IScene_Clear(void * jarg1) {
  IScene *arg1 = (IScene *) 0 ;
  
  arg1 = (IScene *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IScene_ReInitRender(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5) {
  void * jresult ;
  IScene *arg1 = (IScene *) 0 ;
  DWORD arg2 ;
  DWORD arg3 ;
  DWORD arg4 ;
  BOOL arg5 ;
  HRESULT result;
  
  arg1 = (IScene *)jarg1; 
  arg2 = (DWORD)jarg2; 
  arg3 = (DWORD)jarg3; 
  arg4 = (DWORD)jarg4; 
  arg5 = (BOOL)jarg5; 
  result = (arg1)->ReInitRender(arg2,arg3,arg4,arg5);
  jresult = new HRESULT((const HRESULT &)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IScene_RegistryClientDrawer(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5) {
  unsigned long jresult ;
  IScene *arg1 = (IScene *) 0 ;
  IClientDraw *arg2 = (IClientDraw *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  size_t result;
  
  arg1 = (IScene *)jarg1; 
  arg2 = (IClientDraw *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (arg1)->RegistryClientDrawer(arg2,arg3,arg4,arg5);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IScene_UnRegistryClientDrawer(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5) {
  void * jresult ;
  IScene *arg1 = (IScene *) 0 ;
  IClientDraw *arg2 = (IClientDraw *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  HRESULT result;
  
  arg1 = (IScene *)jarg1; 
  arg2 = (IClientDraw *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (arg1)->UnRegistryClientDrawer(arg2,arg3,arg4,arg5);
  jresult = new HRESULT((const HRESULT &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IScene_RemoveAllClientDrawers(void * jarg1) {
  IScene *arg1 = (IScene *) 0 ;
  
  arg1 = (IScene *)jarg1; 
  (arg1)->RemoveAllClientDrawers();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IScene_GetRenderObject(void * jarg1) {
  void * jresult ;
  IScene *arg1 = (IScene *) 0 ;
  IGameRenderObject *result = 0 ;
  
  arg1 = (IScene *)jarg1; 
  result = (IGameRenderObject *)(arg1)->GetRenderObject();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IScene_GetRender(void * jarg1) {
  void * jresult ;
  IScene *arg1 = (IScene *) 0 ;
  IRender *result = 0 ;
  
  arg1 = (IScene *)jarg1; 
  result = (IRender *)(arg1)->GetRender();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IScene_GetWeatherSystem(void * jarg1) {
  void * jresult ;
  IScene *arg1 = (IScene *) 0 ;
  IWeather *result = 0 ;
  
  arg1 = (IScene *)jarg1; 
  result = (IWeather *)(arg1)->GetWeatherSystem();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IScene_GetMeshArray(void * jarg1) {
  void * jresult ;
  IScene *arg1 = (IScene *) 0 ;
  IMeshArray *result = 0 ;
  
  arg1 = (IScene *)jarg1; 
  result = (IMeshArray *)(arg1)->GetMeshArray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IScene_AddCreateMesh(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  IScene *arg1 = (IScene *) 0 ;
  CXmlElement *arg2 = (CXmlElement *) 0 ;
  BOOL arg3 ;
  IMeshInfo *result = 0 ;
  
  arg1 = (IScene *)jarg1; 
  arg2 = (CXmlElement *)jarg2; 
  arg3 = (BOOL)jarg3; 
  result = (IMeshInfo *)(arg1)->AddCreateMesh((CXmlElement const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IScene_DeleteMesh(void * jarg1, void * jarg2) {
  IScene *arg1 = (IScene *) 0 ;
  IMeshInfo *arg2 = (IMeshInfo *) 0 ;
  
  arg1 = (IScene *)jarg1; 
  arg2 = (IMeshInfo *)jarg2; 
  (arg1)->DeleteMesh(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IScene_SetSendEmptyEvent(void * jarg1, unsigned int jarg2) {
  IScene *arg1 = (IScene *) 0 ;
  bool arg2 ;
  
  arg1 = (IScene *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetSendEmptyEvent(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_IScene_GetGamma(void * jarg1) {
  float jresult ;
  IScene *arg1 = (IScene *) 0 ;
  float result;
  
  arg1 = (IScene *)jarg1; 
  result = (float)(arg1)->GetGamma();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IScene_SetGamma(void * jarg1, float jarg2) {
  IScene *arg1 = (IScene *) 0 ;
  float arg2 ;
  
  arg1 = (IScene *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetGamma(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IScene_GetGameMod(void * jarg1) {
  void * jresult ;
  IScene *arg1 = (IScene *) 0 ;
  IGameMod *result = 0 ;
  
  arg1 = (IScene *)jarg1; 
  result = (IGameMod *)(arg1)->GetGameMod();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Color_RGBA(int jarg1, int jarg2, int jarg3, int jarg4, int jarg5) {
  int jresult ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  ERenderer arg5 ;
  int result;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (ERenderer)jarg5; 
  result = (int)Color_RGBA(arg1,arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Color_RGBA_Texture(int jarg1, int jarg2, int jarg3, int jarg4, int jarg5) {
  int jresult ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  ERenderer arg5 ;
  int result;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (ERenderer)jarg5; 
  result = (int)Color_RGBA_Texture(arg1,arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IVisAreaTree(void * jarg1) {
  IVisAreaTree *arg1 = (IVisAreaTree *) 0 ;
  
  arg1 = (IVisAreaTree *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IVisAreaTree_RegisterObject(void * jarg1, void * jarg2) {
  IVisAreaTree *arg1 = (IVisAreaTree *) 0 ;
  IMeshInfo *arg2 = (IMeshInfo *) 0 ;
  
  arg1 = (IVisAreaTree *)jarg1; 
  arg2 = (IMeshInfo *)jarg2; 
  (arg1)->RegisterObject(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IVisAreaTree_UnregisterObject(void * jarg1, void * jarg2) {
  IVisAreaTree *arg1 = (IVisAreaTree *) 0 ;
  IMeshInfo *arg2 = (IMeshInfo *) 0 ;
  
  arg1 = (IVisAreaTree *)jarg1; 
  arg2 = (IMeshInfo *)jarg2; 
  (arg1)->UnregisterObject(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IVisAreaTree_MoveObject(void * jarg1, void * jarg2) {
  IVisAreaTree *arg1 = (IVisAreaTree *) 0 ;
  IMeshInfo *arg2 = (IMeshInfo *) 0 ;
  
  arg1 = (IVisAreaTree *)jarg1; 
  arg2 = (IMeshInfo *)jarg2; 
  (arg1)->MoveObject(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IVisAreaTree_RegisterStaticObject(void * jarg1, void * jarg2) {
  IVisAreaTree *arg1 = (IVisAreaTree *) 0 ;
  IMeshInfo *arg2 = (IMeshInfo *) 0 ;
  
  arg1 = (IVisAreaTree *)jarg1; 
  arg2 = (IMeshInfo *)jarg2; 
  (arg1)->RegisterStaticObject(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IVisAreaTree_UnregisterStaticObject(void * jarg1, void * jarg2) {
  IVisAreaTree *arg1 = (IVisAreaTree *) 0 ;
  IMeshInfo *arg2 = (IMeshInfo *) 0 ;
  
  arg1 = (IVisAreaTree *)jarg1; 
  arg2 = (IMeshInfo *)jarg2; 
  (arg1)->UnregisterStaticObject(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IVisAreaTree_RegisterLight(void * jarg1, void * jarg2) {
  IVisAreaTree *arg1 = (IVisAreaTree *) 0 ;
  CLight *arg2 = (CLight *) 0 ;
  
  arg1 = (IVisAreaTree *)jarg1; 
  arg2 = (CLight *)jarg2; 
  (arg1)->RegisterLight(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IVisAreaTree_UnregisterLight(void * jarg1, void * jarg2) {
  IVisAreaTree *arg1 = (IVisAreaTree *) 0 ;
  CLight *arg2 = (CLight *) 0 ;
  
  arg1 = (IVisAreaTree *)jarg1; 
  arg2 = (CLight *)jarg2; 
  (arg1)->UnregisterLight(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IVisAreaTree_MoveLight(void * jarg1, void * jarg2) {
  IVisAreaTree *arg1 = (IVisAreaTree *) 0 ;
  CLight *arg2 = (CLight *) 0 ;
  
  arg1 = (IVisAreaTree *)jarg1; 
  arg2 = (CLight *)jarg2; 
  (arg1)->MoveLight(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IVisAreaTree_SetAABB(void * jarg1, void * jarg2) {
  IVisAreaTree *arg1 = (IVisAreaTree *) 0 ;
  CAABBox *arg2 = 0 ;
  
  arg1 = (IVisAreaTree *)jarg1; 
  arg2 = (CAABBox *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CAABBox const & type is null", 0);
    return ;
  } 
  (arg1)->SetAABB((CAABBox const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IVisAreaTree_GetAABB(void * jarg1) {
  void * jresult ;
  IVisAreaTree *arg1 = (IVisAreaTree *) 0 ;
  CAABBox *result = 0 ;
  
  arg1 = (IVisAreaTree *)jarg1; 
  result = (CAABBox *) &((IVisAreaTree const *)arg1)->GetAABB();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IVisAreaTree_SetPartialLimit(void * jarg1, float jarg2) {
  IVisAreaTree *arg1 = (IVisAreaTree *) 0 ;
  float arg2 ;
  
  arg1 = (IVisAreaTree *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetPartialLimit(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IVisAreaTree_Draw(void * jarg1, void * jarg2, unsigned int jarg3, void * jarg4) {
  IVisAreaTree *arg1 = (IVisAreaTree *) 0 ;
  eRenderType arg2 ;
  bool arg3 ;
  RenderStatistics *arg4 = 0 ;
  eRenderType *argp2 ;
  
  arg1 = (IVisAreaTree *)jarg1; 
  argp2 = (eRenderType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eRenderType", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (RenderStatistics *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RenderStatistics & type is null", 0);
    return ;
  } 
  (arg1)->Draw(arg2,arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IVisAreaTree_SetNewFrame(void * jarg1) {
  IVisAreaTree *arg1 = (IVisAreaTree *) 0 ;
  
  arg1 = (IVisAreaTree *)jarg1; 
  (arg1)->SetNewFrame();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IVisAreaTree_DecideVisibility(void * jarg1) {
  IVisAreaTree *arg1 = (IVisAreaTree *) 0 ;
  
  arg1 = (IVisAreaTree *)jarg1; 
  (arg1)->DecideVisibility();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IVisAreaTree_AddToDeleteList(void * jarg1, void * jarg2) {
  IVisAreaTree *arg1 = (IVisAreaTree *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (IVisAreaTree *)jarg1; 
  arg2 = (void *)jarg2; 
  (arg1)->AddToDeleteList(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IVisAreaTree_RemoveFromDeleteList(void * jarg1, void * jarg2) {
  IVisAreaTree *arg1 = (IVisAreaTree *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (IVisAreaTree *)jarg1; 
  arg2 = (void *)jarg2; 
  (arg1)->RemoveFromDeleteList(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IPortal(void * jarg1) {
  IPortal *arg1 = (IPortal *) 0 ;
  
  arg1 = (IPortal *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IPortal_AddPoint(void * jarg1, void * jarg2) {
  IPortal *arg1 = (IPortal *) 0 ;
  CVec3 *arg2 = 0 ;
  
  arg1 = (IPortal *)jarg1; 
  arg2 = (CVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec3 const & type is null", 0);
    return ;
  } 
  (arg1)->AddPoint((CVec3 const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPortal_BuildFrustum(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  IPortal *arg1 = (IPortal *) 0 ;
  CFrustum *arg2 = 0 ;
  CVec3 *arg3 = 0 ;
  bool result;
  
  arg1 = (IPortal *)jarg1; 
  arg2 = (CFrustum *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CFrustum & type is null", 0);
    return 0;
  } 
  arg3 = (CVec3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec3 & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->BuildFrustum(*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IPortal_BuildCameraFrustum(void * jarg1) {
  unsigned int jresult ;
  IPortal *arg1 = (IPortal *) 0 ;
  bool result;
  
  arg1 = (IPortal *)jarg1; 
  result = (bool)(arg1)->BuildCameraFrustum();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IPortal_IsObjectVisible__SWIG_0(void * jarg1, void * jarg2) {
  int jresult ;
  IPortal *arg1 = (IPortal *) 0 ;
  CAABBox *arg2 = 0 ;
  int result;
  
  arg1 = (IPortal *)jarg1; 
  arg2 = (CAABBox *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CAABBox & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->IsObjectVisible(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IPortal_IsObjectVisible__SWIG_1(void * jarg1, void * jarg2) {
  int jresult ;
  IPortal *arg1 = (IPortal *) 0 ;
  CSphere *arg2 = 0 ;
  int result;
  
  arg1 = (IPortal *)jarg1; 
  arg2 = (CSphere *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CSphere & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->IsObjectVisible(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IPortal_GetFrustum(void * jarg1) {
  void * jresult ;
  IPortal *arg1 = (IPortal *) 0 ;
  CFrustum *result = 0 ;
  
  arg1 = (IPortal *)jarg1; 
  result = (CFrustum *) &((IPortal const *)arg1)->GetFrustum();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IPortal_GetVisArea1(void * jarg1) {
  int jresult ;
  IPortal *arg1 = (IPortal *) 0 ;
  int result;
  
  arg1 = (IPortal *)jarg1; 
  result = (int)((IPortal const *)arg1)->GetVisArea1();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IPortal_GetVisArea2(void * jarg1) {
  int jresult ;
  IPortal *arg1 = (IPortal *) 0 ;
  int result;
  
  arg1 = (IPortal *)jarg1; 
  result = (int)((IPortal const *)arg1)->GetVisArea2();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IVisArea(void * jarg1) {
  IVisArea *arg1 = (IVisArea *) 0 ;
  
  arg1 = (IVisArea *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IVisArea_GetVisAreaNum(void * jarg1) {
  int jresult ;
  IVisArea *arg1 = (IVisArea *) 0 ;
  int result;
  
  arg1 = (IVisArea *)jarg1; 
  result = (int)((IVisArea const *)arg1)->GetVisAreaNum();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IVisArea_GetNumPortals(void * jarg1) {
  unsigned long jresult ;
  IVisArea *arg1 = (IVisArea *) 0 ;
  size_t result;
  
  arg1 = (IVisArea *)jarg1; 
  result = ((IVisArea const *)arg1)->GetNumPortals();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IVisArea_AddPortal(void * jarg1, void * jarg2) {
  unsigned long jresult ;
  IVisArea *arg1 = (IVisArea *) 0 ;
  IPortal *arg2 = (IPortal *) 0 ;
  size_t result;
  
  arg1 = (IVisArea *)jarg1; 
  arg2 = (IPortal *)jarg2; 
  result = (arg1)->AddPortal(arg2);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IVisArea_RemovePortal(void * jarg1, unsigned long jarg2) {
  IVisArea *arg1 = (IVisArea *) 0 ;
  size_t arg2 ;
  
  arg1 = (IVisArea *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->RemovePortal(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IVisArea_GetPortal(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  IVisArea *arg1 = (IVisArea *) 0 ;
  size_t arg2 ;
  IPortal *result = 0 ;
  
  arg1 = (IVisArea *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (IPortal *)(arg1)->GetPortal(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IVisArea_SetVisAreaTree(void * jarg1, void * jarg2) {
  IVisArea *arg1 = (IVisArea *) 0 ;
  IVisAreaTree *arg2 = (IVisAreaTree *) 0 ;
  
  arg1 = (IVisArea *)jarg1; 
  arg2 = (IVisAreaTree *)jarg2; 
  (arg1)->SetVisAreaTree(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IVisArea_GetVisAreaTree(void * jarg1) {
  void * jresult ;
  IVisArea *arg1 = (IVisArea *) 0 ;
  IVisAreaTree *result = 0 ;
  
  arg1 = (IVisArea *)jarg1; 
  result = (IVisAreaTree *)(arg1)->GetVisAreaTree();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IVisArea_AddVisibleArea(void * jarg1, int jarg2) {
  IVisArea *arg1 = (IVisArea *) 0 ;
  int arg2 ;
  
  arg1 = (IVisArea *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->AddVisibleArea(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IVisArea_RemoveVisibleArea(void * jarg1, int jarg2) {
  IVisArea *arg1 = (IVisArea *) 0 ;
  int arg2 ;
  
  arg1 = (IVisArea *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->RemoveVisibleArea(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IVisArea_BuildVisArea(void * jarg1, void * jarg2) {
  IVisArea *arg1 = (IVisArea *) 0 ;
  ISceneGraph *arg2 = (ISceneGraph *) 0 ;
  
  arg1 = (IVisArea *)jarg1; 
  arg2 = (ISceneGraph *)jarg2; 
  (arg1)->BuildVisArea((ISceneGraph const *)arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IVisArea_GetName(void * jarg1) {
  char * jresult ;
  IVisArea *arg1 = (IVisArea *) 0 ;
  char *result = 0 ;
  
  arg1 = (IVisArea *)jarg1; 
  result = (char *)(arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IVisArea_SetName(void * jarg1, char * jarg2) {
  IVisArea *arg1 = (IVisArea *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (IVisArea *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetName((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IVisArea_SetNewFrame(void * jarg1) {
  IVisArea *arg1 = (IVisArea *) 0 ;
  
  arg1 = (IVisArea *)jarg1; 
  (arg1)->SetNewFrame();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IVisArea_DrawPass(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  IVisArea *arg1 = (IVisArea *) 0 ;
  eRenderType arg2 ;
  RenderStatistics *arg3 = 0 ;
  bool arg4 ;
  eRenderType *argp2 ;
  
  arg1 = (IVisArea *)jarg1; 
  argp2 = (eRenderType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eRenderType", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = (RenderStatistics *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RenderStatistics & type is null", 0);
    return ;
  } 
  arg4 = jarg4 ? true : false; 
  (arg1)->DrawPass(arg2,*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ISceneGraph(void * jarg1) {
  ISceneGraph *arg1 = (ISceneGraph *) 0 ;
  
  arg1 = (ISceneGraph *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISceneGraph_GetVisArea(void * jarg1, int jarg2) {
  void * jresult ;
  ISceneGraph *arg1 = (ISceneGraph *) 0 ;
  int arg2 ;
  IVisArea *result = 0 ;
  
  arg1 = (ISceneGraph *)jarg1; 
  arg2 = (int)jarg2; 
  result = (IVisArea *)((ISceneGraph const *)arg1)->GetVisArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ISceneGraph_AddVisArea(void * jarg1, void * jarg2) {
  unsigned long jresult ;
  ISceneGraph *arg1 = (ISceneGraph *) 0 ;
  IVisArea *arg2 = (IVisArea *) 0 ;
  size_t result;
  
  arg1 = (ISceneGraph *)jarg1; 
  arg2 = (IVisArea *)jarg2; 
  result = (arg1)->AddVisArea(arg2);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ISceneGraph_AddSimpleVisArea(void * jarg1) {
  unsigned long jresult ;
  ISceneGraph *arg1 = (ISceneGraph *) 0 ;
  size_t result;
  
  arg1 = (ISceneGraph *)jarg1; 
  result = (arg1)->AddSimpleVisArea();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ISceneGraph_GetMainVisAreaNum(void * jarg1) {
  unsigned long jresult ;
  ISceneGraph *arg1 = (ISceneGraph *) 0 ;
  size_t result;
  
  arg1 = (ISceneGraph *)jarg1; 
  result = (arg1)->GetMainVisAreaNum();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ISceneGraph_SetVisAreaAsMain(void * jarg1, unsigned long jarg2) {
  ISceneGraph *arg1 = (ISceneGraph *) 0 ;
  size_t arg2 ;
  
  arg1 = (ISceneGraph *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->SetVisAreaAsMain(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ISceneGraph_SetNewFrame(void * jarg1) {
  ISceneGraph *arg1 = (ISceneGraph *) 0 ;
  
  arg1 = (ISceneGraph *)jarg1; 
  (arg1)->SetNewFrame();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISceneGraph_DrawPass(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  ISceneGraph *arg1 = (ISceneGraph *) 0 ;
  eRenderType arg2 ;
  bool arg3 ;
  eRenderType *argp2 ;
  RenderStatistics result;
  
  arg1 = (ISceneGraph *)jarg1; 
  argp2 = (eRenderType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eRenderType", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->DrawPass(arg2,arg3);
  jresult = new RenderStatistics((const RenderStatistics &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SDispFormat_m_Width_set(void * jarg1, int jarg2) {
  SDispFormat *arg1 = (SDispFormat *) 0 ;
  int arg2 ;
  
  arg1 = (SDispFormat *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_Width = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SDispFormat_m_Width_get(void * jarg1) {
  int jresult ;
  SDispFormat *arg1 = (SDispFormat *) 0 ;
  int result;
  
  arg1 = (SDispFormat *)jarg1; 
  result = (int) ((arg1)->m_Width);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SDispFormat_m_Height_set(void * jarg1, int jarg2) {
  SDispFormat *arg1 = (SDispFormat *) 0 ;
  int arg2 ;
  
  arg1 = (SDispFormat *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_Height = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SDispFormat_m_Height_get(void * jarg1) {
  int jresult ;
  SDispFormat *arg1 = (SDispFormat *) 0 ;
  int result;
  
  arg1 = (SDispFormat *)jarg1; 
  result = (int) ((arg1)->m_Height);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SDispFormat_m_BPP_set(void * jarg1, int jarg2) {
  SDispFormat *arg1 = (SDispFormat *) 0 ;
  int arg2 ;
  
  arg1 = (SDispFormat *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_BPP = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SDispFormat_m_BPP_get(void * jarg1) {
  int jresult ;
  SDispFormat *arg1 = (SDispFormat *) 0 ;
  int result;
  
  arg1 = (SDispFormat *)jarg1; 
  result = (int) ((arg1)->m_BPP);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SDispFormat() {
  void * jresult ;
  SDispFormat *result = 0 ;
  
  result = (SDispFormat *)new SDispFormat();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SDispFormat(void * jarg1) {
  SDispFormat *arg1 = (SDispFormat *) 0 ;
  
  arg1 = (SDispFormat *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SAAFormat_szDescr_set(void * jarg1, char * jarg2) {
  SAAFormat *arg1 = (SAAFormat *) 0 ;
  char *arg2 ;
  
  arg1 = (SAAFormat *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->szDescr, (const char *)arg2, 64-1);
      arg1->szDescr[64-1] = 0;
    } else {
      arg1->szDescr[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SAAFormat_szDescr_get(void * jarg1) {
  char * jresult ;
  SAAFormat *arg1 = (SAAFormat *) 0 ;
  char *result = 0 ;
  
  arg1 = (SAAFormat *)jarg1; 
  result = (char *)(char *) ((arg1)->szDescr);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SAAFormat_nSamples_set(void * jarg1, int jarg2) {
  SAAFormat *arg1 = (SAAFormat *) 0 ;
  int arg2 ;
  
  arg1 = (SAAFormat *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->nSamples = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SAAFormat_nSamples_get(void * jarg1) {
  int jresult ;
  SAAFormat *arg1 = (SAAFormat *) 0 ;
  int result;
  
  arg1 = (SAAFormat *)jarg1; 
  result = (int) ((arg1)->nSamples);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SAAFormat_nQuality_set(void * jarg1, int jarg2) {
  SAAFormat *arg1 = (SAAFormat *) 0 ;
  int arg2 ;
  
  arg1 = (SAAFormat *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->nQuality = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SAAFormat_nQuality_get(void * jarg1) {
  int jresult ;
  SAAFormat *arg1 = (SAAFormat *) 0 ;
  int result;
  
  arg1 = (SAAFormat *)jarg1; 
  result = (int) ((arg1)->nQuality);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SAAFormat_nAPIType_set(void * jarg1, int jarg2) {
  SAAFormat *arg1 = (SAAFormat *) 0 ;
  int arg2 ;
  
  arg1 = (SAAFormat *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->nAPIType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SAAFormat_nAPIType_get(void * jarg1) {
  int jresult ;
  SAAFormat *arg1 = (SAAFormat *) 0 ;
  int result;
  
  arg1 = (SAAFormat *)jarg1; 
  result = (int) ((arg1)->nAPIType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SAAFormat() {
  void * jresult ;
  SAAFormat *result = 0 ;
  
  result = (SAAFormat *)new SAAFormat();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SAAFormat(void * jarg1) {
  SAAFormat *arg1 = (SAAFormat *) 0 ;
  
  arg1 = (SAAFormat *)jarg1; 
  delete arg1;
}


SWIGEXPORT long SWIGSTDCALL CSharp_MM_USE_DIFFUSE_COLOR_get() {
  long jresult ;
  long result;
  
  result = (long)(0x00000001L);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_FORCE_MATERIALS_AS_IDENTICAL_get() {
  long jresult ;
  long result;
  
  result = (long)(0x00000002L);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_ALLOW_SUBMESHES_VISIBILITY_get() {
  long jresult ;
  long result;
  
  result = (long)(0x00000004L);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_CLEAR_COLLISION_INFO_get() {
  long jresult ;
  long result;
  
  result = (long)(0x00000008L);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_INSERT_INSTANCE_ID_get() {
  long jresult ;
  long result;
  
  result = (long)(0x00000010L);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_BONE_INSTANCE_ID_get() {
  long jresult ;
  long result;
  
  result = (long)(0x00000020L);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MeshMergerInfo() {
  void * jresult ;
  MeshMergerInfo *result = 0 ;
  
  result = (MeshMergerInfo *)new MeshMergerInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshMergerInfo_m_vSourceToMerge_set(void * jarg1, void * jarg2) {
  MeshMergerInfo *arg1 = (MeshMergerInfo *) 0 ;
  Engine2::Vector< IMeshInfo * > *arg2 = (Engine2::Vector< IMeshInfo * > *) 0 ;
  
  arg1 = (MeshMergerInfo *)jarg1; 
  arg2 = (Engine2::Vector< IMeshInfo * > *)jarg2; 
  if (arg1) (arg1)->m_vSourceToMerge = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshMergerInfo_m_vSourceToMerge_get(void * jarg1) {
  void * jresult ;
  MeshMergerInfo *arg1 = (MeshMergerInfo *) 0 ;
  Engine2::Vector< IMeshInfo * > *result = 0 ;
  
  arg1 = (MeshMergerInfo *)jarg1; 
  result = (Engine2::Vector< IMeshInfo * > *)& ((arg1)->m_vSourceToMerge);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshMergerInfo_m_vResultMeshes_set(void * jarg1, void * jarg2) {
  MeshMergerInfo *arg1 = (MeshMergerInfo *) 0 ;
  Engine2::Vector< IMeshInfo * > *arg2 = (Engine2::Vector< IMeshInfo * > *) 0 ;
  
  arg1 = (MeshMergerInfo *)jarg1; 
  arg2 = (Engine2::Vector< IMeshInfo * > *)jarg2; 
  if (arg1) (arg1)->m_vResultMeshes = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshMergerInfo_m_vResultMeshes_get(void * jarg1) {
  void * jresult ;
  MeshMergerInfo *arg1 = (MeshMergerInfo *) 0 ;
  Engine2::Vector< IMeshInfo * > *result = 0 ;
  
  arg1 = (MeshMergerInfo *)jarg1; 
  result = (Engine2::Vector< IMeshInfo * > *)& ((arg1)->m_vResultMeshes);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshMergerInfo_m_vNotProcessedMeshes_set(void * jarg1, void * jarg2) {
  MeshMergerInfo *arg1 = (MeshMergerInfo *) 0 ;
  Engine2::Vector< size_t > arg2 ;
  Engine2::Vector< size_t > *argp2 ;
  
  arg1 = (MeshMergerInfo *)jarg1; 
  argp2 = (Engine2::Vector< size_t > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Engine2::Vector< size_t >", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_vNotProcessedMeshes = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshMergerInfo_m_vNotProcessedMeshes_get(void * jarg1) {
  void * jresult ;
  MeshMergerInfo *arg1 = (MeshMergerInfo *) 0 ;
  Engine2::Vector< size_t > result;
  
  arg1 = (MeshMergerInfo *)jarg1; 
  result =  ((arg1)->m_vNotProcessedMeshes);
  jresult = new Engine2::Vector< size_t >((const Engine2::Vector< size_t > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshMergerInfo_m_Flags_set(void * jarg1, unsigned int jarg2) {
  MeshMergerInfo *arg1 = (MeshMergerInfo *) 0 ;
  uint32 arg2 ;
  
  arg1 = (MeshMergerInfo *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->m_Flags = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MeshMergerInfo_m_Flags_get(void * jarg1) {
  unsigned int jresult ;
  MeshMergerInfo *arg1 = (MeshMergerInfo *) 0 ;
  uint32 result;
  
  arg1 = (MeshMergerInfo *)jarg1; 
  result = (uint32) ((arg1)->m_Flags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MeshMergerInfo(void * jarg1) {
  MeshMergerInfo *arg1 = (MeshMergerInfo *) 0 ;
  
  arg1 = (MeshMergerInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshMergerInstanceInfo_m_Matrix_set(void * jarg1, void * jarg2) {
  MeshMergerInstanceInfo *arg1 = (MeshMergerInstanceInfo *) 0 ;
  CMatrix44 *arg2 = (CMatrix44 *) 0 ;
  
  arg1 = (MeshMergerInstanceInfo *)jarg1; 
  arg2 = (CMatrix44 *)jarg2; 
  if (arg1) (arg1)->m_Matrix = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshMergerInstanceInfo_m_Matrix_get(void * jarg1) {
  void * jresult ;
  MeshMergerInstanceInfo *arg1 = (MeshMergerInstanceInfo *) 0 ;
  CMatrix44 *result = 0 ;
  
  arg1 = (MeshMergerInstanceInfo *)jarg1; 
  result = (CMatrix44 *)& ((arg1)->m_Matrix);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshMergerInstanceInfo_m_iDiffuseColor_set(void * jarg1, unsigned int jarg2) {
  MeshMergerInstanceInfo *arg1 = (MeshMergerInstanceInfo *) 0 ;
  uint32 arg2 ;
  
  arg1 = (MeshMergerInstanceInfo *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->m_iDiffuseColor = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MeshMergerInstanceInfo_m_iDiffuseColor_get(void * jarg1) {
  unsigned int jresult ;
  MeshMergerInstanceInfo *arg1 = (MeshMergerInstanceInfo *) 0 ;
  uint32 result;
  
  arg1 = (MeshMergerInstanceInfo *)jarg1; 
  result = (uint32) ((arg1)->m_iDiffuseColor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MeshMergerInstanceInfo() {
  void * jresult ;
  MeshMergerInstanceInfo *result = 0 ;
  
  result = (MeshMergerInstanceInfo *)new MeshMergerInstanceInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MeshMergerInstanceInfo(void * jarg1) {
  MeshMergerInstanceInfo *arg1 = (MeshMergerInstanceInfo *) 0 ;
  
  arg1 = (MeshMergerInstanceInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshMergerInfo2_m_pSourceMeshInfo_set(void * jarg1, void * jarg2) {
  MeshMergerInfo2 *arg1 = (MeshMergerInfo2 *) 0 ;
  IMeshInfo *arg2 = (IMeshInfo *) 0 ;
  
  arg1 = (MeshMergerInfo2 *)jarg1; 
  arg2 = (IMeshInfo *)jarg2; 
  if (arg1) (arg1)->m_pSourceMeshInfo = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshMergerInfo2_m_pSourceMeshInfo_get(void * jarg1) {
  void * jresult ;
  MeshMergerInfo2 *arg1 = (MeshMergerInfo2 *) 0 ;
  IMeshInfo *result = 0 ;
  
  arg1 = (MeshMergerInfo2 *)jarg1; 
  result = (IMeshInfo *) ((arg1)->m_pSourceMeshInfo);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshMergerInfo2_m_Instances_set(void * jarg1, void * jarg2) {
  MeshMergerInfo2 *arg1 = (MeshMergerInfo2 *) 0 ;
  Engine2::Vector< MeshMergerInstanceInfo > *arg2 = (Engine2::Vector< MeshMergerInstanceInfo > *) 0 ;
  
  arg1 = (MeshMergerInfo2 *)jarg1; 
  arg2 = (Engine2::Vector< MeshMergerInstanceInfo > *)jarg2; 
  if (arg1) (arg1)->m_Instances = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshMergerInfo2_m_Instances_get(void * jarg1) {
  void * jresult ;
  MeshMergerInfo2 *arg1 = (MeshMergerInfo2 *) 0 ;
  Engine2::Vector< MeshMergerInstanceInfo > *result = 0 ;
  
  arg1 = (MeshMergerInfo2 *)jarg1; 
  result = (Engine2::Vector< MeshMergerInstanceInfo > *)& ((arg1)->m_Instances);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshMergerInfo2_m_vResultMeshes_set(void * jarg1, void * jarg2) {
  MeshMergerInfo2 *arg1 = (MeshMergerInfo2 *) 0 ;
  Engine2::Vector< IMeshInfo * > *arg2 = (Engine2::Vector< IMeshInfo * > *) 0 ;
  
  arg1 = (MeshMergerInfo2 *)jarg1; 
  arg2 = (Engine2::Vector< IMeshInfo * > *)jarg2; 
  if (arg1) (arg1)->m_vResultMeshes = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshMergerInfo2_m_vResultMeshes_get(void * jarg1) {
  void * jresult ;
  MeshMergerInfo2 *arg1 = (MeshMergerInfo2 *) 0 ;
  Engine2::Vector< IMeshInfo * > *result = 0 ;
  
  arg1 = (MeshMergerInfo2 *)jarg1; 
  result = (Engine2::Vector< IMeshInfo * > *)& ((arg1)->m_vResultMeshes);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshMergerInfo2_m_Flags2_set(void * jarg1, unsigned int jarg2) {
  MeshMergerInfo2 *arg1 = (MeshMergerInfo2 *) 0 ;
  uint32 arg2 ;
  
  arg1 = (MeshMergerInfo2 *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->m_Flags2 = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MeshMergerInfo2_m_Flags2_get(void * jarg1) {
  unsigned int jresult ;
  MeshMergerInfo2 *arg1 = (MeshMergerInfo2 *) 0 ;
  uint32 result;
  
  arg1 = (MeshMergerInfo2 *)jarg1; 
  result = (uint32) ((arg1)->m_Flags2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MeshMergerInfo2() {
  void * jresult ;
  MeshMergerInfo2 *result = 0 ;
  
  result = (MeshMergerInfo2 *)new MeshMergerInfo2();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MeshMergerInfo2(void * jarg1) {
  MeshMergerInfo2 *arg1 = (MeshMergerInfo2 *) 0 ;
  
  arg1 = (MeshMergerInfo2 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MeshAnimBakeInfo_MeshAnimBakeFrameInfo() {
  void * jresult ;
  MeshAnimBakeInfo::MeshAnimBakeFrameInfo *result = 0 ;
  
  result = (MeshAnimBakeInfo::MeshAnimBakeFrameInfo *)new MeshAnimBakeInfo::MeshAnimBakeFrameInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshAnimBakeInfo_MeshAnimBakeFrameInfo_m_strAnimName_set(void * jarg1, void * jarg2) {
  MeshAnimBakeInfo::MeshAnimBakeFrameInfo *arg1 = (MeshAnimBakeInfo::MeshAnimBakeFrameInfo *) 0 ;
  Engine2::String *arg2 = (Engine2::String *) 0 ;
  
  arg1 = (MeshAnimBakeInfo::MeshAnimBakeFrameInfo *)jarg1; 
  arg2 = (Engine2::String *)jarg2; 
  if (arg1) (arg1)->m_strAnimName = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshAnimBakeInfo_MeshAnimBakeFrameInfo_m_strAnimName_get(void * jarg1) {
  void * jresult ;
  MeshAnimBakeInfo::MeshAnimBakeFrameInfo *arg1 = (MeshAnimBakeInfo::MeshAnimBakeFrameInfo *) 0 ;
  Engine2::String *result = 0 ;
  
  arg1 = (MeshAnimBakeInfo::MeshAnimBakeFrameInfo *)jarg1; 
  result = (Engine2::String *)& ((arg1)->m_strAnimName);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshAnimBakeInfo_MeshAnimBakeFrameInfo_m_nAnimId_set(void * jarg1, int jarg2) {
  MeshAnimBakeInfo::MeshAnimBakeFrameInfo *arg1 = (MeshAnimBakeInfo::MeshAnimBakeFrameInfo *) 0 ;
  int arg2 ;
  
  arg1 = (MeshAnimBakeInfo::MeshAnimBakeFrameInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_nAnimId = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MeshAnimBakeInfo_MeshAnimBakeFrameInfo_m_nAnimId_get(void * jarg1) {
  int jresult ;
  MeshAnimBakeInfo::MeshAnimBakeFrameInfo *arg1 = (MeshAnimBakeInfo::MeshAnimBakeFrameInfo *) 0 ;
  int result;
  
  arg1 = (MeshAnimBakeInfo::MeshAnimBakeFrameInfo *)jarg1; 
  result = (int) ((arg1)->m_nAnimId);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshAnimBakeInfo_MeshAnimBakeFrameInfo_m_vFramesInfo_set(void * jarg1, void * jarg2) {
  MeshAnimBakeInfo::MeshAnimBakeFrameInfo *arg1 = (MeshAnimBakeInfo::MeshAnimBakeFrameInfo *) 0 ;
  Engine2::Vector< AnimationParam > *arg2 = (Engine2::Vector< AnimationParam > *) 0 ;
  
  arg1 = (MeshAnimBakeInfo::MeshAnimBakeFrameInfo *)jarg1; 
  arg2 = (Engine2::Vector< AnimationParam > *)jarg2; 
  if (arg1) (arg1)->m_vFramesInfo = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshAnimBakeInfo_MeshAnimBakeFrameInfo_m_vFramesInfo_get(void * jarg1) {
  void * jresult ;
  MeshAnimBakeInfo::MeshAnimBakeFrameInfo *arg1 = (MeshAnimBakeInfo::MeshAnimBakeFrameInfo *) 0 ;
  Engine2::Vector< AnimationParam > *result = 0 ;
  
  arg1 = (MeshAnimBakeInfo::MeshAnimBakeFrameInfo *)jarg1; 
  result = (Engine2::Vector< AnimationParam > *)& ((arg1)->m_vFramesInfo);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MeshAnimBakeInfo_MeshAnimBakeFrameInfo(void * jarg1) {
  MeshAnimBakeInfo::MeshAnimBakeFrameInfo *arg1 = (MeshAnimBakeInfo::MeshAnimBakeFrameInfo *) 0 ;
  
  arg1 = (MeshAnimBakeInfo::MeshAnimBakeFrameInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MeshAnimBakeInfo() {
  void * jresult ;
  MeshAnimBakeInfo *result = 0 ;
  
  result = (MeshAnimBakeInfo *)new MeshAnimBakeInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshAnimBakeInfo_m_strSourceMeshName_set(void * jarg1, void * jarg2) {
  MeshAnimBakeInfo *arg1 = (MeshAnimBakeInfo *) 0 ;
  Engine2::String *arg2 = (Engine2::String *) 0 ;
  
  arg1 = (MeshAnimBakeInfo *)jarg1; 
  arg2 = (Engine2::String *)jarg2; 
  if (arg1) (arg1)->m_strSourceMeshName = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshAnimBakeInfo_m_strSourceMeshName_get(void * jarg1) {
  void * jresult ;
  MeshAnimBakeInfo *arg1 = (MeshAnimBakeInfo *) 0 ;
  Engine2::String *result = 0 ;
  
  arg1 = (MeshAnimBakeInfo *)jarg1; 
  result = (Engine2::String *)& ((arg1)->m_strSourceMeshName);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshAnimBakeInfo_m_pSourceMeshInfo_set(void * jarg1, void * jarg2) {
  MeshAnimBakeInfo *arg1 = (MeshAnimBakeInfo *) 0 ;
  IMeshInfo *arg2 = (IMeshInfo *) 0 ;
  
  arg1 = (MeshAnimBakeInfo *)jarg1; 
  arg2 = (IMeshInfo *)jarg2; 
  if (arg1) (arg1)->m_pSourceMeshInfo = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshAnimBakeInfo_m_pSourceMeshInfo_get(void * jarg1) {
  void * jresult ;
  MeshAnimBakeInfo *arg1 = (MeshAnimBakeInfo *) 0 ;
  IMeshInfo *result = 0 ;
  
  arg1 = (MeshAnimBakeInfo *)jarg1; 
  result = (IMeshInfo *) ((arg1)->m_pSourceMeshInfo);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshAnimBakeInfo_m_nFrameNumBase_set(void * jarg1, int jarg2) {
  MeshAnimBakeInfo *arg1 = (MeshAnimBakeInfo *) 0 ;
  int arg2 ;
  
  arg1 = (MeshAnimBakeInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_nFrameNumBase = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MeshAnimBakeInfo_m_nFrameNumBase_get(void * jarg1) {
  int jresult ;
  MeshAnimBakeInfo *arg1 = (MeshAnimBakeInfo *) 0 ;
  int result;
  
  arg1 = (MeshAnimBakeInfo *)jarg1; 
  result = (int) ((arg1)->m_nFrameNumBase);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshAnimBakeInfo_m_nMinLODLevel_set(void * jarg1, int jarg2) {
  MeshAnimBakeInfo *arg1 = (MeshAnimBakeInfo *) 0 ;
  int arg2 ;
  
  arg1 = (MeshAnimBakeInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_nMinLODLevel = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MeshAnimBakeInfo_m_nMinLODLevel_get(void * jarg1) {
  int jresult ;
  MeshAnimBakeInfo *arg1 = (MeshAnimBakeInfo *) 0 ;
  int result;
  
  arg1 = (MeshAnimBakeInfo *)jarg1; 
  result = (int) ((arg1)->m_nMinLODLevel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshAnimBakeInfo_m_bForceToBakeInSingleSubmesh_set(void * jarg1, unsigned int jarg2) {
  MeshAnimBakeInfo *arg1 = (MeshAnimBakeInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (MeshAnimBakeInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_bForceToBakeInSingleSubmesh = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MeshAnimBakeInfo_m_bForceToBakeInSingleSubmesh_get(void * jarg1) {
  unsigned int jresult ;
  MeshAnimBakeInfo *arg1 = (MeshAnimBakeInfo *) 0 ;
  bool result;
  
  arg1 = (MeshAnimBakeInfo *)jarg1; 
  result = (bool) ((arg1)->m_bForceToBakeInSingleSubmesh);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshAnimBakeInfo_m_strFramePrefix_set(void * jarg1, void * jarg2) {
  MeshAnimBakeInfo *arg1 = (MeshAnimBakeInfo *) 0 ;
  Engine2::String *arg2 = (Engine2::String *) 0 ;
  
  arg1 = (MeshAnimBakeInfo *)jarg1; 
  arg2 = (Engine2::String *)jarg2; 
  if (arg1) (arg1)->m_strFramePrefix = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshAnimBakeInfo_m_strFramePrefix_get(void * jarg1) {
  void * jresult ;
  MeshAnimBakeInfo *arg1 = (MeshAnimBakeInfo *) 0 ;
  Engine2::String *result = 0 ;
  
  arg1 = (MeshAnimBakeInfo *)jarg1; 
  result = (Engine2::String *)& ((arg1)->m_strFramePrefix);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshAnimBakeInfo_m_vAnimInfo_set(void * jarg1, void * jarg2) {
  MeshAnimBakeInfo *arg1 = (MeshAnimBakeInfo *) 0 ;
  Engine2::Vector< MeshAnimBakeInfo::MeshAnimBakeFrameInfo > *arg2 = (Engine2::Vector< MeshAnimBakeInfo::MeshAnimBakeFrameInfo > *) 0 ;
  
  arg1 = (MeshAnimBakeInfo *)jarg1; 
  arg2 = (Engine2::Vector< MeshAnimBakeInfo::MeshAnimBakeFrameInfo > *)jarg2; 
  if (arg1) (arg1)->m_vAnimInfo = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshAnimBakeInfo_m_vAnimInfo_get(void * jarg1) {
  void * jresult ;
  MeshAnimBakeInfo *arg1 = (MeshAnimBakeInfo *) 0 ;
  Engine2::Vector< MeshAnimBakeInfo::MeshAnimBakeFrameInfo > *result = 0 ;
  
  arg1 = (MeshAnimBakeInfo *)jarg1; 
  result = (Engine2::Vector< MeshAnimBakeInfo::MeshAnimBakeFrameInfo > *)& ((arg1)->m_vAnimInfo);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshAnimBakeInfo_m_strResultMeshName_set(void * jarg1, void * jarg2) {
  MeshAnimBakeInfo *arg1 = (MeshAnimBakeInfo *) 0 ;
  Engine2::String *arg2 = (Engine2::String *) 0 ;
  
  arg1 = (MeshAnimBakeInfo *)jarg1; 
  arg2 = (Engine2::String *)jarg2; 
  if (arg1) (arg1)->m_strResultMeshName = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshAnimBakeInfo_m_strResultMeshName_get(void * jarg1) {
  void * jresult ;
  MeshAnimBakeInfo *arg1 = (MeshAnimBakeInfo *) 0 ;
  Engine2::String *result = 0 ;
  
  arg1 = (MeshAnimBakeInfo *)jarg1; 
  result = (Engine2::String *)& ((arg1)->m_strResultMeshName);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshAnimBakeInfo_m_pResultMesh_set(void * jarg1, void * jarg2) {
  MeshAnimBakeInfo *arg1 = (MeshAnimBakeInfo *) 0 ;
  IMeshInfo *arg2 = (IMeshInfo *) 0 ;
  
  arg1 = (MeshAnimBakeInfo *)jarg1; 
  arg2 = (IMeshInfo *)jarg2; 
  if (arg1) (arg1)->m_pResultMesh = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshAnimBakeInfo_m_pResultMesh_get(void * jarg1) {
  void * jresult ;
  MeshAnimBakeInfo *arg1 = (MeshAnimBakeInfo *) 0 ;
  IMeshInfo *result = 0 ;
  
  arg1 = (MeshAnimBakeInfo *)jarg1; 
  result = (IMeshInfo *) ((arg1)->m_pResultMesh);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MeshAnimBakeInfo(void * jarg1) {
  MeshAnimBakeInfo *arg1 = (MeshAnimBakeInfo *) 0 ;
  
  arg1 = (MeshAnimBakeInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshFactory_CreateBaseMesh(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  Engine2::Render::MeshFactory *arg1 = (Engine2::Render::MeshFactory *) 0 ;
  char *arg2 = (char *) 0 ;
  CreationParameters *arg3 = (CreationParameters *) 0 ;
  IBaseMeshInfo *result = 0 ;
  
  arg1 = (Engine2::Render::MeshFactory *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (CreationParameters *)jarg3; 
  result = (IBaseMeshInfo *)(arg1)->CreateBaseMesh((char const *)arg2,(CreationParameters const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshFactory_CreateAnimatedMesh(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  Engine2::Render::MeshFactory *arg1 = (Engine2::Render::MeshFactory *) 0 ;
  char *arg2 = (char *) 0 ;
  CreationParameters *arg3 = (CreationParameters *) 0 ;
  IAnimatedMeshInfo *result = 0 ;
  
  arg1 = (Engine2::Render::MeshFactory *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (CreationParameters *)jarg3; 
  result = (IAnimatedMeshInfo *)(arg1)->CreateAnimatedMesh((char const *)arg2,(CreationParameters const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshFactory_CreateParticleEmitter(void * jarg1, void * jarg2) {
  void * jresult ;
  Engine2::Render::MeshFactory *arg1 = (Engine2::Render::MeshFactory *) 0 ;
  eParticleType arg2 ;
  eParticleType *argp2 ;
  IParticleEmitter *result = 0 ;
  
  arg1 = (Engine2::Render::MeshFactory *)jarg1; 
  argp2 = (eParticleType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eParticleType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (IParticleEmitter *)(arg1)->CreateParticleEmitter(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshFactory_MeshMerger(void * jarg1, void * jarg2) {
  Engine2::Render::MeshFactory *arg1 = (Engine2::Render::MeshFactory *) 0 ;
  MeshMergerInfo *arg2 = 0 ;
  
  arg1 = (Engine2::Render::MeshFactory *)jarg1; 
  arg2 = (MeshMergerInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MeshMergerInfo & type is null", 0);
    return ;
  } 
  (arg1)->MeshMerger(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshFactory_MeshMerger2(void * jarg1, void * jarg2) {
  Engine2::Render::MeshFactory *arg1 = (Engine2::Render::MeshFactory *) 0 ;
  MeshMergerInfo2 *arg2 = 0 ;
  
  arg1 = (Engine2::Render::MeshFactory *)jarg1; 
  arg2 = (MeshMergerInfo2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MeshMergerInfo2 & type is null", 0);
    return ;
  } 
  (arg1)->MeshMerger2(*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_MeshFactory_BakeAnimations(void * jarg1, void * jarg2) {
  int jresult ;
  Engine2::Render::MeshFactory *arg1 = (Engine2::Render::MeshFactory *) 0 ;
  MeshAnimBakeInfo *arg2 = 0 ;
  MeshAnimBakeInfo::ErrorCode result;
  
  arg1 = (Engine2::Render::MeshFactory *)jarg1; 
  arg2 = (MeshAnimBakeInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MeshAnimBakeInfo & type is null", 0);
    return 0;
  } 
  result = (MeshAnimBakeInfo::ErrorCode)(arg1)->BakeAnimations(*arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshFactory_CreateForest(void * jarg1) {
  Engine2::Render::MeshFactory *arg1 = (Engine2::Render::MeshFactory *) 0 ;
  
  arg1 = (Engine2::Render::MeshFactory *)jarg1; 
  (arg1)->CreateForest();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneGraphFactory_CreateOctTree__SWIG_0(void * jarg1) {
  void * jresult ;
  Engine2::Render::SceneGraphFactory *arg1 = (Engine2::Render::SceneGraphFactory *) 0 ;
  IVisAreaTree *result = 0 ;
  
  arg1 = (Engine2::Render::SceneGraphFactory *)jarg1; 
  result = (IVisAreaTree *)(arg1)->CreateOctTree();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneGraphFactory_CreateQuadTree__SWIG_0(void * jarg1) {
  void * jresult ;
  Engine2::Render::SceneGraphFactory *arg1 = (Engine2::Render::SceneGraphFactory *) 0 ;
  IVisAreaTree *result = 0 ;
  
  arg1 = (Engine2::Render::SceneGraphFactory *)jarg1; 
  result = (IVisAreaTree *)(arg1)->CreateQuadTree();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneGraphFactory_CreateSimpleVisAreaTree__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Engine2::Render::SceneGraphFactory *arg1 = (Engine2::Render::SceneGraphFactory *) 0 ;
  bool arg2 ;
  IVisAreaTree *result = 0 ;
  
  arg1 = (Engine2::Render::SceneGraphFactory *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (IVisAreaTree *)(arg1)->CreateSimpleVisAreaTree(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneGraphFactory_CreateSimpleVisAreaTree__SWIG_1(void * jarg1) {
  void * jresult ;
  Engine2::Render::SceneGraphFactory *arg1 = (Engine2::Render::SceneGraphFactory *) 0 ;
  IVisAreaTree *result = 0 ;
  
  arg1 = (Engine2::Render::SceneGraphFactory *)jarg1; 
  result = (IVisAreaTree *)(arg1)->CreateSimpleVisAreaTree();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneGraphFactory_CreateOctTree__SWIG_1(void * jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  Engine2::Render::SceneGraphFactory *arg1 = (Engine2::Render::SceneGraphFactory *) 0 ;
  CAABBox *arg2 = 0 ;
  float arg3 ;
  IVisAreaTree *result = 0 ;
  
  arg1 = (Engine2::Render::SceneGraphFactory *)jarg1; 
  arg2 = (CAABBox *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CAABBox & type is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  result = (IVisAreaTree *)(arg1)->CreateOctTree(*arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneGraphFactory_CreateQuadTree__SWIG_1(void * jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  Engine2::Render::SceneGraphFactory *arg1 = (Engine2::Render::SceneGraphFactory *) 0 ;
  CAABBox *arg2 = 0 ;
  float arg3 ;
  IVisAreaTree *result = 0 ;
  
  arg1 = (Engine2::Render::SceneGraphFactory *)jarg1; 
  arg2 = (CAABBox *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CAABBox & type is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  result = (IVisAreaTree *)(arg1)->CreateQuadTree(*arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneGraphFactory_CreateUmbraTree(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Engine2::Render::SceneGraphFactory *arg1 = (Engine2::Render::SceneGraphFactory *) 0 ;
  bool arg2 ;
  IVisAreaTree *result = 0 ;
  
  arg1 = (Engine2::Render::SceneGraphFactory *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (IVisAreaTree *)(arg1)->CreateUmbraTree(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneGraphFactory_CreatePortal(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  Engine2::Render::SceneGraphFactory *arg1 = (Engine2::Render::SceneGraphFactory *) 0 ;
  int arg2 ;
  int arg3 ;
  IPortal *result = 0 ;
  
  arg1 = (Engine2::Render::SceneGraphFactory *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (IPortal *)(arg1)->CreatePortal(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneGraphFactory_CreateVisArea(void * jarg1) {
  void * jresult ;
  Engine2::Render::SceneGraphFactory *arg1 = (Engine2::Render::SceneGraphFactory *) 0 ;
  IVisArea *result = 0 ;
  
  arg1 = (Engine2::Render::SceneGraphFactory *)jarg1; 
  result = (IVisArea *)(arg1)->CreateVisArea();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneGraphFactory_GetSceneGraph(void * jarg1) {
  void * jresult ;
  Engine2::Render::SceneGraphFactory *arg1 = (Engine2::Render::SceneGraphFactory *) 0 ;
  ISceneGraph *result = 0 ;
  
  arg1 = (Engine2::Render::SceneGraphFactory *)jarg1; 
  result = (ISceneGraph *)(arg1)->GetSceneGraph();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneGraphFactory_RecreateSceneGraph(void * jarg1) {
  Engine2::Render::SceneGraphFactory *arg1 = (Engine2::Render::SceneGraphFactory *) 0 ;
  
  arg1 = (Engine2::Render::SceneGraphFactory *)jarg1; 
  (arg1)->RecreateSceneGraph();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneGraphFactory_ForceSimpleMainVisAreaTree__SWIG_0(void * jarg1, unsigned int jarg2) {
  Engine2::Render::SceneGraphFactory *arg1 = (Engine2::Render::SceneGraphFactory *) 0 ;
  bool arg2 ;
  
  arg1 = (Engine2::Render::SceneGraphFactory *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->ForceSimpleMainVisAreaTree(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneGraphFactory_ForceSimpleMainVisAreaTree__SWIG_1(void * jarg1) {
  Engine2::Render::SceneGraphFactory *arg1 = (Engine2::Render::SceneGraphFactory *) 0 ;
  
  arg1 = (Engine2::Render::SceneGraphFactory *)jarg1; 
  (arg1)->ForceSimpleMainVisAreaTree();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneGraphFactory_ForceOctTreeAsMainVisArea(void * jarg1, void * jarg2, float jarg3) {
  Engine2::Render::SceneGraphFactory *arg1 = (Engine2::Render::SceneGraphFactory *) 0 ;
  CAABBox *arg2 = 0 ;
  float arg3 ;
  
  arg1 = (Engine2::Render::SceneGraphFactory *)jarg1; 
  arg2 = (CAABBox *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CAABBox & type is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  (arg1)->ForceOctTreeAsMainVisArea(*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneGraphFactory_ForceQuadTreeAsMainVisArea(void * jarg1, void * jarg2, float jarg3) {
  Engine2::Render::SceneGraphFactory *arg1 = (Engine2::Render::SceneGraphFactory *) 0 ;
  CAABBox *arg2 = 0 ;
  float arg3 ;
  
  arg1 = (Engine2::Render::SceneGraphFactory *)jarg1; 
  arg2 = (CAABBox *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CAABBox & type is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  (arg1)->ForceQuadTreeAsMainVisArea(*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneGraphFactory_ForceUmbraTreeAsMainVisArea(void * jarg1, unsigned int jarg2) {
  Engine2::Render::SceneGraphFactory *arg1 = (Engine2::Render::SceneGraphFactory *) 0 ;
  bool arg2 ;
  
  arg1 = (Engine2::Render::SceneGraphFactory *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->ForceUmbraTreeAsMainVisArea(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneGraphFactory_DeleteVisAreaTree(void * jarg1, void * jarg2) {
  Engine2::Render::SceneGraphFactory *arg1 = (Engine2::Render::SceneGraphFactory *) 0 ;
  IVisAreaTree *arg2 = (IVisAreaTree *) 0 ;
  
  arg1 = (Engine2::Render::SceneGraphFactory *)jarg1; 
  arg2 = (IVisAreaTree *)jarg2; 
  (arg1)->DeleteVisAreaTree(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IDecalManager(void * jarg1) {
  Engine2::Render::IDecalManager *arg1 = (Engine2::Render::IDecalManager *) 0 ;
  
  arg1 = (Engine2::Render::IDecalManager *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IDecalManager_SpawnDecal(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Engine2::Render::IDecalManager *arg1 = (Engine2::Render::IDecalManager *) 0 ;
  EngineDecalInfo *arg2 = 0 ;
  uint32 result;
  
  arg1 = (Engine2::Render::IDecalManager *)jarg1; 
  arg2 = (EngineDecalInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "EngineDecalInfo & type is null", 0);
    return 0;
  } 
  result = (uint32)(arg1)->SpawnDecal(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IDecalManager_MoveDecal(void * jarg1, unsigned int jarg2, void * jarg3) {
  unsigned int jresult ;
  Engine2::Render::IDecalManager *arg1 = (Engine2::Render::IDecalManager *) 0 ;
  uint32 arg2 ;
  EngineDecalInfo *arg3 = 0 ;
  bool result;
  
  arg1 = (Engine2::Render::IDecalManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (EngineDecalInfo *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "EngineDecalInfo & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->MoveDecal(arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IDecalManager_GetDecalMaterial(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Engine2::Render::IDecalManager *arg1 = (Engine2::Render::IDecalManager *) 0 ;
  uint32 arg2 ;
  IMaterial *result = 0 ;
  
  arg1 = (Engine2::Render::IDecalManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (IMaterial *)(arg1)->GetDecalMaterial(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IDecalManager_GetDecalMesh(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Engine2::Render::IDecalManager *arg1 = (Engine2::Render::IDecalManager *) 0 ;
  uint32 arg2 ;
  IMeshInfo *result = 0 ;
  
  arg1 = (Engine2::Render::IDecalManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (IMeshInfo *)(arg1)->GetDecalMesh(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IDecalManager_RemoveDecal(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  Engine2::Render::IDecalManager *arg1 = (Engine2::Render::IDecalManager *) 0 ;
  uint32 arg2 ;
  bool result;
  
  arg1 = (Engine2::Render::IDecalManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (bool)(arg1)->RemoveDecal(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IDecalManager_SetTransparency(void * jarg1, unsigned int jarg2, float jarg3) {
  Engine2::Render::IDecalManager *arg1 = (Engine2::Render::IDecalManager *) 0 ;
  uint32 arg2 ;
  float arg3 ;
  
  arg1 = (Engine2::Render::IDecalManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->SetTransparency(arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_IDecalManager_GetTransparency(void * jarg1, unsigned int jarg2) {
  float jresult ;
  Engine2::Render::IDecalManager *arg1 = (Engine2::Render::IDecalManager *) 0 ;
  uint32 arg2 ;
  float result;
  
  arg1 = (Engine2::Render::IDecalManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (float)(arg1)->GetTransparency(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AnimationManager_PreloadAnimation(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  Engine2::Render::AnimationManager *arg1 = (Engine2::Render::AnimationManager *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (Engine2::Render::AnimationManager *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->PreloadAnimation((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationManager_UnloadAnimation(void * jarg1, char * jarg2) {
  Engine2::Render::AnimationManager *arg1 = (Engine2::Render::AnimationManager *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Engine2::Render::AnimationManager *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->UnloadAnimation((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AnimationManager(void * jarg1) {
  Engine2::Render::AnimationManager *arg1 = (Engine2::Render::AnimationManager *) 0 ;
  
  arg1 = (Engine2::Render::AnimationManager *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IDeviceDependendentInfo_GetDeviceType(void * jarg1) {
  int jresult ;
  Engine2::Render::IDeviceDependendentInfo *arg1 = (Engine2::Render::IDeviceDependendentInfo *) 0 ;
  Engine2::Render::EDeviceType result;
  
  arg1 = (Engine2::Render::IDeviceDependendentInfo *)jarg1; 
  result = (Engine2::Render::EDeviceType)(arg1)->GetDeviceType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IDeviceDependendentInfo_GetSupportedTextureFormatsCount(void * jarg1) {
  int jresult ;
  Engine2::Render::IDeviceDependendentInfo *arg1 = (Engine2::Render::IDeviceDependendentInfo *) 0 ;
  int result;
  
  arg1 = (Engine2::Render::IDeviceDependendentInfo *)jarg1; 
  result = (int)(arg1)->GetSupportedTextureFormatsCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IDeviceDependendentInfo_GetSupportedTextureFormat(void * jarg1, int jarg2) {
  char * jresult ;
  Engine2::Render::IDeviceDependendentInfo *arg1 = (Engine2::Render::IDeviceDependendentInfo *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  arg1 = (Engine2::Render::IDeviceDependendentInfo *)jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)(arg1)->GetSupportedTextureFormat(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IDeviceDependendentInfo(void * jarg1) {
  Engine2::Render::IDeviceDependendentInfo *arg1 = (Engine2::Render::IDeviceDependendentInfo *) 0 ;
  
  arg1 = (Engine2::Render::IDeviceDependendentInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SMemTextureInfo_m_iWidth_set(void * jarg1, unsigned int jarg2) {
  SMemTextureInfo *arg1 = (SMemTextureInfo *) 0 ;
  uint32 arg2 ;
  
  arg1 = (SMemTextureInfo *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->m_iWidth = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SMemTextureInfo_m_iWidth_get(void * jarg1) {
  unsigned int jresult ;
  SMemTextureInfo *arg1 = (SMemTextureInfo *) 0 ;
  uint32 result;
  
  arg1 = (SMemTextureInfo *)jarg1; 
  result = (uint32) ((arg1)->m_iWidth);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SMemTextureInfo_m_iHeight_set(void * jarg1, unsigned int jarg2) {
  SMemTextureInfo *arg1 = (SMemTextureInfo *) 0 ;
  uint32 arg2 ;
  
  arg1 = (SMemTextureInfo *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->m_iHeight = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SMemTextureInfo_m_iHeight_get(void * jarg1) {
  unsigned int jresult ;
  SMemTextureInfo *arg1 = (SMemTextureInfo *) 0 ;
  uint32 result;
  
  arg1 = (SMemTextureInfo *)jarg1; 
  result = (uint32) ((arg1)->m_iHeight);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SMemTextureInfo_m_Format_set(void * jarg1, void * jarg2) {
  SMemTextureInfo *arg1 = (SMemTextureInfo *) 0 ;
  TEXFORMAT arg2 ;
  TEXFORMAT *argp2 ;
  
  arg1 = (SMemTextureInfo *)jarg1; 
  argp2 = (TEXFORMAT *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null TEXFORMAT", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_Format = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SMemTextureInfo_m_Format_get(void * jarg1) {
  void * jresult ;
  SMemTextureInfo *arg1 = (SMemTextureInfo *) 0 ;
  TEXFORMAT result;
  
  arg1 = (SMemTextureInfo *)jarg1; 
  result =  ((arg1)->m_Format);
  jresult = new TEXFORMAT((const TEXFORMAT &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SMemTextureInfo() {
  void * jresult ;
  SMemTextureInfo *result = 0 ;
  
  result = (SMemTextureInfo *)new SMemTextureInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SMemTextureInfo(void * jarg1) {
  SMemTextureInfo *arg1 = (SMemTextureInfo *) 0 ;
  
  arg1 = (SMemTextureInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SFontStatistics_m_atlasHeight_set(void * jarg1, unsigned int jarg2) {
  SFontStatistics *arg1 = (SFontStatistics *) 0 ;
  uint32 arg2 ;
  
  arg1 = (SFontStatistics *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->m_atlasHeight = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SFontStatistics_m_atlasHeight_get(void * jarg1) {
  unsigned int jresult ;
  SFontStatistics *arg1 = (SFontStatistics *) 0 ;
  uint32 result;
  
  arg1 = (SFontStatistics *)jarg1; 
  result = (uint32) ((arg1)->m_atlasHeight);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SFontStatistics_m_atlasWidth_set(void * jarg1, unsigned int jarg2) {
  SFontStatistics *arg1 = (SFontStatistics *) 0 ;
  uint32 arg2 ;
  
  arg1 = (SFontStatistics *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->m_atlasWidth = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SFontStatistics_m_atlasWidth_get(void * jarg1) {
  unsigned int jresult ;
  SFontStatistics *arg1 = (SFontStatistics *) 0 ;
  uint32 result;
  
  arg1 = (SFontStatistics *)jarg1; 
  result = (uint32) ((arg1)->m_atlasWidth);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SFontStatistics_m_textureCount_set(void * jarg1, unsigned int jarg2) {
  SFontStatistics *arg1 = (SFontStatistics *) 0 ;
  uint32 arg2 ;
  
  arg1 = (SFontStatistics *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->m_textureCount = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SFontStatistics_m_textureCount_get(void * jarg1) {
  unsigned int jresult ;
  SFontStatistics *arg1 = (SFontStatistics *) 0 ;
  uint32 result;
  
  arg1 = (SFontStatistics *)jarg1; 
  result = (uint32) ((arg1)->m_textureCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SFontStatistics_m_generationTimeMs_set(void * jarg1, unsigned int jarg2) {
  SFontStatistics *arg1 = (SFontStatistics *) 0 ;
  uint32 arg2 ;
  
  arg1 = (SFontStatistics *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->m_generationTimeMs = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SFontStatistics_m_generationTimeMs_get(void * jarg1) {
  unsigned int jresult ;
  SFontStatistics *arg1 = (SFontStatistics *) 0 ;
  uint32 result;
  
  arg1 = (SFontStatistics *)jarg1; 
  result = (uint32) ((arg1)->m_generationTimeMs);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SFontStatistics_m_textures_set(void * jarg1, void * jarg2) {
  SFontStatistics *arg1 = (SFontStatistics *) 0 ;
  uint32 *arg2 ;
  
  arg1 = (SFontStatistics *)jarg1; 
  arg2 = (uint32 *)jarg2; 
  {
    size_t ii;
    uint32 *b = (uint32 *) arg1->m_textures;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((uint32 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SFontStatistics_m_textures_get(void * jarg1) {
  void * jresult ;
  SFontStatistics *arg1 = (SFontStatistics *) 0 ;
  uint32 *result = 0 ;
  
  arg1 = (SFontStatistics *)jarg1; 
  result = (uint32 *)(uint32 *) ((arg1)->m_textures);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SFontStatistics() {
  void * jresult ;
  SFontStatistics *result = 0 ;
  
  result = (SFontStatistics *)new SFontStatistics();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SFontStatistics(void * jarg1) {
  SFontStatistics *arg1 = (SFontStatistics *) 0 ;
  
  arg1 = (SFontStatistics *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IDebugDrawInterface(void * jarg1) {
  IDebugDrawInterface *arg1 = (IDebugDrawInterface *) 0 ;
  
  arg1 = (IDebugDrawInterface *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IDebugDrawInterface_DrawAABB(void * jarg1, void * jarg2, int jarg3, char * jarg4) {
  IDebugDrawInterface *arg1 = (IDebugDrawInterface *) 0 ;
  CAABBox *arg2 = 0 ;
  DWORD arg3 ;
  char *arg4 = (char *) 0 ;
  
  arg1 = (IDebugDrawInterface *)jarg1; 
  arg2 = (CAABBox *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CAABBox const & type is null", 0);
    return ;
  } 
  arg3 = (DWORD)jarg3; 
  arg4 = (char *)jarg4; 
  (arg1)->DrawAABB((CAABBox const &)*arg2,arg3,(char const *)arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IDebugDrawInterface_DrawVector(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  IDebugDrawInterface *arg1 = (IDebugDrawInterface *) 0 ;
  CVec3 *arg2 = 0 ;
  CVec3 *arg3 = 0 ;
  DWORD arg4 ;
  
  arg1 = (IDebugDrawInterface *)jarg1; 
  arg2 = (CVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec3 const & type is null", 0);
    return ;
  } 
  arg3 = (CVec3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec3 const & type is null", 0);
    return ;
  } 
  arg4 = (DWORD)jarg4; 
  (arg1)->DrawVector((CVec3 const &)*arg2,(CVec3 const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IDebugDrawInterface_DrawImage2D(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5, int jarg6) {
  IDebugDrawInterface *arg1 = (IDebugDrawInterface *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  int arg6 ;
  
  arg1 = (IDebugDrawInterface *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (int)jarg6; 
  (arg1)->DrawImage2D(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IRender(void * jarg1) {
  IRender *arg1 = (IRender *) 0 ;
  
  arg1 = (IRender *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IRender_GetDebugDrawInterface(void * jarg1) {
  void * jresult ;
  IRender *arg1 = (IRender *) 0 ;
  IDebugDrawInterface *result = 0 ;
  
  arg1 = (IRender *)jarg1; 
  result = (IDebugDrawInterface *)(arg1)->GetDebugDrawInterface();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IRender_GetRendererType(void * jarg1) {
  int jresult ;
  IRender *arg1 = (IRender *) 0 ;
  ERenderer result;
  
  arg1 = (IRender *)jarg1; 
  result = (ERenderer)(arg1)->GetRendererType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IRender_GetMaxRenderProfile(void * jarg1) {
  int jresult ;
  IRender *arg1 = (IRender *) 0 ;
  int result;
  
  arg1 = (IRender *)jarg1; 
  result = (int)((IRender const *)arg1)->GetMaxRenderProfile();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRender_SetFixedFrameRate(void * jarg1, int jarg2) {
  IRender *arg1 = (IRender *) 0 ;
  int arg2 ;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetFixedFrameRate(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRender_SetApplication(void * jarg1, void * jarg2) {
  IRender *arg1 = (IRender *) 0 ;
  ICore *arg2 = (ICore *) 0 ;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (ICore *)jarg2; 
  (arg1)->SetApplication(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IRender_AddTexture__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3, int jarg4, void * jarg5) {
  void * jresult ;
  IRender *arg1 = (IRender *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  int arg4 ;
  eMeshType arg5 ;
  eMeshType *argp5 ;
  TEXNUM result;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  argp5 = (eMeshType *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eMeshType", 0);
    return 0;
  }
  arg5 = *argp5; 
  result = (arg1)->AddTexture((char const *)arg2,arg3,arg4,arg5);
  jresult = new TEXNUM((const TEXNUM &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IRender_AddTexture__SWIG_1(void * jarg1, char * jarg2, unsigned int jarg3, int jarg4) {
  void * jresult ;
  IRender *arg1 = (IRender *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  int arg4 ;
  TEXNUM result;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  result = (arg1)->AddTexture((char const *)arg2,arg3,arg4);
  jresult = new TEXNUM((const TEXNUM &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IRender_AddTexture__SWIG_2(void * jarg1, char * jarg2, unsigned int jarg3) {
  void * jresult ;
  IRender *arg1 = (IRender *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  TEXNUM result;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->AddTexture((char const *)arg2,arg3);
  jresult = new TEXNUM((const TEXNUM &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IRender_AddTexture__SWIG_3(void * jarg1, char * jarg2) {
  void * jresult ;
  IRender *arg1 = (IRender *) 0 ;
  char *arg2 = (char *) 0 ;
  TEXNUM result;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (arg1)->AddTexture((char const *)arg2);
  jresult = new TEXNUM((const TEXNUM &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IRender_GetShaderCombinations(void * jarg1) {
  void * jresult ;
  IRender *arg1 = (IRender *) 0 ;
  TShaderCombinations *result = 0 ;
  
  arg1 = (IRender *)jarg1; 
  result = (TShaderCombinations *)(arg1)->GetShaderCombinations();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IRender_GetShaderMask(void * jarg1, char * jarg2) {
  void * jresult ;
  IRender *arg1 = (IRender *) 0 ;
  char *arg2 = (char *) 0 ;
  TShaderMask result;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (arg1)->GetShaderMask((char const *)arg2);
  jresult = new TShaderMask((const TShaderMask &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IRender_AddEffect__SWIG_0(void * jarg1, char * jarg2, int jarg3, void * jarg4, int jarg5) {
  int jresult ;
  IRender *arg1 = (IRender *) 0 ;
  char *arg2 = (char *) 0 ;
  BOOL arg3 ;
  TShaderMask arg4 ;
  BOOL arg5 ;
  TShaderMask *argp4 ;
  int result;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (BOOL)jarg3; 
  argp4 = (TShaderMask *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null TShaderMask", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (BOOL)jarg5; 
  result = (int)(arg1)->AddEffect((char const *)arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IRender_AddEffect__SWIG_1(void * jarg1, char * jarg2, int jarg3, void * jarg4) {
  int jresult ;
  IRender *arg1 = (IRender *) 0 ;
  char *arg2 = (char *) 0 ;
  BOOL arg3 ;
  TShaderMask arg4 ;
  TShaderMask *argp4 ;
  int result;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (BOOL)jarg3; 
  argp4 = (TShaderMask *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null TShaderMask", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (int)(arg1)->AddEffect((char const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRender_SetTexture(void * jarg1, void * jarg2, int jarg3) {
  IRender *arg1 = (IRender *) 0 ;
  TEXNUM arg2 ;
  int arg3 ;
  TEXNUM *argp2 ;
  
  arg1 = (IRender *)jarg1; 
  argp2 = (TEXNUM *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null TEXNUM", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = (int)jarg3; 
  (arg1)->SetTexture(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRender_RemoveTexture(void * jarg1, int jarg2) {
  IRender *arg1 = (IRender *) 0 ;
  int arg2 ;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->RemoveTexture(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IRender_FindTexture(void * jarg1, char * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  IRender *arg1 = (IRender *) 0 ;
  char *arg2 = (char *) 0 ;
  TEXFORMAT arg3 ;
  BUFPOOL arg4 ;
  TEXFORMAT *argp3 ;
  BUFPOOL *argp4 ;
  TEXNUM result;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (char *)jarg2; 
  argp3 = (TEXFORMAT *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null TEXFORMAT", 0);
    return 0;
  }
  arg3 = *argp3; 
  argp4 = (BUFPOOL *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BUFPOOL", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (arg1)->FindTexture((char const *)arg2,arg3,arg4);
  jresult = new TEXNUM((const TEXNUM &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IRender_CreateClientGeom(void * jarg1) {
  void * jresult ;
  IRender *arg1 = (IRender *) 0 ;
  IGameRenderObject *result = 0 ;
  
  arg1 = (IRender *)jarg1; 
  result = (IGameRenderObject *)(arg1)->CreateClientGeom();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRender_SetupVertexFog(void * jarg1, int jarg2, int jarg3, int jarg4, float jarg5, float jarg6, float jarg7) {
  IRender *arg1 = (IRender *) 0 ;
  DWORD arg2 ;
  DWORD arg3 ;
  BOOL arg4 ;
  FLOAT arg5 ;
  FLOAT arg6 ;
  FLOAT arg7 ;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (DWORD)jarg2; 
  arg3 = (DWORD)jarg3; 
  arg4 = (BOOL)jarg4; 
  arg5 = (FLOAT)jarg5; 
  arg6 = (FLOAT)jarg6; 
  arg7 = (FLOAT)jarg7; 
  (arg1)->SetupVertexFog(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IRender_Init__SWIG_0(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, int jarg6, char * jarg7, int jarg8) {
  void * jresult ;
  IRender *arg1 = (IRender *) 0 ;
  WIN_HWND arg2 ;
  DWORD arg3 ;
  DWORD arg4 ;
  DWORD arg5 ;
  BOOL arg6 ;
  char *arg7 = (char *) 0 ;
  BOOL arg8 ;
  WIN_HWND *argp2 ;
  HRESULT result;
  
  arg1 = (IRender *)jarg1; 
  argp2 = (WIN_HWND *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null WIN_HWND", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (DWORD)jarg3; 
  arg4 = (DWORD)jarg4; 
  arg5 = (DWORD)jarg5; 
  arg6 = (BOOL)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (BOOL)jarg8; 
  result = (arg1)->Init(arg2,arg3,arg4,arg5,arg6,(char const *)arg7,arg8);
  jresult = new HRESULT((const HRESULT &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IRender_Init__SWIG_1(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, int jarg6, char * jarg7) {
  void * jresult ;
  IRender *arg1 = (IRender *) 0 ;
  WIN_HWND arg2 ;
  DWORD arg3 ;
  DWORD arg4 ;
  DWORD arg5 ;
  BOOL arg6 ;
  char *arg7 = (char *) 0 ;
  WIN_HWND *argp2 ;
  HRESULT result;
  
  arg1 = (IRender *)jarg1; 
  argp2 = (WIN_HWND *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null WIN_HWND", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (DWORD)jarg3; 
  arg4 = (DWORD)jarg4; 
  arg5 = (DWORD)jarg5; 
  arg6 = (BOOL)jarg6; 
  arg7 = (char *)jarg7; 
  result = (arg1)->Init(arg2,arg3,arg4,arg5,arg6,(char const *)arg7);
  jresult = new HRESULT((const HRESULT &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IRender_Init__SWIG_2(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, int jarg6) {
  void * jresult ;
  IRender *arg1 = (IRender *) 0 ;
  WIN_HWND arg2 ;
  DWORD arg3 ;
  DWORD arg4 ;
  DWORD arg5 ;
  BOOL arg6 ;
  WIN_HWND *argp2 ;
  HRESULT result;
  
  arg1 = (IRender *)jarg1; 
  argp2 = (WIN_HWND *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null WIN_HWND", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (DWORD)jarg3; 
  arg4 = (DWORD)jarg4; 
  arg5 = (DWORD)jarg5; 
  arg6 = (BOOL)jarg6; 
  result = (arg1)->Init(arg2,arg3,arg4,arg5,arg6);
  jresult = new HRESULT((const HRESULT &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRender_Close(void * jarg1) {
  IRender *arg1 = (IRender *) 0 ;
  
  arg1 = (IRender *)jarg1; 
  (arg1)->Close();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRender_Clear(void * jarg1) {
  IRender *arg1 = (IRender *) 0 ;
  
  arg1 = (IRender *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRender_ClearMeshes(void * jarg1) {
  IRender *arg1 = (IRender *) 0 ;
  
  arg1 = (IRender *)jarg1; 
  (arg1)->ClearMeshes();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IRender_RenderFrame(void * jarg1) {
  void * jresult ;
  IRender *arg1 = (IRender *) 0 ;
  HRESULT result;
  
  arg1 = (IRender *)jarg1; 
  result = (arg1)->RenderFrame();
  jresult = new HRESULT((const HRESULT &)result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_IRender_GetTime(void * jarg1) {
  double jresult ;
  IRender *arg1 = (IRender *) 0 ;
  double result;
  
  arg1 = (IRender *)jarg1; 
  result = (double)(arg1)->GetTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRender_SetSplashTexture(void * jarg1, int jarg2) {
  IRender *arg1 = (IRender *) 0 ;
  int arg2 ;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetSplashTexture(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IRender_GenerateLightmap(void * jarg1, int jarg2) {
  unsigned int jresult ;
  IRender *arg1 = (IRender *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->GenerateLightmap(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IRender_EnumAAFormats(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  IRender *arg1 = (IRender *) 0 ;
  SDispFormat *arg2 = 0 ;
  SAAFormat *arg3 = (SAAFormat *) 0 ;
  int result;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (SDispFormat *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SDispFormat const & type is null", 0);
    return 0;
  } 
  arg3 = (SAAFormat *)jarg3; 
  result = (int)(arg1)->EnumAAFormats((SDispFormat const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRender_BeginLevel(void * jarg1) {
  IRender *arg1 = (IRender *) 0 ;
  
  arg1 = (IRender *)jarg1; 
  (arg1)->BeginLevel();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRender_EndLevel(void * jarg1) {
  IRender *arg1 = (IRender *) 0 ;
  
  arg1 = (IRender *)jarg1; 
  (arg1)->EndLevel();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRender_RegisterSceneObject(void * jarg1, void * jarg2) {
  IRender *arg1 = (IRender *) 0 ;
  IScene *arg2 = (IScene *) 0 ;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (IScene *)jarg2; 
  (arg1)->RegisterSceneObject(arg2);
}


SWIGEXPORT double SWIGSTDCALL CSharp_IRender_GetElapsedTime(void * jarg1) {
  double jresult ;
  IRender *arg1 = (IRender *) 0 ;
  double result;
  
  arg1 = (IRender *)jarg1; 
  result = (double)(arg1)->GetElapsedTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IRender_GetBPP(void * jarg1) {
  int jresult ;
  IRender *arg1 = (IRender *) 0 ;
  int result;
  
  arg1 = (IRender *)jarg1; 
  result = (int)(arg1)->GetBPP();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IRender_GetWidth(void * jarg1) {
  int jresult ;
  IRender *arg1 = (IRender *) 0 ;
  int result;
  
  arg1 = (IRender *)jarg1; 
  result = (int)(arg1)->GetWidth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IRender_GetHeight(void * jarg1) {
  int jresult ;
  IRender *arg1 = (IRender *) 0 ;
  int result;
  
  arg1 = (IRender *)jarg1; 
  result = (int)(arg1)->GetHeight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IRender_ToggleFullscreen(void * jarg1) {
  void * jresult ;
  IRender *arg1 = (IRender *) 0 ;
  HRESULT result;
  
  arg1 = (IRender *)jarg1; 
  result = (arg1)->ToggleFullscreen();
  jresult = new HRESULT((const HRESULT &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IRender_ReCreateScreen(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5) {
  void * jresult ;
  IRender *arg1 = (IRender *) 0 ;
  DWORD arg2 ;
  DWORD arg3 ;
  DWORD arg4 ;
  BOOL arg5 ;
  HRESULT result;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (DWORD)jarg2; 
  arg3 = (DWORD)jarg3; 
  arg4 = (DWORD)jarg4; 
  arg5 = (BOOL)jarg5; 
  result = (arg1)->ReCreateScreen(arg2,arg3,arg4,arg5);
  jresult = new HRESULT((const HRESULT &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRender_SetDebugState(void * jarg1, int jarg2) {
  IRender *arg1 = (IRender *) 0 ;
  int arg2 ;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetDebugState(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRender_ForceWireframe(void * jarg1, int jarg2) {
  IRender *arg1 = (IRender *) 0 ;
  BOOL arg2 ;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (BOOL)jarg2; 
  (arg1)->ForceWireframe(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRender_SaveScreenshot(void * jarg1) {
  IRender *arg1 = (IRender *) 0 ;
  
  arg1 = (IRender *)jarg1; 
  (arg1)->SaveScreenshot();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRender_SaveScreenShot(void * jarg1, char * jarg2) {
  IRender *arg1 = (IRender *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SaveScreenShot((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRender_RenderOnlyGUI(void * jarg1, unsigned int jarg2) {
  IRender *arg1 = (IRender *) 0 ;
  bool arg2 ;
  
  arg1 = (IRender *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->RenderOnlyGUI(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_IRender_AddFont__SWIG_0(void * jarg1, char * jarg2, int jarg3, int jarg4) {
  int jresult ;
  IRender *arg1 = (IRender *) 0 ;
  char *arg2 = (char *) 0 ;
  DWORD arg3 ;
  DWORD arg4 ;
  int result;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (DWORD)jarg3; 
  arg4 = (DWORD)jarg4; 
  result = (int)(arg1)->AddFont((char const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IRender_AddFont__SWIG_1(void * jarg1, char * jarg2, int jarg3) {
  int jresult ;
  IRender *arg1 = (IRender *) 0 ;
  char *arg2 = (char *) 0 ;
  DWORD arg3 ;
  int result;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (DWORD)jarg3; 
  result = (int)(arg1)->AddFont((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IRender_AddFont__SWIG_2(void * jarg1, char * jarg2, char * jarg3, int jarg4) {
  int jresult ;
  IRender *arg1 = (IRender *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  DWORD arg4 ;
  int result;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (DWORD)jarg4; 
  result = (int)(arg1)->AddFont((char const *)arg2,(char const *)arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRender_GetFontStatistics(void * jarg1, int jarg2, void * jarg3) {
  IRender *arg1 = (IRender *) 0 ;
  int arg2 ;
  SFontStatistics *arg3 = (SFontStatistics *) 0 ;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (SFontStatistics *)jarg3; 
  (arg1)->GetFontStatistics(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IRender_DrawText__SWIG_0(void * jarg1, int jarg2, float jarg3, float jarg4, int jarg5, char * jarg6, int jarg7) {
  void * jresult ;
  IRender *arg1 = (IRender *) 0 ;
  int arg2 ;
  FLOAT arg3 ;
  FLOAT arg4 ;
  DWORD arg5 ;
  char *arg6 = (char *) 0 ;
  DWORD arg7 ;
  HRESULT result;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (FLOAT)jarg3; 
  arg4 = (FLOAT)jarg4; 
  arg5 = (DWORD)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (DWORD)jarg7; 
  result = (arg1)->DrawText(arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
  jresult = new HRESULT((const HRESULT &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IRender_DrawText__SWIG_1(void * jarg1, int jarg2, float jarg3, float jarg4, int jarg5, char * jarg6) {
  void * jresult ;
  IRender *arg1 = (IRender *) 0 ;
  int arg2 ;
  FLOAT arg3 ;
  FLOAT arg4 ;
  DWORD arg5 ;
  char *arg6 = (char *) 0 ;
  HRESULT result;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (FLOAT)jarg3; 
  arg4 = (FLOAT)jarg4; 
  arg5 = (DWORD)jarg5; 
  arg6 = (char *)jarg6; 
  result = (arg1)->DrawText(arg2,arg3,arg4,arg5,(char const *)arg6);
  jresult = new HRESULT((const HRESULT &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IRender_DrawTextScaled__SWIG_0(void * jarg1, int jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7, int jarg8, char * jarg9, int jarg10) {
  void * jresult ;
  IRender *arg1 = (IRender *) 0 ;
  int arg2 ;
  FLOAT arg3 ;
  FLOAT arg4 ;
  FLOAT arg5 ;
  FLOAT arg6 ;
  FLOAT arg7 ;
  DWORD arg8 ;
  char *arg9 = (char *) 0 ;
  DWORD arg10 ;
  HRESULT result;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (FLOAT)jarg3; 
  arg4 = (FLOAT)jarg4; 
  arg5 = (FLOAT)jarg5; 
  arg6 = (FLOAT)jarg6; 
  arg7 = (FLOAT)jarg7; 
  arg8 = (DWORD)jarg8; 
  arg9 = (char *)jarg9; 
  arg10 = (DWORD)jarg10; 
  result = (arg1)->DrawTextScaled(arg2,arg3,arg4,arg5,arg6,arg7,arg8,(char const *)arg9,arg10);
  jresult = new HRESULT((const HRESULT &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IRender_DrawTextScaled__SWIG_1(void * jarg1, int jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7, int jarg8, char * jarg9) {
  void * jresult ;
  IRender *arg1 = (IRender *) 0 ;
  int arg2 ;
  FLOAT arg3 ;
  FLOAT arg4 ;
  FLOAT arg5 ;
  FLOAT arg6 ;
  FLOAT arg7 ;
  DWORD arg8 ;
  char *arg9 = (char *) 0 ;
  HRESULT result;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (FLOAT)jarg3; 
  arg4 = (FLOAT)jarg4; 
  arg5 = (FLOAT)jarg5; 
  arg6 = (FLOAT)jarg6; 
  arg7 = (FLOAT)jarg7; 
  arg8 = (DWORD)jarg8; 
  arg9 = (char *)jarg9; 
  result = (arg1)->DrawTextScaled(arg2,arg3,arg4,arg5,arg6,arg7,arg8,(char const *)arg9);
  jresult = new HRESULT((const HRESULT &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRender_GetTextExtent(void * jarg1, int jarg2, char * jarg3, void * jarg4) {
  IRender *arg1 = (IRender *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  SIZE *arg4 = (SIZE *) 0 ;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (SIZE *)jarg4; 
  (arg1)->GetTextExtent(arg2,(char const *)arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRender_GetCharExtent(void * jarg1, int jarg2, char jarg3, void * jarg4) {
  IRender *arg1 = (IRender *) 0 ;
  int arg2 ;
  char arg3 ;
  SIZE *arg4 = (SIZE *) 0 ;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char)jarg3; 
  arg4 = (SIZE *)jarg4; 
  (arg1)->GetCharExtent(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRender_SetDebugInfoColor(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5) {
  IRender *arg1 = (IRender *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  (arg1)->SetDebugInfoColor(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IRender_CreateGUIObject(void * jarg1) {
  void * jresult ;
  IRender *arg1 = (IRender *) 0 ;
  IGUIRenderObject *result = 0 ;
  
  arg1 = (IRender *)jarg1; 
  result = (IGUIRenderObject *)(arg1)->CreateGUIObject();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IRender_AddDynamicLight(void * jarg1) {
  void * jresult ;
  IRender *arg1 = (IRender *) 0 ;
  ILight *result = 0 ;
  
  arg1 = (IRender *)jarg1; 
  result = (ILight *)(arg1)->AddDynamicLight();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRender_DeleteLight(void * jarg1, void * jarg2) {
  IRender *arg1 = (IRender *) 0 ;
  ILight *arg2 = (ILight *) 0 ;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (ILight *)jarg2; 
  (arg1)->DeleteLight(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRender_SetAmbientLight(void * jarg1, int jarg2) {
  IRender *arg1 = (IRender *) 0 ;
  DWORD arg2 ;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (DWORD)jarg2; 
  (arg1)->SetAmbientLight(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRender_SetAmbientShadow(void * jarg1, int jarg2) {
  IRender *arg1 = (IRender *) 0 ;
  DWORD arg2 ;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (DWORD)jarg2; 
  (arg1)->SetAmbientShadow(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IRender_FillResolutionList(void * jarg1, void * jarg2) {
  void * jresult ;
  IRender *arg1 = (IRender *) 0 ;
  int *arg2 = (int *) 0 ;
  Engine2::Vector< Engine2::String > *result = 0 ;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (int *)jarg2; 
  result = (Engine2::Vector< Engine2::String > *) &(arg1)->FillResolutionList(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IRender_FillProfilesList(void * jarg1, void * jarg2) {
  void * jresult ;
  IRender *arg1 = (IRender *) 0 ;
  int *arg2 = (int *) 0 ;
  Engine2::Vector< Engine2::String > *result = 0 ;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (int *)jarg2; 
  result = (Engine2::Vector< Engine2::String > *) &(arg1)->FillProfilesList(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IRender_FillMultisampleList(void * jarg1, void * jarg2) {
  void * jresult ;
  IRender *arg1 = (IRender *) 0 ;
  int *arg2 = (int *) 0 ;
  Engine2::Vector< Engine2::String > *result = 0 ;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (int *)jarg2; 
  result = (Engine2::Vector< Engine2::String > *) &(arg1)->FillMultisampleList(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IRender_AddPostEffect(void * jarg1, char * jarg2) {
  void * jresult ;
  IRender *arg1 = (IRender *) 0 ;
  char *arg2 = (char *) 0 ;
  HRESULT result;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (arg1)->AddPostEffect((char const *)arg2);
  jresult = new HRESULT((const HRESULT &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IRender_PostEffectActive(void * jarg1, char * jarg2) {
  int jresult ;
  IRender *arg1 = (IRender *) 0 ;
  char *arg2 = (char *) 0 ;
  BOOL result;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (BOOL)(arg1)->PostEffectActive((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRender_SetPostEffectState(void * jarg1, char * jarg2, void * jarg3) {
  IRender *arg1 = (IRender *) 0 ;
  char *arg2 = (char *) 0 ;
  eActiveType arg3 ;
  eActiveType *argp3 ;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (char *)jarg2; 
  argp3 = (eActiveType *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eActiveType", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->SetPostEffectState((char const *)arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IRender_AddTexture__SWIG_4(void * jarg1, char * jarg2, int jarg3, int jarg4, int jarg5, int jarg6, void * jarg7, void * jarg8, void * jarg9) {
  void * jresult ;
  IRender *arg1 = (IRender *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  DWORD arg6 ;
  TEXFORMAT arg7 ;
  BUFPOOL arg8 ;
  eMeshType arg9 ;
  TEXFORMAT *argp7 ;
  BUFPOOL *argp8 ;
  eMeshType *argp9 ;
  TEXNUM result;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (DWORD)jarg6; 
  argp7 = (TEXFORMAT *)jarg7; 
  if (!argp7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null TEXFORMAT", 0);
    return 0;
  }
  arg7 = *argp7; 
  argp8 = (BUFPOOL *)jarg8; 
  if (!argp8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BUFPOOL", 0);
    return 0;
  }
  arg8 = *argp8; 
  argp9 = (eMeshType *)jarg9; 
  if (!argp9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eMeshType", 0);
    return 0;
  }
  arg9 = *argp9; 
  result = (arg1)->AddTexture((char const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = new TEXNUM((const TEXNUM &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IRender_AddTexture__SWIG_5(void * jarg1, char * jarg2, int jarg3, int jarg4, int jarg5, int jarg6, void * jarg7, void * jarg8) {
  void * jresult ;
  IRender *arg1 = (IRender *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  DWORD arg6 ;
  TEXFORMAT arg7 ;
  BUFPOOL arg8 ;
  TEXFORMAT *argp7 ;
  BUFPOOL *argp8 ;
  TEXNUM result;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (DWORD)jarg6; 
  argp7 = (TEXFORMAT *)jarg7; 
  if (!argp7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null TEXFORMAT", 0);
    return 0;
  }
  arg7 = *argp7; 
  argp8 = (BUFPOOL *)jarg8; 
  if (!argp8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BUFPOOL", 0);
    return 0;
  }
  arg8 = *argp8; 
  result = (arg1)->AddTexture((char const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = new TEXNUM((const TEXNUM &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IRender_MergeTextures(void * jarg1, char * jarg2, char * jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  IRender *arg1 = (IRender *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  UINT arg4 ;
  UINT arg5 ;
  UINT *argp4 ;
  UINT *argp5 ;
  HRESULT result;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  argp4 = (UINT *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UINT", 0);
    return 0;
  }
  arg4 = *argp4; 
  argp5 = (UINT *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null UINT", 0);
    return 0;
  }
  arg5 = *argp5; 
  result = (arg1)->MergeTextures((char const *)arg2,(char const *)arg3,arg4,arg5);
  jresult = new HRESULT((const HRESULT &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IRender_AddTextureFromMemory__SWIG_0(void * jarg1, void * jarg2, int jarg3, void * jarg4, int jarg5, int jarg6, int jarg7, int jarg8, int jarg9, int jarg10, void * jarg11, void * jarg12, char * jarg13, unsigned int jarg14, void * jarg15, void * jarg16, int jarg17) {
  void * jresult ;
  IRender *arg1 = (IRender *) 0 ;
  uint8 *arg2 = (uint8 *) 0 ;
  int arg3 ;
  TEXFORMAT arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  int arg9 ;
  DWORD arg10 ;
  TEXFORMAT arg11 ;
  BUFPOOL arg12 ;
  char *arg13 = (char *) 0 ;
  bool arg14 ;
  TEXNUM arg15 ;
  eMeshType arg16 ;
  int arg17 ;
  TEXFORMAT *argp4 ;
  TEXFORMAT *argp11 ;
  BUFPOOL *argp12 ;
  TEXNUM *argp15 ;
  eMeshType *argp16 ;
  TEXNUM result;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (uint8 *)jarg2; 
  arg3 = (int)jarg3; 
  argp4 = (TEXFORMAT *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null TEXFORMAT", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (int)jarg9; 
  arg10 = (DWORD)jarg10; 
  argp11 = (TEXFORMAT *)jarg11; 
  if (!argp11) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null TEXFORMAT", 0);
    return 0;
  }
  arg11 = *argp11; 
  argp12 = (BUFPOOL *)jarg12; 
  if (!argp12) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BUFPOOL", 0);
    return 0;
  }
  arg12 = *argp12; 
  arg13 = (char *)jarg13; 
  arg14 = jarg14 ? true : false; 
  argp15 = (TEXNUM *)jarg15; 
  if (!argp15) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null TEXNUM", 0);
    return 0;
  }
  arg15 = *argp15; 
  argp16 = (eMeshType *)jarg16; 
  if (!argp16) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eMeshType", 0);
    return 0;
  }
  arg16 = *argp16; 
  arg17 = (int)jarg17; 
  result = (arg1)->AddTextureFromMemory((uint8 const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,(char const *)arg13,arg14,arg15,arg16,arg17);
  jresult = new TEXNUM((const TEXNUM &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IRender_AddTextureFromMemory__SWIG_1(void * jarg1, void * jarg2, int jarg3, void * jarg4, int jarg5, int jarg6, int jarg7, int jarg8, int jarg9, int jarg10, void * jarg11, void * jarg12, char * jarg13, unsigned int jarg14, void * jarg15, void * jarg16) {
  void * jresult ;
  IRender *arg1 = (IRender *) 0 ;
  uint8 *arg2 = (uint8 *) 0 ;
  int arg3 ;
  TEXFORMAT arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  int arg9 ;
  DWORD arg10 ;
  TEXFORMAT arg11 ;
  BUFPOOL arg12 ;
  char *arg13 = (char *) 0 ;
  bool arg14 ;
  TEXNUM arg15 ;
  eMeshType arg16 ;
  TEXFORMAT *argp4 ;
  TEXFORMAT *argp11 ;
  BUFPOOL *argp12 ;
  TEXNUM *argp15 ;
  eMeshType *argp16 ;
  TEXNUM result;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (uint8 *)jarg2; 
  arg3 = (int)jarg3; 
  argp4 = (TEXFORMAT *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null TEXFORMAT", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (int)jarg9; 
  arg10 = (DWORD)jarg10; 
  argp11 = (TEXFORMAT *)jarg11; 
  if (!argp11) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null TEXFORMAT", 0);
    return 0;
  }
  arg11 = *argp11; 
  argp12 = (BUFPOOL *)jarg12; 
  if (!argp12) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BUFPOOL", 0);
    return 0;
  }
  arg12 = *argp12; 
  arg13 = (char *)jarg13; 
  arg14 = jarg14 ? true : false; 
  argp15 = (TEXNUM *)jarg15; 
  if (!argp15) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null TEXNUM", 0);
    return 0;
  }
  arg15 = *argp15; 
  argp16 = (eMeshType *)jarg16; 
  if (!argp16) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eMeshType", 0);
    return 0;
  }
  arg16 = *argp16; 
  result = (arg1)->AddTextureFromMemory((uint8 const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,(char const *)arg13,arg14,arg15,arg16);
  jresult = new TEXNUM((const TEXNUM &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IRender_AddTextureFromMemory__SWIG_2(void * jarg1, void * jarg2, int jarg3, void * jarg4, int jarg5, int jarg6, int jarg7, int jarg8, int jarg9, int jarg10, void * jarg11, void * jarg12, char * jarg13, unsigned int jarg14, void * jarg15) {
  void * jresult ;
  IRender *arg1 = (IRender *) 0 ;
  uint8 *arg2 = (uint8 *) 0 ;
  int arg3 ;
  TEXFORMAT arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  int arg9 ;
  DWORD arg10 ;
  TEXFORMAT arg11 ;
  BUFPOOL arg12 ;
  char *arg13 = (char *) 0 ;
  bool arg14 ;
  TEXNUM arg15 ;
  TEXFORMAT *argp4 ;
  TEXFORMAT *argp11 ;
  BUFPOOL *argp12 ;
  TEXNUM *argp15 ;
  TEXNUM result;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (uint8 *)jarg2; 
  arg3 = (int)jarg3; 
  argp4 = (TEXFORMAT *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null TEXFORMAT", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (int)jarg9; 
  arg10 = (DWORD)jarg10; 
  argp11 = (TEXFORMAT *)jarg11; 
  if (!argp11) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null TEXFORMAT", 0);
    return 0;
  }
  arg11 = *argp11; 
  argp12 = (BUFPOOL *)jarg12; 
  if (!argp12) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BUFPOOL", 0);
    return 0;
  }
  arg12 = *argp12; 
  arg13 = (char *)jarg13; 
  arg14 = jarg14 ? true : false; 
  argp15 = (TEXNUM *)jarg15; 
  if (!argp15) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null TEXNUM", 0);
    return 0;
  }
  arg15 = *argp15; 
  result = (arg1)->AddTextureFromMemory((uint8 const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,(char const *)arg13,arg14,arg15);
  jresult = new TEXNUM((const TEXNUM &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IRender_AddTextureFromMemory2__SWIG_0(void * jarg1, char * jarg2, unsigned long jarg3, char * jarg4, void * jarg5, void * jarg6, unsigned int jarg7, unsigned int jarg8) {
  void * jresult ;
  IRender *arg1 = (IRender *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  char *arg4 = (char *) 0 ;
  TEXFORMAT arg5 ;
  eMeshType arg6 ;
  bool arg7 ;
  bool arg8 ;
  TEXFORMAT *argp5 ;
  eMeshType *argp6 ;
  TEXNUM result;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (char *)jarg4; 
  argp5 = (TEXFORMAT *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null TEXFORMAT", 0);
    return 0;
  }
  arg5 = *argp5; 
  argp6 = (eMeshType *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eMeshType", 0);
    return 0;
  }
  arg6 = *argp6; 
  arg7 = jarg7 ? true : false; 
  arg8 = jarg8 ? true : false; 
  result = (arg1)->AddTextureFromMemory2((char const *)arg2,arg3,(char const *)arg4,arg5,arg6,arg7,arg8);
  jresult = new TEXNUM((const TEXNUM &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IRender_AddTextureFromMemory2__SWIG_1(void * jarg1, char * jarg2, unsigned long jarg3, char * jarg4, void * jarg5, void * jarg6, unsigned int jarg7) {
  void * jresult ;
  IRender *arg1 = (IRender *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  char *arg4 = (char *) 0 ;
  TEXFORMAT arg5 ;
  eMeshType arg6 ;
  bool arg7 ;
  TEXFORMAT *argp5 ;
  eMeshType *argp6 ;
  TEXNUM result;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (char *)jarg4; 
  argp5 = (TEXFORMAT *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null TEXFORMAT", 0);
    return 0;
  }
  arg5 = *argp5; 
  argp6 = (eMeshType *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eMeshType", 0);
    return 0;
  }
  arg6 = *argp6; 
  arg7 = jarg7 ? true : false; 
  result = (arg1)->AddTextureFromMemory2((char const *)arg2,arg3,(char const *)arg4,arg5,arg6,arg7);
  jresult = new TEXNUM((const TEXNUM &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IRender_AddTextureFromMemory2__SWIG_2(void * jarg1, char * jarg2, unsigned long jarg3, char * jarg4, void * jarg5, void * jarg6) {
  void * jresult ;
  IRender *arg1 = (IRender *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  char *arg4 = (char *) 0 ;
  TEXFORMAT arg5 ;
  eMeshType arg6 ;
  TEXFORMAT *argp5 ;
  eMeshType *argp6 ;
  TEXNUM result;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (char *)jarg4; 
  argp5 = (TEXFORMAT *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null TEXFORMAT", 0);
    return 0;
  }
  arg5 = *argp5; 
  argp6 = (eMeshType *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eMeshType", 0);
    return 0;
  }
  arg6 = *argp6; 
  result = (arg1)->AddTextureFromMemory2((char const *)arg2,arg3,(char const *)arg4,arg5,arg6);
  jresult = new TEXNUM((const TEXNUM &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IRender_AddTextureFromMemory2__SWIG_3(void * jarg1, char * jarg2, unsigned long jarg3, char * jarg4, void * jarg5) {
  void * jresult ;
  IRender *arg1 = (IRender *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  char *arg4 = (char *) 0 ;
  TEXFORMAT arg5 ;
  TEXFORMAT *argp5 ;
  TEXNUM result;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (char *)jarg4; 
  argp5 = (TEXFORMAT *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null TEXFORMAT", 0);
    return 0;
  }
  arg5 = *argp5; 
  result = (arg1)->AddTextureFromMemory2((char const *)arg2,arg3,(char const *)arg4,arg5);
  jresult = new TEXNUM((const TEXNUM &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IRender_StretchRectCopy(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  IRender *arg1 = (IRender *) 0 ;
  TEXNUM arg2 ;
  RECT *arg3 = (RECT *) 0 ;
  TEXNUM arg4 ;
  RECT *arg5 = (RECT *) 0 ;
  TEXNUM *argp2 ;
  TEXNUM *argp4 ;
  bool result;
  
  arg1 = (IRender *)jarg1; 
  argp2 = (TEXNUM *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null TEXNUM", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (RECT *)jarg3; 
  argp4 = (TEXNUM *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null TEXNUM", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (RECT *)jarg5; 
  result = (bool)(arg1)->StretchRectCopy(arg2,(RECT const *)arg3,arg4,(RECT const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IRender_ReloadTexture(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  IRender *arg1 = (IRender *) 0 ;
  TEXNUM arg2 ;
  TEXNUM *argp2 ;
  bool result;
  
  arg1 = (IRender *)jarg1; 
  argp2 = (TEXNUM *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null TEXNUM", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->ReloadTexture(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IRender_GetTextureWidth(void * jarg1, int jarg2) {
  int jresult ;
  IRender *arg1 = (IRender *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->GetTextureWidth(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IRender_GetTextureHeight(void * jarg1, int jarg2) {
  int jresult ;
  IRender *arg1 = (IRender *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->GetTextureHeight(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IRender_Lock(void * jarg1, int jarg2, void * jarg3, void * jarg4, int jarg5) {
  void * jresult ;
  IRender *arg1 = (IRender *) 0 ;
  int arg2 ;
  LOCKED_RECT *arg3 = (LOCKED_RECT *) 0 ;
  RECT *arg4 = (RECT *) 0 ;
  DWORD arg5 ;
  HRESULT result;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (LOCKED_RECT *)jarg3; 
  arg4 = (RECT *)jarg4; 
  arg5 = (DWORD)jarg5; 
  result = (arg1)->Lock(arg2,arg3,arg4,arg5);
  jresult = new HRESULT((const HRESULT &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRender_Unlock(void * jarg1, int jarg2) {
  IRender *arg1 = (IRender *) 0 ;
  int arg2 ;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->Unlock(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRender_SetupFog(void * jarg1, int jarg2, int jarg3, int jarg4, float jarg5, float jarg6, float jarg7, float jarg8) {
  IRender *arg1 = (IRender *) 0 ;
  DWORD arg2 ;
  DWORD arg3 ;
  DWORD arg4 ;
  FLOAT arg5 ;
  FLOAT arg6 ;
  FLOAT arg7 ;
  FLOAT arg8 ;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (DWORD)jarg2; 
  arg3 = (DWORD)jarg3; 
  arg4 = (DWORD)jarg4; 
  arg5 = (FLOAT)jarg5; 
  arg6 = (FLOAT)jarg6; 
  arg7 = (FLOAT)jarg7; 
  arg8 = (FLOAT)jarg8; 
  (arg1)->SetupFog(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRender_EnableFog(void * jarg1, int jarg2) {
  IRender *arg1 = (IRender *) 0 ;
  BOOL arg2 ;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (BOOL)jarg2; 
  (arg1)->EnableFog(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IRender_AddCreatePostEffect(void * jarg1, void * jarg2, char * jarg3, void * jarg4) {
  void * jresult ;
  IRender *arg1 = (IRender *) 0 ;
  PostProcessingEffectPtr *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  Engine2::Vector< CParam > *arg4 = (Engine2::Vector< CParam > *) 0 ;
  HRESULT result;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (PostProcessingEffectPtr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PostProcessingEffectPtr & type is null", 0);
    return 0;
  } 
  arg3 = (char *)jarg3; 
  arg4 = (Engine2::Vector< CParam > *)jarg4; 
  result = (arg1)->AddCreatePostEffect(*arg2,(char const *)arg3,arg4);
  jresult = new HRESULT((const HRESULT &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRender_DeletePostEffect(void * jarg1, void * jarg2) {
  IRender *arg1 = (IRender *) 0 ;
  IPostProcessingEffect *arg2 = (IPostProcessingEffect *) 0 ;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (IPostProcessingEffect *)jarg2; 
  (arg1)->DeletePostEffect(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRender_SetTransform(void * jarg1, int jarg2, void * jarg3) {
  IRender *arg1 = (IRender *) 0 ;
  DWORD arg2 ;
  CMatrix44 *arg3 = (CMatrix44 *) 0 ;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (DWORD)jarg2; 
  arg3 = (CMatrix44 *)jarg3; 
  (arg1)->SetTransform(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRender_SetGammaLevel(void * jarg1, float jarg2, float jarg3, float jarg4) {
  IRender *arg1 = (IRender *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->SetGammaLevel(arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IRender_GetHardwareConfiguration(void * jarg1) {
  void * jresult ;
  IRender *arg1 = (IRender *) 0 ;
  sHardwareConfig *result = 0 ;
  
  arg1 = (IRender *)jarg1; 
  result = (sHardwareConfig *)(arg1)->GetHardwareConfiguration();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IRender_CreateMeshBuilder(void * jarg1) {
  void * jresult ;
  IRender *arg1 = (IRender *) 0 ;
  IMeshBuilder *result = 0 ;
  
  arg1 = (IRender *)jarg1; 
  result = (IMeshBuilder *)(arg1)->CreateMeshBuilder();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRender_SetMinLOD(void * jarg1, int jarg2) {
  IRender *arg1 = (IRender *) 0 ;
  int arg2 ;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetMinLOD(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_IRender_GetMinLOD(void * jarg1) {
  int jresult ;
  IRender *arg1 = (IRender *) 0 ;
  int result;
  
  arg1 = (IRender *)jarg1; 
  result = (int)(arg1)->GetMinLOD();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRender_AddDebugInfo(void * jarg1, char * jarg2) {
  IRender *arg1 = (IRender *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->AddDebugInfo((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRender_AddDebugInfoExt(void * jarg1, int jarg2, char * jarg3) {
  IRender *arg1 = (IRender *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  void *arg4 = 0 ;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->AddDebugInfoExt(arg2,(char const *)arg3,arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_IRender_AddSamplerState(void * jarg1, char * jarg2) {
  int jresult ;
  IRender *arg1 = (IRender *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (int)(arg1)->AddSamplerState((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IRender_AddProjectionMatrix(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  int jresult ;
  IRender *arg1 = (IRender *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  int result;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (int)(arg1)->AddProjectionMatrix(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRender_SetCameraProjectionMatrix(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  IRender *arg1 = (IRender *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->SetCameraProjectionMatrix(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IRender_ProjectPoint(void * jarg1, void * jarg2) {
  void * jresult ;
  IRender *arg1 = (IRender *) 0 ;
  CVec3 *arg2 = 0 ;
  CVec3 result;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (CVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec3 const & type is null", 0);
    return 0;
  } 
  result = ((IRender const *)arg1)->ProjectPoint((CVec3 const &)*arg2);
  jresult = new CVec3((const CVec3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IRender_UnprojectPoint(void * jarg1, void * jarg2) {
  void * jresult ;
  IRender *arg1 = (IRender *) 0 ;
  CVec3 *arg2 = 0 ;
  CVec3 result;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (CVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec3 const & type is null", 0);
    return 0;
  } 
  result = ((IRender const *)arg1)->UnprojectPoint((CVec3 const &)*arg2);
  jresult = new CVec3((const CVec3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRender_SetParam(void * jarg1, void * jarg2) {
  IRender *arg1 = (IRender *) 0 ;
  CParam *arg2 = (CParam *) 0 ;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (CParam *)jarg2; 
  (arg1)->SetParam(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRender_SetWaterDropsAmount(void * jarg1, float jarg2) {
  IRender *arg1 = (IRender *) 0 ;
  float arg2 ;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetWaterDropsAmount(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRender_SetDofParam(void * jarg1, int jarg2, float jarg3) {
  IRender *arg1 = (IRender *) 0 ;
  EDofParam arg2 ;
  float arg3 ;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (EDofParam)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->SetDofParam(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRender_SetBloomParam(void * jarg1, int jarg2, float jarg3) {
  IRender *arg1 = (IRender *) 0 ;
  EBloomParam arg2 ;
  float arg3 ;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (EBloomParam)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->SetBloomParam(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRender_SetMotionBlurParam(void * jarg1, int jarg2, float jarg3) {
  IRender *arg1 = (IRender *) 0 ;
  EMotionBlurParam arg2 ;
  float arg3 ;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (EMotionBlurParam)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->SetMotionBlurParam(arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_IRender_GetLastError(void * jarg1) {
  int jresult ;
  IRender *arg1 = (IRender *) 0 ;
  ERendererError result;
  
  arg1 = (IRender *)jarg1; 
  result = (ERendererError)(arg1)->GetLastError();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IRender_GetMaxShadowLights(void * jarg1) {
  int jresult ;
  IRender *arg1 = (IRender *) 0 ;
  int result;
  
  arg1 = (IRender *)jarg1; 
  result = (int)(arg1)->GetMaxShadowLights();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IRender_FindShader(void * jarg1, char * jarg2) {
  int jresult ;
  IRender *arg1 = (IRender *) 0 ;
  char *arg2 = (char *) 0 ;
  BOOL result;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (BOOL)(arg1)->FindShader((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IRender_AddCreateMesh(void * jarg1, void * jarg2) {
  void * jresult ;
  IRender *arg1 = (IRender *) 0 ;
  CXmlElement *arg2 = (CXmlElement *) 0 ;
  IMeshInfo *result = 0 ;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (CXmlElement *)jarg2; 
  result = (IMeshInfo *)(arg1)->AddCreateMesh((CXmlElement const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IRender_ReloadMesh(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  IRender *arg1 = (IRender *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->ReloadMesh((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IRender_DeleteMesh(void * jarg1, void * jarg2) {
  void * jresult ;
  IRender *arg1 = (IRender *) 0 ;
  IMeshInfo *arg2 = (IMeshInfo *) 0 ;
  HRESULT result;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (IMeshInfo *)jarg2; 
  result = (arg1)->DeleteMesh(arg2);
  jresult = new HRESULT((const HRESULT &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IRender_ReloadShaderLib(void * jarg1) {
  void * jresult ;
  IRender *arg1 = (IRender *) 0 ;
  HRESULT result;
  
  arg1 = (IRender *)jarg1; 
  result = (arg1)->ReloadShaderLib();
  jresult = new HRESULT((const HRESULT &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IRender_GetGamma(void * jarg1) {
  void * jresult ;
  IRender *arg1 = (IRender *) 0 ;
  CParam *result = 0 ;
  
  arg1 = (IRender *)jarg1; 
  result = (CParam *)(arg1)->GetGamma();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IRender_UpdateStats(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  IRender *arg1 = (IRender *) 0 ;
  IStats *arg2 = (IStats *) 0 ;
  bool result;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (IStats *)jarg2; 
  result = (bool)(arg1)->UpdateStats(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRender_ShowCursor(void * jarg1, int jarg2) {
  IRender *arg1 = (IRender *) 0 ;
  BOOL arg2 ;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (BOOL)jarg2; 
  (arg1)->ShowCursor(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IRender_IsFullScreen(void * jarg1) {
  unsigned int jresult ;
  IRender *arg1 = (IRender *) 0 ;
  bool result;
  
  arg1 = (IRender *)jarg1; 
  result = (bool)(arg1)->IsFullScreen();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IRender_IsShadowsEnable(void * jarg1) {
  unsigned int jresult ;
  IRender *arg1 = (IRender *) 0 ;
  bool result;
  
  arg1 = (IRender *)jarg1; 
  result = (bool)(arg1)->IsShadowsEnable();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IRender_IsShowFPSEnable(void * jarg1) {
  unsigned int jresult ;
  IRender *arg1 = (IRender *) 0 ;
  bool result;
  
  arg1 = (IRender *)jarg1; 
  result = (bool)(arg1)->IsShowFPSEnable();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IRender_IsVSyncEnable(void * jarg1) {
  unsigned int jresult ;
  IRender *arg1 = (IRender *) 0 ;
  bool result;
  
  arg1 = (IRender *)jarg1; 
  result = (bool)(arg1)->IsVSyncEnable();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRender_SetShadowMode(void * jarg1, int jarg2) {
  IRender *arg1 = (IRender *) 0 ;
  int arg2 ;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetShadowMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRender_SetShowFPS(void * jarg1, unsigned int jarg2) {
  IRender *arg1 = (IRender *) 0 ;
  bool arg2 ;
  
  arg1 = (IRender *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetShowFPS(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRender_SetVSyncEnable(void * jarg1, unsigned int jarg2) {
  IRender *arg1 = (IRender *) 0 ;
  bool arg2 ;
  
  arg1 = (IRender *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetVSyncEnable(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRender_SetMultisampeMode(void * jarg1, int jarg2) {
  IRender *arg1 = (IRender *) 0 ;
  int arg2 ;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetMultisampeMode(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IRender_GetProfileName(void * jarg1, int jarg2) {
  char * jresult ;
  IRender *arg1 = (IRender *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)(arg1)->GetProfileName(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IRender_GetCurrentProfile(void * jarg1) {
  int jresult ;
  IRender *arg1 = (IRender *) 0 ;
  int result;
  
  arg1 = (IRender *)jarg1; 
  result = (int)((IRender const *)arg1)->GetCurrentProfile();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IRender_PlayVideo(void * jarg1, char * jarg2) {
  void * jresult ;
  IRender *arg1 = (IRender *) 0 ;
  char *arg2 = (char *) 0 ;
  HRESULT result;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (arg1)->PlayVideo((char const *)arg2);
  jresult = new HRESULT((const HRESULT &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRender_StopVideo(void * jarg1) {
  IRender *arg1 = (IRender *) 0 ;
  
  arg1 = (IRender *)jarg1; 
  (arg1)->StopVideo();
}


SWIGEXPORT int SWIGSTDCALL CSharp_IRender_IsVideoPlaying(void * jarg1) {
  int jresult ;
  IRender *arg1 = (IRender *) 0 ;
  BOOL result;
  
  arg1 = (IRender *)jarg1; 
  result = (BOOL)(arg1)->IsVideoPlaying();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IRender_GetTarget(void * jarg1) {
  void * jresult ;
  IRender *arg1 = (IRender *) 0 ;
  ETarget result;
  
  arg1 = (IRender *)jarg1; 
  result = (arg1)->GetTarget();
  jresult = new ETarget((const ETarget &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IRender_GetRenderToTextureObject__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  IRender *arg1 = (IRender *) 0 ;
  bool arg2 ;
  IRenderToTextureObject *result = 0 ;
  
  arg1 = (IRender *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (IRenderToTextureObject *)(arg1)->GetRenderToTextureObject(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IRender_GetRenderToTextureObject__SWIG_1(void * jarg1) {
  void * jresult ;
  IRender *arg1 = (IRender *) 0 ;
  IRenderToTextureObject *result = 0 ;
  
  arg1 = (IRender *)jarg1; 
  result = (IRenderToTextureObject *)(arg1)->GetRenderToTextureObject();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRender_SetGUICallback(void * jarg1, void * jarg2) {
  IRender *arg1 = (IRender *) 0 ;
  TGUICallback arg2 = (TGUICallback) 0 ;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (TGUICallback)jarg2; 
  (arg1)->SetGUICallback(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRender_SetGUIInvalidateCallback(void * jarg1, void * jarg2) {
  IRender *arg1 = (IRender *) 0 ;
  TGUICallback arg2 = (TGUICallback) 0 ;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (TGUICallback)jarg2; 
  (arg1)->SetGUIInvalidateCallback(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRender_SetGUIRestoreCallback(void * jarg1, void * jarg2) {
  IRender *arg1 = (IRender *) 0 ;
  TGUICallback arg2 = (TGUICallback) 0 ;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (TGUICallback)jarg2; 
  (arg1)->SetGUIRestoreCallback(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IRender_SetColorChart__SWIG_0(void * jarg1, void * jarg2, void * jarg3, float jarg4) {
  unsigned int jresult ;
  IRender *arg1 = (IRender *) 0 ;
  TEXNUM arg2 ;
  TEXNUM arg3 ;
  float arg4 ;
  TEXNUM const *argp2 ;
  TEXNUM const *argp3 ;
  bool result;
  
  arg1 = (IRender *)jarg1; 
  argp2 = (TEXNUM *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null TEXNUM const", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (TEXNUM *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null TEXNUM const", 0);
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (float)jarg4; 
  result = (bool)(arg1)->SetColorChart(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IRender_SetColorChart__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  IRender *arg1 = (IRender *) 0 ;
  TEXNUM arg2 ;
  TEXNUM arg3 ;
  TEXNUM const *argp2 ;
  TEXNUM const *argp3 ;
  bool result;
  
  arg1 = (IRender *)jarg1; 
  argp2 = (TEXNUM *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null TEXNUM const", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (TEXNUM *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null TEXNUM const", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)(arg1)->SetColorChart(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IRender_SetColorChart__SWIG_2(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  IRender *arg1 = (IRender *) 0 ;
  TEXNUM arg2 ;
  TEXNUM const *argp2 ;
  bool result;
  
  arg1 = (IRender *)jarg1; 
  argp2 = (TEXNUM *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null TEXNUM const", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->SetColorChart(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IRender_LoadTextureToSystemMemory(void * jarg1, char * jarg2, unsigned int jarg3) {
  void * jresult ;
  IRender *arg1 = (IRender *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  TEXNUM result;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->LoadTextureToSystemMemory((char const *)arg2,arg3);
  jresult = new TEXNUM((const TEXNUM &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IRender_LockTexture(void * jarg1, int jarg2, void * jarg3, void * jarg4, int jarg5) {
  void * jresult ;
  IRender *arg1 = (IRender *) 0 ;
  int arg2 ;
  LOCKED_RECT *arg3 = (LOCKED_RECT *) 0 ;
  RECT *arg4 = (RECT *) 0 ;
  DWORD arg5 ;
  HRESULT result;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (LOCKED_RECT *)jarg3; 
  arg4 = (RECT *)jarg4; 
  arg5 = (DWORD)jarg5; 
  result = (arg1)->LockTexture(arg2,arg3,arg4,arg5);
  jresult = new HRESULT((const HRESULT &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRender_UnlockTexture(void * jarg1, int jarg2) {
  IRender *arg1 = (IRender *) 0 ;
  int arg2 ;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->UnlockTexture(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IRender_SaveTextureToFile(void * jarg1, void * jarg2, char * jarg3, void * jarg4) {
  unsigned int jresult ;
  IRender *arg1 = (IRender *) 0 ;
  TEXNUM arg2 ;
  char *arg3 = (char *) 0 ;
  IMAGE_FILEFORMAT arg4 ;
  TEXNUM *argp2 ;
  IMAGE_FILEFORMAT *argp4 ;
  bool result;
  
  arg1 = (IRender *)jarg1; 
  argp2 = (TEXNUM *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null TEXNUM", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (char *)jarg3; 
  argp4 = (IMAGE_FILEFORMAT *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null IMAGE_FILEFORMAT", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (bool)(arg1)->SaveTextureToFile(arg2,(char const *)arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IRender_GetStatistics__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  IRender *arg1 = (IRender *) 0 ;
  uint32 arg2 ;
  SRenderStatistics *result = 0 ;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (SRenderStatistics *)((IRender const *)arg1)->GetStatistics(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IRender_GetStatistics__SWIG_1(void * jarg1) {
  void * jresult ;
  IRender *arg1 = (IRender *) 0 ;
  SRenderStatistics *result = 0 ;
  
  arg1 = (IRender *)jarg1; 
  result = (SRenderStatistics *)((IRender const *)arg1)->GetStatistics();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IRender_RegisterGraph(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  IRender *arg1 = (IRender *) 0 ;
  SRenderGraph *arg2 = 0 ;
  bool result;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (SRenderGraph *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SRenderGraph & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->RegisterGraph(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IRender_UnregisterGraph(void * jarg1, char * jarg2) {
  int jresult ;
  IRender *arg1 = (IRender *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (int)(arg1)->UnregisterGraph((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IRender_EnableGraph(void * jarg1, char * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  IRender *arg1 = (IRender *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->EnableGraph((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IRender_GetFactory(void * jarg1) {
  void * jresult ;
  IRender *arg1 = (IRender *) 0 ;
  Engine2::Render::MeshFactory *result = 0 ;
  
  arg1 = (IRender *)jarg1; 
  result = (Engine2::Render::MeshFactory *)((IRender const *)arg1)->GetFactory();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IRender_GetSceneGraphFactory(void * jarg1) {
  void * jresult ;
  IRender *arg1 = (IRender *) 0 ;
  Engine2::Render::SceneGraphFactory *result = 0 ;
  
  arg1 = (IRender *)jarg1; 
  result = (Engine2::Render::SceneGraphFactory *)((IRender const *)arg1)->GetSceneGraphFactory();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IRender_GetDecalManager(void * jarg1) {
  void * jresult ;
  IRender *arg1 = (IRender *) 0 ;
  Engine2::Render::IDecalManager *result = 0 ;
  
  arg1 = (IRender *)jarg1; 
  result = (Engine2::Render::IDecalManager *)((IRender const *)arg1)->GetDecalManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IRender_GetDeviceDependendentInfo(void * jarg1) {
  void * jresult ;
  IRender *arg1 = (IRender *) 0 ;
  Engine2::Render::IDeviceDependendentInfo *result = 0 ;
  
  arg1 = (IRender *)jarg1; 
  result = (Engine2::Render::IDeviceDependendentInfo *)((IRender const *)arg1)->GetDeviceDependendentInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IRender_GetAnimationManager(void * jarg1) {
  void * jresult ;
  IRender *arg1 = (IRender *) 0 ;
  Engine2::Render::AnimationManager *result = 0 ;
  
  arg1 = (IRender *)jarg1; 
  result = (Engine2::Render::AnimationManager *)((IRender const *)arg1)->GetAnimationManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IRender_GetTextureState(void * jarg1, void * jarg2) {
  void * jresult ;
  IRender *arg1 = (IRender *) 0 ;
  TEXNUM arg2 ;
  TEXNUM *argp2 ;
  eAsyncState result;
  
  arg1 = (IRender *)jarg1; 
  argp2 = (TEXNUM *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null TEXNUM", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->GetTextureState(arg2);
  jresult = new eAsyncState((const eAsyncState &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IRender_GetTextureInfo(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  IRender *arg1 = (IRender *) 0 ;
  TEXNUM arg2 ;
  SMemTextureInfo *arg3 = 0 ;
  TEXNUM *argp2 ;
  BOOL result;
  
  arg1 = (IRender *)jarg1; 
  argp2 = (TEXNUM *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null TEXNUM", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (SMemTextureInfo *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SMemTextureInfo & type is null", 0);
    return 0;
  } 
  result = (BOOL)(arg1)->GetTextureInfo(arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IRender_GetMaterialLib(void * jarg1) {
  void * jresult ;
  IRender *arg1 = (IRender *) 0 ;
  IMaterialLib *result = 0 ;
  
  arg1 = (IRender *)jarg1; 
  result = (IMaterialLib *)(arg1)->GetMaterialLib();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRender_AddToBatchCount(void * jarg1, unsigned int jarg2) {
  IRender *arg1 = (IRender *) 0 ;
  uint32 arg2 ;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->AddToBatchCount(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRender_ForceRenderMask(void * jarg1, void * jarg2) {
  IRender *arg1 = (IRender *) 0 ;
  TShaderMask arg2 ;
  TShaderMask *argp2 ;
  
  arg1 = (IRender *)jarg1; 
  argp2 = (TShaderMask *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null TShaderMask", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->ForceRenderMask(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IRender_GetForcedRenderMask(void * jarg1) {
  void * jresult ;
  IRender *arg1 = (IRender *) 0 ;
  TShaderMask result;
  
  arg1 = (IRender *)jarg1; 
  result = (arg1)->GetForcedRenderMask();
  jresult = new TShaderMask((const TShaderMask &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRender_DumpTextures__SWIG_0(void * jarg1, void * jarg2) {
  IRender *arg1 = (IRender *) 0 ;
  Engine2::Vector< Engine2::String > *arg2 = (Engine2::Vector< Engine2::String > *) 0 ;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (Engine2::Vector< Engine2::String > *)jarg2; 
  (arg1)->DumpTextures(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRender_DumpTextures__SWIG_1(void * jarg1) {
  IRender *arg1 = (IRender *) 0 ;
  
  arg1 = (IRender *)jarg1; 
  (arg1)->DumpTextures();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRender_DumpMeshes__SWIG_0(void * jarg1, void * jarg2) {
  IRender *arg1 = (IRender *) 0 ;
  Engine2::Vector< Engine2::String > *arg2 = (Engine2::Vector< Engine2::String > *) 0 ;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (Engine2::Vector< Engine2::String > *)jarg2; 
  (arg1)->DumpMeshes(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRender_DumpMeshes__SWIG_1(void * jarg1) {
  IRender *arg1 = (IRender *) 0 ;
  
  arg1 = (IRender *)jarg1; 
  (arg1)->DumpMeshes();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRender_DumpAnimations__SWIG_0(void * jarg1, void * jarg2) {
  IRender *arg1 = (IRender *) 0 ;
  Engine2::Vector< Engine2::String > *arg2 = (Engine2::Vector< Engine2::String > *) 0 ;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (Engine2::Vector< Engine2::String > *)jarg2; 
  (arg1)->DumpAnimations(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRender_DumpAnimations__SWIG_1(void * jarg1) {
  IRender *arg1 = (IRender *) 0 ;
  
  arg1 = (IRender *)jarg1; 
  (arg1)->DumpAnimations();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRender_SetRenderViewport(void * jarg1, void * jarg2) {
  IRender *arg1 = (IRender *) 0 ;
  RenderViewport *arg2 = 0 ;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (RenderViewport *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RenderViewport & type is null", 0);
    return ;
  } 
  (arg1)->SetRenderViewport(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IRender_GetRenderViewport(void * jarg1) {
  void * jresult ;
  IRender *arg1 = (IRender *) 0 ;
  RenderViewport result;
  
  arg1 = (IRender *)jarg1; 
  result = (arg1)->GetRenderViewport();
  jresult = new RenderViewport((const RenderViewport &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRender_SetRenderScissors(void * jarg1, void * jarg2) {
  IRender *arg1 = (IRender *) 0 ;
  RECT *arg2 = 0 ;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (RECT *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RECT const & type is null", 0);
    return ;
  } 
  (arg1)->SetRenderScissors((RECT const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IRender_GetRenderScissors(void * jarg1) {
  void * jresult ;
  IRender *arg1 = (IRender *) 0 ;
  RECT result;
  
  arg1 = (IRender *)jarg1; 
  result = ((IRender const *)arg1)->GetRenderScissors();
  jresult = new RECT((const RECT &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRender_SetTextureStreamingSource(void * jarg1, int jarg2) {
  IRender *arg1 = (IRender *) 0 ;
  int arg2 ;
  
  arg1 = (IRender *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetTextureStreamingSource(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_IRender_GetTextureStreamingSource(void * jarg1) {
  int jresult ;
  IRender *arg1 = (IRender *) 0 ;
  int result;
  
  arg1 = (IRender *)jarg1; 
  result = (int)(arg1)->GetTextureStreamingSource();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IRender_IsActive(void * jarg1) {
  unsigned int jresult ;
  IRender *arg1 = (IRender *) 0 ;
  bool result;
  
  arg1 = (IRender *)jarg1; 
  result = (bool)((IRender const *)arg1)->IsActive();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRender_TimerActivate(void * jarg1) {
  IRender *arg1 = (IRender *) 0 ;
  
  arg1 = (IRender *)jarg1; 
  (arg1)->TimerActivate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRender_TimerDeactivate(void * jarg1) {
  IRender *arg1 = (IRender *) 0 ;
  
  arg1 = (IRender *)jarg1; 
  (arg1)->TimerDeactivate();
}


SWIGEXPORT int SWIGSTDCALL CSharp_GUI_DEPTH_DISABLED_get() {
  int jresult ;
  int result;
  
  result = (int)(0x000);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GUI_DEPTH_ENABLED_get() {
  int jresult ;
  int result;
  
  result = (int)(0x100);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GUI_DEPTH_MASK_get() {
  int jresult ;
  int result;
  
  result = (int)(0xF00);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GUI_SAMPLING_LINWRAP_get() {
  int jresult ;
  int result;
  
  result = (int)(0x00);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GUI_SAMPLING_LINCLAMP_get() {
  int jresult ;
  int result;
  
  result = (int)(0x1000);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GUI_SAMPLING_POINTWRAP_get() {
  int jresult ;
  int result;
  
  result = (int)(0x10);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GUI_SAMPLING_BILINWRAP_get() {
  int jresult ;
  int result;
  
  result = (int)(0x20);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GUI_SAMPLING_BILINCLAMP_get() {
  int jresult ;
  int result;
  
  result = (int)(0x40);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GUI_SAMPLING_POINTCLAMP_get() {
  int jresult ;
  int result;
  
  result = (int)(0x80);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GUI_SAMPLING_MASK_get() {
  int jresult ;
  int result;
  
  result = (int)(0xF0F0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GUI_BLEND_NONE_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GUI_BLEND_ALPHA_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GUI_BLEND_ONE_get() {
  int jresult ;
  int result;
  
  result = (int)(3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GUI_BLEND_MASK_get() {
  int jresult ;
  int result;
  
  result = (int)(0xF);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IGUIRenderObject(void * jarg1) {
  IGUIRenderObject *arg1 = (IGUIRenderObject *) 0 ;
  
  arg1 = (IGUIRenderObject *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGUIRenderObject_SetTexture__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  IGUIRenderObject *arg1 = (IGUIRenderObject *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (IGUIRenderObject *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->SetTexture(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGUIRenderObject_SetTexture__SWIG_1(void * jarg1, int jarg2) {
  IGUIRenderObject *arg1 = (IGUIRenderObject *) 0 ;
  int arg2 ;
  
  arg1 = (IGUIRenderObject *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetTexture(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGUIRenderObject_SetEffect(void * jarg1, int jarg2, int jarg3) {
  IGUIRenderObject *arg1 = (IGUIRenderObject *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (IGUIRenderObject *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->SetEffect(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGUIRenderObject_SetTextureNew__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  IGUIRenderObject *arg1 = (IGUIRenderObject *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (IGUIRenderObject *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->SetTextureNew(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGUIRenderObject_SetTextureNew__SWIG_1(void * jarg1, int jarg2) {
  IGUIRenderObject *arg1 = (IGUIRenderObject *) 0 ;
  int arg2 ;
  
  arg1 = (IGUIRenderObject *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetTextureNew(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGUIRenderObject_SetLineMode(void * jarg1) {
  IGUIRenderObject *arg1 = (IGUIRenderObject *) 0 ;
  
  arg1 = (IGUIRenderObject *)jarg1; 
  (arg1)->SetLineMode();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGUIRenderObject_DrawTriangle2DList__SWIG_0(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  IGUIRenderObject *arg1 = (IGUIRenderObject *) 0 ;
  RENDER2DVERTEX *arg2 = (RENDER2DVERTEX *) 0 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (IGUIRenderObject *)jarg1; 
  arg2 = (RENDER2DVERTEX *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->DrawTriangle2DList(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGUIRenderObject_DrawTriangle2DList__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
  IGUIRenderObject *arg1 = (IGUIRenderObject *) 0 ;
  RENDER2DVERTEX *arg2 = (RENDER2DVERTEX *) 0 ;
  int arg3 ;
  
  arg1 = (IGUIRenderObject *)jarg1; 
  arg2 = (RENDER2DVERTEX *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->DrawTriangle2DList(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGUIRenderObject_DrawText(void * jarg1, int jarg2, float jarg3, float jarg4, int jarg5, char * jarg6) {
  IGUIRenderObject *arg1 = (IGUIRenderObject *) 0 ;
  int arg2 ;
  float arg3 ;
  float arg4 ;
  DWORD arg5 ;
  char *arg6 = (char *) 0 ;
  
  arg1 = (IGUIRenderObject *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (DWORD)jarg5; 
  arg6 = (char *)jarg6; 
  (arg1)->DrawText(arg2,arg3,arg4,arg5,(char const *)arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IGUIRenderObject_DrawTextScaled(void * jarg1, int jarg2, float jarg3, float jarg4, float jarg5, float jarg6, int jarg7, char * jarg8) {
  IGUIRenderObject *arg1 = (IGUIRenderObject *) 0 ;
  int arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  DWORD arg7 ;
  char *arg8 = (char *) 0 ;
  
  arg1 = (IGUIRenderObject *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (DWORD)jarg7; 
  arg8 = (char *)jarg8; 
  (arg1)->DrawTextScaled(arg2,arg3,arg4,arg5,arg6,arg7,(char const *)arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_I2DRenderObject(void * jarg1) {
  I2DRenderObject *arg1 = (I2DRenderObject *) 0 ;
  
  arg1 = (I2DRenderObject *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_I2DRenderObject_SetMaterial(void * jarg1, void * jarg2) {
  I2DRenderObject *arg1 = (I2DRenderObject *) 0 ;
  IMaterial *arg2 = (IMaterial *) 0 ;
  
  arg1 = (I2DRenderObject *)jarg1; 
  arg2 = (IMaterial *)jarg2; 
  (arg1)->SetMaterial((IMaterial const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_I2DRenderObject_SetDefaultMaterial(void * jarg1) {
  I2DRenderObject *arg1 = (I2DRenderObject *) 0 ;
  
  arg1 = (I2DRenderObject *)jarg1; 
  (arg1)->SetDefaultMaterial();
}


SWIGEXPORT void SWIGSTDCALL CSharp_I2DRenderObject_SetTexture(void * jarg1, int jarg2) {
  I2DRenderObject *arg1 = (I2DRenderObject *) 0 ;
  int arg2 ;
  
  arg1 = (I2DRenderObject *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetTexture(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_I2DRenderObject_SetBlendState(void * jarg1, unsigned int jarg2) {
  I2DRenderObject *arg1 = (I2DRenderObject *) 0 ;
  bool arg2 ;
  
  arg1 = (I2DRenderObject *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetBlendState(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_I2DRenderObject_SetBlendOperation(void * jarg1, void * jarg2) {
  I2DRenderObject *arg1 = (I2DRenderObject *) 0 ;
  eBLENDOP arg2 ;
  eBLENDOP *argp2 ;
  
  arg1 = (I2DRenderObject *)jarg1; 
  argp2 = (eBLENDOP *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eBLENDOP", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetBlendOperation(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_I2DRenderObject_SetSrcBlend(void * jarg1, void * jarg2) {
  I2DRenderObject *arg1 = (I2DRenderObject *) 0 ;
  eBLEND arg2 ;
  eBLEND *argp2 ;
  
  arg1 = (I2DRenderObject *)jarg1; 
  argp2 = (eBLEND *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eBLEND", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetSrcBlend(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_I2DRenderObject_SetDstBlend(void * jarg1, void * jarg2) {
  I2DRenderObject *arg1 = (I2DRenderObject *) 0 ;
  eBLEND arg2 ;
  eBLEND *argp2 ;
  
  arg1 = (I2DRenderObject *)jarg1; 
  argp2 = (eBLEND *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eBLEND", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetDstBlend(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_I2DRenderObject_SetCullFunc(void * jarg1, void * jarg2) {
  I2DRenderObject *arg1 = (I2DRenderObject *) 0 ;
  eCULL arg2 ;
  eCULL *argp2 ;
  
  arg1 = (I2DRenderObject *)jarg1; 
  argp2 = (eCULL *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eCULL", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetCullFunc(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_I2DRenderObject_SetDepthFunc(void * jarg1, void * jarg2) {
  I2DRenderObject *arg1 = (I2DRenderObject *) 0 ;
  eDEPTHSTATE arg2 ;
  eDEPTHSTATE *argp2 ;
  
  arg1 = (I2DRenderObject *)jarg1; 
  argp2 = (eDEPTHSTATE *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eDEPTHSTATE", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetDepthFunc(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_I2DRenderObject_SetFillMode(void * jarg1, int jarg2) {
  I2DRenderObject *arg1 = (I2DRenderObject *) 0 ;
  int arg2 ;
  
  arg1 = (I2DRenderObject *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetFillMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_I2DRenderObject_SetAlphaFunc__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  I2DRenderObject *arg1 = (I2DRenderObject *) 0 ;
  eCMPFUNC arg2 ;
  int arg3 ;
  eCMPFUNC *argp2 ;
  
  arg1 = (I2DRenderObject *)jarg1; 
  argp2 = (eCMPFUNC *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eCMPFUNC", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = (int)jarg3; 
  (arg1)->SetAlphaFunc(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_I2DRenderObject_SetAlphaFunc__SWIG_1(void * jarg1, void * jarg2) {
  I2DRenderObject *arg1 = (I2DRenderObject *) 0 ;
  eCMPFUNC arg2 ;
  eCMPFUNC *argp2 ;
  
  arg1 = (I2DRenderObject *)jarg1; 
  argp2 = (eCMPFUNC *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eCMPFUNC", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetAlphaFunc(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_I2DRenderObject_DrawTriangle2DList(void * jarg1, void * jarg2, int jarg3) {
  I2DRenderObject *arg1 = (I2DRenderObject *) 0 ;
  RENDER2DVERTEX *arg2 = (RENDER2DVERTEX *) 0 ;
  int arg3 ;
  
  arg1 = (I2DRenderObject *)jarg1; 
  arg2 = (RENDER2DVERTEX *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->DrawTriangle2DList(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_I2DRenderObject_DrawText(void * jarg1, int jarg2, float jarg3, float jarg4, int jarg5, char * jarg6) {
  I2DRenderObject *arg1 = (I2DRenderObject *) 0 ;
  int arg2 ;
  float arg3 ;
  float arg4 ;
  DWORD arg5 ;
  char *arg6 = (char *) 0 ;
  
  arg1 = (I2DRenderObject *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (DWORD)jarg5; 
  arg6 = (char *)jarg6; 
  (arg1)->DrawText(arg2,arg3,arg4,arg5,(char const *)arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_I2DRenderObject_DrawTextScaled(void * jarg1, int jarg2, float jarg3, float jarg4, float jarg5, float jarg6, int jarg7, char * jarg8) {
  I2DRenderObject *arg1 = (I2DRenderObject *) 0 ;
  int arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  DWORD arg7 ;
  char *arg8 = (char *) 0 ;
  
  arg1 = (I2DRenderObject *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (DWORD)jarg7; 
  arg8 = (char *)jarg8; 
  (arg1)->DrawTextScaled(arg2,arg3,arg4,arg5,arg6,arg7,(char const *)arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_I2DRenderObject_BeginScene(void * jarg1) {
  I2DRenderObject *arg1 = (I2DRenderObject *) 0 ;
  
  arg1 = (I2DRenderObject *)jarg1; 
  (arg1)->BeginScene();
}


SWIGEXPORT void SWIGSTDCALL CSharp_I2DRenderObject_EndScene(void * jarg1) {
  I2DRenderObject *arg1 = (I2DRenderObject *) 0 ;
  
  arg1 = (I2DRenderObject *)jarg1; 
  (arg1)->EndScene();
}


SWIGEXPORT int SWIGSTDCALL CSharp_MESHNOTCREATED_get() {
  int jresult ;
  int result;
  
  result = (int)(-1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OBJ_SHADOW_CASTER_get() {
  int jresult ;
  int result;
  
  result = (int)(0x00000001);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OBJ_SHADOW_RECEIVER_get() {
  int jresult ;
  int result;
  
  result = (int)(0x00000002);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OBJ_LIGHT_RECEIVER_get() {
  int jresult ;
  int result;
  
  result = (int)(0x00000004);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OBJ_IN_REFLECTION_get() {
  int jresult ;
  int result;
  
  result = (int)(0x00000008);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OBJ_IN_REFRACTION_get() {
  int jresult ;
  int result;
  
  result = (int)(0x00000010);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OBJ_IS_STATIC_get() {
  int jresult ;
  int result;
  
  result = (int)(0x00000020);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OBJ_IN_FRAME_get() {
  int jresult ;
  int result;
  
  result = (int)(0x00000040);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OBJ_USE_IMPOSTER_get() {
  int jresult ;
  int result;
  
  result = (int)(0x00000080);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OBJ_CAST_LIGHTMAP_get() {
  int jresult ;
  int result;
  
  result = (int)(0x00000100);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OBJ_USAGE_ATTACHMENT_get() {
  int jresult ;
  int result;
  
  result = (int)(0x00000200);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OBJ_USE_LIGHTMAP_get() {
  int jresult ;
  int result;
  
  result = (int)(0x00000400);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OBJ_SILHOUETTE_get() {
  int jresult ;
  int result;
  
  result = (int)(0x00000800);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OBJ_OVERLAY_get() {
  int jresult ;
  int result;
  
  result = (int)(0x00001000);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OBJ_IGNORE_BRIGHTNESS_get() {
  int jresult ;
  int result;
  
  result = (int)(0x00002000);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OBJ_NO_SKINNING_get() {
  int jresult ;
  int result;
  
  result = (int)(0x00004000);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OBJ_TOON_get() {
  int jresult ;
  int result;
  
  result = (int)(0x00008000);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OBJ_USE_TRACED_LIGHTMAP_get() {
  int jresult ;
  int result;
  
  result = (int)(0x00010000);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OBJ_ROAD_get() {
  int jresult ;
  int result;
  
  result = (int)(0x00020000);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OBJ_DONT_UPDATE_CM_get() {
  int jresult ;
  int result;
  
  result = (int)(0x00040000);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OBJ_ALWAYS_RENDERED_get() {
  int jresult ;
  int result;
  
  result = (int)(0x00080000);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OBJ_USE_INSTANCING_get() {
  int jresult ;
  int result;
  
  result = (int)(0x00100000);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CollisionInfo() {
  void * jresult ;
  CollisionInfo *result = 0 ;
  
  result = (CollisionInfo *)new CollisionInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionInfo_m_vecObjectIntersection_set(void * jarg1, void * jarg2) {
  CollisionInfo *arg1 = (CollisionInfo *) 0 ;
  CVec3 *arg2 = (CVec3 *) 0 ;
  
  arg1 = (CollisionInfo *)jarg1; 
  arg2 = (CVec3 *)jarg2; 
  if (arg1) (arg1)->m_vecObjectIntersection = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CollisionInfo_m_vecObjectIntersection_get(void * jarg1) {
  void * jresult ;
  CollisionInfo *arg1 = (CollisionInfo *) 0 ;
  CVec3 *result = 0 ;
  
  arg1 = (CollisionInfo *)jarg1; 
  result = (CVec3 *)& ((arg1)->m_vecObjectIntersection);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionInfo_m_vecIntersection_set(void * jarg1, void * jarg2) {
  CollisionInfo *arg1 = (CollisionInfo *) 0 ;
  CVec3 *arg2 = (CVec3 *) 0 ;
  
  arg1 = (CollisionInfo *)jarg1; 
  arg2 = (CVec3 *)jarg2; 
  if (arg1) (arg1)->m_vecIntersection = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CollisionInfo_m_vecIntersection_get(void * jarg1) {
  void * jresult ;
  CollisionInfo *arg1 = (CollisionInfo *) 0 ;
  CVec3 *result = 0 ;
  
  arg1 = (CollisionInfo *)jarg1; 
  result = (CVec3 *)& ((arg1)->m_vecIntersection);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionInfo_m_vecNormal_set(void * jarg1, void * jarg2) {
  CollisionInfo *arg1 = (CollisionInfo *) 0 ;
  CVec3 *arg2 = (CVec3 *) 0 ;
  
  arg1 = (CollisionInfo *)jarg1; 
  arg2 = (CVec3 *)jarg2; 
  if (arg1) (arg1)->m_vecNormal = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CollisionInfo_m_vecNormal_get(void * jarg1) {
  void * jresult ;
  CollisionInfo *arg1 = (CollisionInfo *) 0 ;
  CVec3 *result = 0 ;
  
  arg1 = (CollisionInfo *)jarg1; 
  result = (CVec3 *)& ((arg1)->m_vecNormal);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionInfo_m_vecSkinnedIntersection_set(void * jarg1, void * jarg2) {
  CollisionInfo *arg1 = (CollisionInfo *) 0 ;
  CVec3 *arg2 = (CVec3 *) 0 ;
  
  arg1 = (CollisionInfo *)jarg1; 
  arg2 = (CVec3 *)jarg2; 
  if (arg1) (arg1)->m_vecSkinnedIntersection = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CollisionInfo_m_vecSkinnedIntersection_get(void * jarg1) {
  void * jresult ;
  CollisionInfo *arg1 = (CollisionInfo *) 0 ;
  CVec3 *result = 0 ;
  
  arg1 = (CollisionInfo *)jarg1; 
  result = (CVec3 *)& ((arg1)->m_vecSkinnedIntersection);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionInfo_m_vecTextureCoordinate_set(void * jarg1, void * jarg2) {
  CollisionInfo *arg1 = (CollisionInfo *) 0 ;
  CVec2 *arg2 = (CVec2 *) 0 ;
  
  arg1 = (CollisionInfo *)jarg1; 
  arg2 = (CVec2 *)jarg2; 
  if (arg1) (arg1)->m_vecTextureCoordinate = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CollisionInfo_m_vecTextureCoordinate_get(void * jarg1) {
  void * jresult ;
  CollisionInfo *arg1 = (CollisionInfo *) 0 ;
  CVec2 *result = 0 ;
  
  arg1 = (CollisionInfo *)jarg1; 
  result = (CVec2 *)& ((arg1)->m_vecTextureCoordinate);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionInfo_m_iTextureID_set(void * jarg1, int jarg2) {
  CollisionInfo *arg1 = (CollisionInfo *) 0 ;
  int arg2 ;
  
  arg1 = (CollisionInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_iTextureID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CollisionInfo_m_iTextureID_get(void * jarg1) {
  int jresult ;
  CollisionInfo *arg1 = (CollisionInfo *) 0 ;
  int result;
  
  arg1 = (CollisionInfo *)jarg1; 
  result = (int) ((arg1)->m_iTextureID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionInfo_m_iRequestedTextureLayer_set(void * jarg1, int jarg2) {
  CollisionInfo *arg1 = (CollisionInfo *) 0 ;
  int arg2 ;
  
  arg1 = (CollisionInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_iRequestedTextureLayer = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CollisionInfo_m_iRequestedTextureLayer_get(void * jarg1) {
  int jresult ;
  CollisionInfo *arg1 = (CollisionInfo *) 0 ;
  int result;
  
  arg1 = (CollisionInfo *)jarg1; 
  result = (int) ((arg1)->m_iRequestedTextureLayer);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionInfo_m_iAdditional_set(void * jarg1, int jarg2) {
  CollisionInfo *arg1 = (CollisionInfo *) 0 ;
  int arg2 ;
  
  arg1 = (CollisionInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_iAdditional = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CollisionInfo_m_iAdditional_get(void * jarg1) {
  int jresult ;
  CollisionInfo *arg1 = (CollisionInfo *) 0 ;
  int result;
  
  arg1 = (CollisionInfo *)jarg1; 
  result = (int) ((arg1)->m_iAdditional);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionInfo_m_bUseLOD_set(void * jarg1, unsigned int jarg2) {
  CollisionInfo *arg1 = (CollisionInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (CollisionInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_bUseLOD = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CollisionInfo_m_bUseLOD_get(void * jarg1) {
  unsigned int jresult ;
  CollisionInfo *arg1 = (CollisionInfo *) 0 ;
  bool result;
  
  arg1 = (CollisionInfo *)jarg1; 
  result = (bool) ((arg1)->m_bUseLOD);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionInfo_m_bSaveAllCollisions_set(void * jarg1, unsigned int jarg2) {
  CollisionInfo *arg1 = (CollisionInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (CollisionInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_bSaveAllCollisions = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CollisionInfo_m_bSaveAllCollisions_get(void * jarg1) {
  unsigned int jresult ;
  CollisionInfo *arg1 = (CollisionInfo *) 0 ;
  bool result;
  
  arg1 = (CollisionInfo *)jarg1; 
  result = (bool) ((arg1)->m_bSaveAllCollisions);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionInfo_m_bGetTextureCoordinates_set(void * jarg1, unsigned int jarg2) {
  CollisionInfo *arg1 = (CollisionInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (CollisionInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_bGetTextureCoordinates = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CollisionInfo_m_bGetTextureCoordinates_get(void * jarg1) {
  unsigned int jresult ;
  CollisionInfo *arg1 = (CollisionInfo *) 0 ;
  bool result;
  
  arg1 = (CollisionInfo *)jarg1; 
  result = (bool) ((arg1)->m_bGetTextureCoordinates);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionInfo_m_vecAllIntersections_set(void * jarg1, void * jarg2) {
  CollisionInfo *arg1 = (CollisionInfo *) 0 ;
  Engine2::Vector< CVec3 > *arg2 = (Engine2::Vector< CVec3 > *) 0 ;
  
  arg1 = (CollisionInfo *)jarg1; 
  arg2 = (Engine2::Vector< CVec3 > *)jarg2; 
  if (arg1) (arg1)->m_vecAllIntersections = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CollisionInfo_m_vecAllIntersections_get(void * jarg1) {
  void * jresult ;
  CollisionInfo *arg1 = (CollisionInfo *) 0 ;
  Engine2::Vector< CVec3 > *result = 0 ;
  
  arg1 = (CollisionInfo *)jarg1; 
  result = (Engine2::Vector< CVec3 > *)& ((arg1)->m_vecAllIntersections);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionInfo_m_vecAllNormals_set(void * jarg1, void * jarg2) {
  CollisionInfo *arg1 = (CollisionInfo *) 0 ;
  Engine2::Vector< CVec3 > *arg2 = (Engine2::Vector< CVec3 > *) 0 ;
  
  arg1 = (CollisionInfo *)jarg1; 
  arg2 = (Engine2::Vector< CVec3 > *)jarg2; 
  if (arg1) (arg1)->m_vecAllNormals = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CollisionInfo_m_vecAllNormals_get(void * jarg1) {
  void * jresult ;
  CollisionInfo *arg1 = (CollisionInfo *) 0 ;
  Engine2::Vector< CVec3 > *result = 0 ;
  
  arg1 = (CollisionInfo *)jarg1; 
  result = (Engine2::Vector< CVec3 > *)& ((arg1)->m_vecAllNormals);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CollisionInfo(void * jarg1) {
  CollisionInfo *arg1 = (CollisionInfo *) 0 ;
  
  arg1 = (CollisionInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_INodeModifier(void * jarg1) {
  INodeModifier *arg1 = (INodeModifier *) 0 ;
  
  arg1 = (INodeModifier *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EngineDecalInfo_m_eDecalType_set(void * jarg1, int jarg2) {
  EngineDecalInfo *arg1 = (EngineDecalInfo *) 0 ;
  eDecalType arg2 ;
  
  arg1 = (EngineDecalInfo *)jarg1; 
  arg2 = (eDecalType)jarg2; 
  if (arg1) (arg1)->m_eDecalType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EngineDecalInfo_m_eDecalType_get(void * jarg1) {
  int jresult ;
  EngineDecalInfo *arg1 = (EngineDecalInfo *) 0 ;
  eDecalType result;
  
  arg1 = (EngineDecalInfo *)jarg1; 
  result = (eDecalType) ((arg1)->m_eDecalType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EngineDecalInfo_m_nDecalID_set(void * jarg1, unsigned int jarg2) {
  EngineDecalInfo *arg1 = (EngineDecalInfo *) 0 ;
  uint32 arg2 ;
  
  arg1 = (EngineDecalInfo *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->m_nDecalID = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EngineDecalInfo_m_nDecalID_get(void * jarg1) {
  unsigned int jresult ;
  EngineDecalInfo *arg1 = (EngineDecalInfo *) 0 ;
  uint32 result;
  
  arg1 = (EngineDecalInfo *)jarg1; 
  result = (uint32) ((arg1)->m_nDecalID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EngineDecalInfo_m_pDecalOwner_set(void * jarg1, void * jarg2) {
  EngineDecalInfo *arg1 = (EngineDecalInfo *) 0 ;
  IMeshInfo *arg2 = (IMeshInfo *) 0 ;
  
  arg1 = (EngineDecalInfo *)jarg1; 
  arg2 = (IMeshInfo *)jarg2; 
  if (arg1) (arg1)->m_pDecalOwner = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EngineDecalInfo_m_pDecalOwner_get(void * jarg1) {
  void * jresult ;
  EngineDecalInfo *arg1 = (EngineDecalInfo *) 0 ;
  IMeshInfo *result = 0 ;
  
  arg1 = (EngineDecalInfo *)jarg1; 
  result = (IMeshInfo *) ((arg1)->m_pDecalOwner);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EngineDecalInfo_m_vDecalOffset_set(void * jarg1, void * jarg2) {
  EngineDecalInfo *arg1 = (EngineDecalInfo *) 0 ;
  CVec3 *arg2 = (CVec3 *) 0 ;
  
  arg1 = (EngineDecalInfo *)jarg1; 
  arg2 = (CVec3 *)jarg2; 
  if (arg1) (arg1)->m_vDecalOffset = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EngineDecalInfo_m_vDecalOffset_get(void * jarg1) {
  void * jresult ;
  EngineDecalInfo *arg1 = (EngineDecalInfo *) 0 ;
  CVec3 *result = 0 ;
  
  arg1 = (EngineDecalInfo *)jarg1; 
  result = (CVec3 *)& ((arg1)->m_vDecalOffset);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EngineDecalInfo_m_vPos_set(void * jarg1, void * jarg2) {
  EngineDecalInfo *arg1 = (EngineDecalInfo *) 0 ;
  CVec3 *arg2 = (CVec3 *) 0 ;
  
  arg1 = (EngineDecalInfo *)jarg1; 
  arg2 = (CVec3 *)jarg2; 
  if (arg1) (arg1)->m_vPos = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EngineDecalInfo_m_vPos_get(void * jarg1) {
  void * jresult ;
  EngineDecalInfo *arg1 = (EngineDecalInfo *) 0 ;
  CVec3 *result = 0 ;
  
  arg1 = (EngineDecalInfo *)jarg1; 
  result = (CVec3 *)& ((arg1)->m_vPos);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EngineDecalInfo_m_vNormal_set(void * jarg1, void * jarg2) {
  EngineDecalInfo *arg1 = (EngineDecalInfo *) 0 ;
  CVec3 *arg2 = (CVec3 *) 0 ;
  
  arg1 = (EngineDecalInfo *)jarg1; 
  arg2 = (CVec3 *)jarg2; 
  if (arg1) (arg1)->m_vNormal = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EngineDecalInfo_m_vNormal_get(void * jarg1) {
  void * jresult ;
  EngineDecalInfo *arg1 = (EngineDecalInfo *) 0 ;
  CVec3 *result = 0 ;
  
  arg1 = (EngineDecalInfo *)jarg1; 
  result = (CVec3 *)& ((arg1)->m_vNormal);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EngineDecalInfo_m_fWidth_set(void * jarg1, float jarg2) {
  EngineDecalInfo *arg1 = (EngineDecalInfo *) 0 ;
  float arg2 ;
  
  arg1 = (EngineDecalInfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_fWidth = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EngineDecalInfo_m_fWidth_get(void * jarg1) {
  float jresult ;
  EngineDecalInfo *arg1 = (EngineDecalInfo *) 0 ;
  float result;
  
  arg1 = (EngineDecalInfo *)jarg1; 
  result = (float) ((arg1)->m_fWidth);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EngineDecalInfo_m_fHeight_set(void * jarg1, float jarg2) {
  EngineDecalInfo *arg1 = (EngineDecalInfo *) 0 ;
  float arg2 ;
  
  arg1 = (EngineDecalInfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_fHeight = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EngineDecalInfo_m_fHeight_get(void * jarg1) {
  float jresult ;
  EngineDecalInfo *arg1 = (EngineDecalInfo *) 0 ;
  float result;
  
  arg1 = (EngineDecalInfo *)jarg1; 
  result = (float) ((arg1)->m_fHeight);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EngineDecalInfo_m_fLifeTime_set(void * jarg1, float jarg2) {
  EngineDecalInfo *arg1 = (EngineDecalInfo *) 0 ;
  float arg2 ;
  
  arg1 = (EngineDecalInfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_fLifeTime = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EngineDecalInfo_m_fLifeTime_get(void * jarg1) {
  float jresult ;
  EngineDecalInfo *arg1 = (EngineDecalInfo *) 0 ;
  float result;
  
  arg1 = (EngineDecalInfo *)jarg1; 
  result = (float) ((arg1)->m_fLifeTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EngineDecalInfo_m_szMaterialName_set(void * jarg1, void * jarg2) {
  EngineDecalInfo *arg1 = (EngineDecalInfo *) 0 ;
  Engine2::String *arg2 = (Engine2::String *) 0 ;
  
  arg1 = (EngineDecalInfo *)jarg1; 
  arg2 = (Engine2::String *)jarg2; 
  if (arg1) (arg1)->m_szMaterialName = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EngineDecalInfo_m_szMaterialName_get(void * jarg1) {
  void * jresult ;
  EngineDecalInfo *arg1 = (EngineDecalInfo *) 0 ;
  Engine2::String *result = 0 ;
  
  arg1 = (EngineDecalInfo *)jarg1; 
  result = (Engine2::String *)& ((arg1)->m_szMaterialName);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EngineDecalInfo_m_fAngle_set(void * jarg1, float jarg2) {
  EngineDecalInfo *arg1 = (EngineDecalInfo *) 0 ;
  float arg2 ;
  
  arg1 = (EngineDecalInfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_fAngle = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EngineDecalInfo_m_fAngle_get(void * jarg1) {
  float jresult ;
  EngineDecalInfo *arg1 = (EngineDecalInfo *) 0 ;
  float result;
  
  arg1 = (EngineDecalInfo *)jarg1; 
  result = (float) ((arg1)->m_fAngle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EngineDecalInfo_m_fDotAcceptThreshold_set(void * jarg1, float jarg2) {
  EngineDecalInfo *arg1 = (EngineDecalInfo *) 0 ;
  float arg2 ;
  
  arg1 = (EngineDecalInfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_fDotAcceptThreshold = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EngineDecalInfo_m_fDotAcceptThreshold_get(void * jarg1) {
  float jresult ;
  EngineDecalInfo *arg1 = (EngineDecalInfo *) 0 ;
  float result;
  
  arg1 = (EngineDecalInfo *)jarg1; 
  result = (float) ((arg1)->m_fDotAcceptThreshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EngineDecalInfo_m_vHitDirection_set(void * jarg1, void * jarg2) {
  EngineDecalInfo *arg1 = (EngineDecalInfo *) 0 ;
  CVec3 *arg2 = (CVec3 *) 0 ;
  
  arg1 = (EngineDecalInfo *)jarg1; 
  arg2 = (CVec3 *)jarg2; 
  if (arg1) (arg1)->m_vHitDirection = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EngineDecalInfo_m_vHitDirection_get(void * jarg1) {
  void * jresult ;
  EngineDecalInfo *arg1 = (EngineDecalInfo *) 0 ;
  CVec3 *result = 0 ;
  
  arg1 = (EngineDecalInfo *)jarg1; 
  result = (CVec3 *)& ((arg1)->m_vHitDirection);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EngineDecalInfo_m_nGroupId_set(void * jarg1, unsigned int jarg2) {
  EngineDecalInfo *arg1 = (EngineDecalInfo *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (EngineDecalInfo *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->m_nGroupId = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EngineDecalInfo_m_nGroupId_get(void * jarg1) {
  unsigned int jresult ;
  EngineDecalInfo *arg1 = (EngineDecalInfo *) 0 ;
  unsigned int result;
  
  arg1 = (EngineDecalInfo *)jarg1; 
  result = (unsigned int) ((arg1)->m_nGroupId);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EngineDecalInfo_m_vecFoundedColliders_set(void * jarg1, void * jarg2) {
  EngineDecalInfo *arg1 = (EngineDecalInfo *) 0 ;
  Engine2::Vector< IMeshInfo * > *arg2 = (Engine2::Vector< IMeshInfo * > *) 0 ;
  
  arg1 = (EngineDecalInfo *)jarg1; 
  arg2 = (Engine2::Vector< IMeshInfo * > *)jarg2; 
  if (arg1) (arg1)->m_vecFoundedColliders = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EngineDecalInfo_m_vecFoundedColliders_get(void * jarg1) {
  void * jresult ;
  EngineDecalInfo *arg1 = (EngineDecalInfo *) 0 ;
  Engine2::Vector< IMeshInfo * > *result = 0 ;
  
  arg1 = (EngineDecalInfo *)jarg1; 
  result = (Engine2::Vector< IMeshInfo * > *)& ((arg1)->m_vecFoundedColliders);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EngineDecalInfo_m_vFoundedIntersection_set(void * jarg1, void * jarg2) {
  EngineDecalInfo *arg1 = (EngineDecalInfo *) 0 ;
  CVec3 *arg2 = (CVec3 *) 0 ;
  
  arg1 = (EngineDecalInfo *)jarg1; 
  arg2 = (CVec3 *)jarg2; 
  if (arg1) (arg1)->m_vFoundedIntersection = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EngineDecalInfo_m_vFoundedIntersection_get(void * jarg1) {
  void * jresult ;
  EngineDecalInfo *arg1 = (EngineDecalInfo *) 0 ;
  CVec3 *result = 0 ;
  
  arg1 = (EngineDecalInfo *)jarg1; 
  result = (CVec3 *)& ((arg1)->m_vFoundedIntersection);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EngineDecalInfo_m_fBoxWidth_set(void * jarg1, float jarg2) {
  EngineDecalInfo *arg1 = (EngineDecalInfo *) 0 ;
  float arg2 ;
  
  arg1 = (EngineDecalInfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_fBoxWidth = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EngineDecalInfo_m_fBoxWidth_get(void * jarg1) {
  float jresult ;
  EngineDecalInfo *arg1 = (EngineDecalInfo *) 0 ;
  float result;
  
  arg1 = (EngineDecalInfo *)jarg1; 
  result = (float) ((arg1)->m_fBoxWidth);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EngineDecalInfo_m_fBoxHeight_set(void * jarg1, float jarg2) {
  EngineDecalInfo *arg1 = (EngineDecalInfo *) 0 ;
  float arg2 ;
  
  arg1 = (EngineDecalInfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_fBoxHeight = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EngineDecalInfo_m_fBoxHeight_get(void * jarg1) {
  float jresult ;
  EngineDecalInfo *arg1 = (EngineDecalInfo *) 0 ;
  float result;
  
  arg1 = (EngineDecalInfo *)jarg1; 
  result = (float) ((arg1)->m_fBoxHeight);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EngineDecalInfo_m_fBoxLength_set(void * jarg1, float jarg2) {
  EngineDecalInfo *arg1 = (EngineDecalInfo *) 0 ;
  float arg2 ;
  
  arg1 = (EngineDecalInfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_fBoxLength = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EngineDecalInfo_m_fBoxLength_get(void * jarg1) {
  float jresult ;
  EngineDecalInfo *arg1 = (EngineDecalInfo *) 0 ;
  float result;
  
  arg1 = (EngineDecalInfo *)jarg1; 
  result = (float) ((arg1)->m_fBoxLength);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EngineDecalInfo_m_nSortPriority_set(void * jarg1, void * jarg2) {
  EngineDecalInfo *arg1 = (EngineDecalInfo *) 0 ;
  uint8 arg2 ;
  uint8 *argp2 ;
  
  arg1 = (EngineDecalInfo *)jarg1; 
  argp2 = (uint8 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint8", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_nSortPriority = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EngineDecalInfo_m_nSortPriority_get(void * jarg1) {
  void * jresult ;
  EngineDecalInfo *arg1 = (EngineDecalInfo *) 0 ;
  uint8 result;
  
  arg1 = (EngineDecalInfo *)jarg1; 
  result =  ((arg1)->m_nSortPriority);
  jresult = new uint8((const uint8 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EngineDecalInfo_m_bTrustedCollision_set(void * jarg1, void * jarg2) {
  EngineDecalInfo *arg1 = (EngineDecalInfo *) 0 ;
  uint8 arg2 ;
  uint8 *argp2 ;
  
  arg1 = (EngineDecalInfo *)jarg1; 
  argp2 = (uint8 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint8", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_bTrustedCollision = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EngineDecalInfo_m_bTrustedCollision_get(void * jarg1) {
  void * jresult ;
  EngineDecalInfo *arg1 = (EngineDecalInfo *) 0 ;
  uint8 result;
  
  arg1 = (EngineDecalInfo *)jarg1; 
  result =  ((arg1)->m_bTrustedCollision);
  jresult = new uint8((const uint8 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EngineDecalInfo_m_bUseBBoxCollision_set(void * jarg1, void * jarg2) {
  EngineDecalInfo *arg1 = (EngineDecalInfo *) 0 ;
  uint8 arg2 ;
  uint8 *argp2 ;
  
  arg1 = (EngineDecalInfo *)jarg1; 
  argp2 = (uint8 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint8", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_bUseBBoxCollision = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EngineDecalInfo_m_bUseBBoxCollision_get(void * jarg1) {
  void * jresult ;
  EngineDecalInfo *arg1 = (EngineDecalInfo *) 0 ;
  uint8 result;
  
  arg1 = (EngineDecalInfo *)jarg1; 
  result =  ((arg1)->m_bUseBBoxCollision);
  jresult = new uint8((const uint8 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EngineDecalInfo() {
  void * jresult ;
  EngineDecalInfo *result = 0 ;
  
  result = (EngineDecalInfo *)new EngineDecalInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_EngineDecalInfo(void * jarg1) {
  EngineDecalInfo *arg1 = (EngineDecalInfo *) 0 ;
  
  arg1 = (EngineDecalInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IDecalInfo(void * jarg1) {
  IDecalInfo *arg1 = (IDecalInfo *) 0 ;
  
  arg1 = (IDecalInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IDecalInfo() {
  void * jresult ;
  IDecalInfo *result = 0 ;
  
  result = (IDecalInfo *)new IDecalInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IDecalMeshAccepter(void * jarg1) {
  IDecalMeshAccepter *arg1 = (IDecalMeshAccepter *) 0 ;
  
  arg1 = (IDecalMeshAccepter *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IDecalMeshAccepter_AcceptDecal(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  IDecalMeshAccepter *arg1 = (IDecalMeshAccepter *) 0 ;
  IDecalInfo *arg2 = (IDecalInfo *) 0 ;
  bool result;
  
  arg1 = (IDecalMeshAccepter *)jarg1; 
  arg2 = (IDecalInfo *)jarg2; 
  result = (bool)(arg1)->AcceptDecal(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IMeshInfo_GetDecalAccepter(void * jarg1) {
  void * jresult ;
  IMeshInfo *arg1 = (IMeshInfo *) 0 ;
  IDecalMeshAccepter *result = 0 ;
  
  arg1 = (IMeshInfo *)jarg1; 
  result = (IDecalMeshAccepter *)(arg1)->GetDecalAccepter();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IMeshInfo_GetMeshType(void * jarg1) {
  void * jresult ;
  IMeshInfo *arg1 = (IMeshInfo *) 0 ;
  eMeshType result;
  
  arg1 = (IMeshInfo *)jarg1; 
  result = ((IMeshInfo const *)arg1)->GetMeshType();
  jresult = new eMeshType((const eMeshType &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IMeshInfo_NewFrameStarted(void * jarg1) {
  IMeshInfo *arg1 = (IMeshInfo *) 0 ;
  
  arg1 = (IMeshInfo *)jarg1; 
  (arg1)->NewFrameStarted();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IMeshInfo_Cull(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  IMeshInfo *arg1 = (IMeshInfo *) 0 ;
  eRenderType arg2 ;
  bool arg3 ;
  eRenderType *argp2 ;
  HRESULT result;
  
  arg1 = (IMeshInfo *)jarg1; 
  argp2 = (eRenderType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eRenderType", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->Cull(arg2,arg3);
  jresult = new HRESULT((const HRESULT &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IMeshInfo_CullSimple(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  IMeshInfo *arg1 = (IMeshInfo *) 0 ;
  eRenderType arg2 ;
  bool arg3 ;
  eRenderType *argp2 ;
  HRESULT result;
  
  arg1 = (IMeshInfo *)jarg1; 
  argp2 = (eRenderType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eRenderType", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->CullSimple(arg2,arg3);
  jresult = new HRESULT((const HRESULT &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IMeshInfo_Restore(void * jarg1) {
  void * jresult ;
  IMeshInfo *arg1 = (IMeshInfo *) 0 ;
  HRESULT result;
  
  arg1 = (IMeshInfo *)jarg1; 
  result = (arg1)->Restore();
  jresult = new HRESULT((const HRESULT &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IMeshInfo_ImmediateDraw(void * jarg1, void * jarg2) {
  void * jresult ;
  IMeshInfo *arg1 = (IMeshInfo *) 0 ;
  eRenderType arg2 ;
  eRenderType *argp2 ;
  HRESULT result;
  
  arg1 = (IMeshInfo *)jarg1; 
  argp2 = (eRenderType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eRenderType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->ImmediateDraw(arg2);
  jresult = new HRESULT((const HRESULT &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IMeshInfo_SetParam(void * jarg1, void * jarg2) {
  void * jresult ;
  IMeshInfo *arg1 = (IMeshInfo *) 0 ;
  CParam *arg2 = (CParam *) 0 ;
  HRESULT result;
  
  arg1 = (IMeshInfo *)jarg1; 
  arg2 = (CParam *)jarg2; 
  result = (arg1)->SetParam(arg2);
  jresult = new HRESULT((const HRESULT &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IMeshInfo_DeleteParam(void * jarg1, void * jarg2) {
  void * jresult ;
  IMeshInfo *arg1 = (IMeshInfo *) 0 ;
  CParam *arg2 = (CParam *) 0 ;
  HRESULT result;
  
  arg1 = (IMeshInfo *)jarg1; 
  arg2 = (CParam *)jarg2; 
  result = (arg1)->DeleteParam(arg2);
  jresult = new HRESULT((const HRESULT &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IMeshInfo_Update(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  IMeshInfo *arg1 = (IMeshInfo *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (IMeshInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->Update(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IMeshInfo_InitMeshInfo(void * jarg1, void * jarg2) {
  void * jresult ;
  IMeshInfo *arg1 = (IMeshInfo *) 0 ;
  CXmlElement *arg2 = (CXmlElement *) 0 ;
  HRESULT result;
  
  arg1 = (IMeshInfo *)jarg1; 
  arg2 = (CXmlElement *)jarg2; 
  result = (arg1)->InitMeshInfo((CXmlElement const *)arg2);
  jresult = new HRESULT((const HRESULT &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IMeshInfo_IsVisible(void * jarg1) {
  int jresult ;
  IMeshInfo *arg1 = (IMeshInfo *) 0 ;
  BOOL result;
  
  arg1 = (IMeshInfo *)jarg1; 
  result = (BOOL)(arg1)->IsVisible();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IMeshInfo_SetVisibleState(void * jarg1, unsigned int jarg2) {
  IMeshInfo *arg1 = (IMeshInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (IMeshInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetVisibleState(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IMeshInfo_GetCullObject(void * jarg1) {
  void * jresult ;
  IMeshInfo *arg1 = (IMeshInfo *) 0 ;
  ICullObject *result = 0 ;
  
  arg1 = (IMeshInfo *)jarg1; 
  result = (ICullObject *)(arg1)->GetCullObject();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IMeshInfo_Copy(void * jarg1) {
  void * jresult ;
  IMeshInfo *arg1 = (IMeshInfo *) 0 ;
  IMeshInfo *result = 0 ;
  
  arg1 = (IMeshInfo *)jarg1; 
  result = (IMeshInfo *)(arg1)->Copy();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IMeshInfo_GetSortInt(void * jarg1) {
  unsigned int jresult ;
  IMeshInfo *arg1 = (IMeshInfo *) 0 ;
  unsigned int result;
  
  arg1 = (IMeshInfo *)jarg1; 
  result = (unsigned int)(arg1)->GetSortInt();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IMeshInfo_GetRenderFlags(void * jarg1) {
  unsigned int jresult ;
  IMeshInfo *arg1 = (IMeshInfo *) 0 ;
  uint32 result;
  
  arg1 = (IMeshInfo *)jarg1; 
  result = (uint32)((IMeshInfo const *)arg1)->GetRenderFlags();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IMeshInfo_SetRenderFlags(void * jarg1, unsigned int jarg2) {
  IMeshInfo *arg1 = (IMeshInfo *) 0 ;
  uint32 arg2 ;
  
  arg1 = (IMeshInfo *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SetRenderFlags(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IMeshInfo_ForceSetRenderFlags(void * jarg1, unsigned int jarg2) {
  IMeshInfo *arg1 = (IMeshInfo *) 0 ;
  uint32 arg2 ;
  
  arg1 = (IMeshInfo *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->ForceSetRenderFlags(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IMeshInfo_RemoveRenderFlags(void * jarg1, unsigned int jarg2) {
  IMeshInfo *arg1 = (IMeshInfo *) 0 ;
  uint32 arg2 ;
  
  arg1 = (IMeshInfo *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->RemoveRenderFlags(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IMeshInfo_DrawCustom(void * jarg1, void * jarg2) {
  IMeshInfo *arg1 = (IMeshInfo *) 0 ;
  eRenderType arg2 ;
  eRenderType *argp2 ;
  
  arg1 = (IMeshInfo *)jarg1; 
  argp2 = (eRenderType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eRenderType", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->DrawCustom(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IMeshInfo_DrawFogPass(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  IMeshInfo *arg1 = (IMeshInfo *) 0 ;
  eRenderType arg2 ;
  eRenderType *argp2 ;
  bool result;
  
  arg1 = (IMeshInfo *)jarg1; 
  argp2 = (eRenderType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eRenderType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->DrawFogPass(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IMeshInfo_SetMatrix__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  IMeshInfo *arg1 = (IMeshInfo *) 0 ;
  CMatrix44 *arg2 = 0 ;
  BOOL arg3 ;
  
  arg1 = (IMeshInfo *)jarg1; 
  arg2 = (CMatrix44 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CMatrix44 const & type is null", 0);
    return ;
  } 
  arg3 = (BOOL)jarg3; 
  (arg1)->SetMatrix((CMatrix44 const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IMeshInfo_SetMatrix__SWIG_1(void * jarg1, void * jarg2) {
  IMeshInfo *arg1 = (IMeshInfo *) 0 ;
  CMatrix44 *arg2 = 0 ;
  
  arg1 = (IMeshInfo *)jarg1; 
  arg2 = (CMatrix44 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CMatrix44 const & type is null", 0);
    return ;
  } 
  (arg1)->SetMatrix((CMatrix44 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IMeshInfo_SetRotation__SWIG_0(void * jarg1, void * jarg2) {
  IMeshInfo *arg1 = (IMeshInfo *) 0 ;
  CQuat *arg2 = 0 ;
  
  arg1 = (IMeshInfo *)jarg1; 
  arg2 = (CQuat *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CQuat const & type is null", 0);
    return ;
  } 
  (arg1)->SetRotation((CQuat const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IMeshInfo_SetRotation__SWIG_1(void * jarg1, void * jarg2) {
  IMeshInfo *arg1 = (IMeshInfo *) 0 ;
  CVec3 *arg2 = 0 ;
  
  arg1 = (IMeshInfo *)jarg1; 
  arg2 = (CVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec3 const & type is null", 0);
    return ;
  } 
  (arg1)->SetRotation((CVec3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IMeshInfo_SetRotation__SWIG_2(void * jarg1, float jarg2, float jarg3, float jarg4) {
  IMeshInfo *arg1 = (IMeshInfo *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (IMeshInfo *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->SetRotation(arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IMeshInfo_GetMatrix(void * jarg1) {
  void * jresult ;
  IMeshInfo *arg1 = (IMeshInfo *) 0 ;
  CMatrix44 *result = 0 ;
  
  arg1 = (IMeshInfo *)jarg1; 
  result = (CMatrix44 *) &((IMeshInfo const *)arg1)->GetMatrix();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IMeshInfo_SetTranslation(void * jarg1, void * jarg2) {
  IMeshInfo *arg1 = (IMeshInfo *) 0 ;
  CVec3 *arg2 = 0 ;
  
  arg1 = (IMeshInfo *)jarg1; 
  arg2 = (CVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec3 const & type is null", 0);
    return ;
  } 
  (arg1)->SetTranslation((CVec3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IMeshInfo_SetMatrixTranslation(void * jarg1, void * jarg2) {
  IMeshInfo *arg1 = (IMeshInfo *) 0 ;
  CVec3 *arg2 = 0 ;
  
  arg1 = (IMeshInfo *)jarg1; 
  arg2 = (CVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec3 const & type is null", 0);
    return ;
  } 
  (arg1)->SetMatrixTranslation((CVec3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IMeshInfo_SetBBoxTranslation(void * jarg1, void * jarg2) {
  IMeshInfo *arg1 = (IMeshInfo *) 0 ;
  CVec3 *arg2 = 0 ;
  
  arg1 = (IMeshInfo *)jarg1; 
  arg2 = (CVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec3 const & type is null", 0);
    return ;
  } 
  (arg1)->SetBBoxTranslation((CVec3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IMeshInfo_SetBBox(void * jarg1, void * jarg2) {
  IMeshInfo *arg1 = (IMeshInfo *) 0 ;
  CAABBox *arg2 = 0 ;
  
  arg1 = (IMeshInfo *)jarg1; 
  arg2 = (CAABBox *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CAABBox const & type is null", 0);
    return ;
  } 
  (arg1)->SetBBox((CAABBox const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IMeshInfo_GetBBox(void * jarg1) {
  void * jresult ;
  IMeshInfo *arg1 = (IMeshInfo *) 0 ;
  CAABBox *result = 0 ;
  
  arg1 = (IMeshInfo *)jarg1; 
  result = (CAABBox *) &((IMeshInfo const *)arg1)->GetBBox();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IMeshInfo_GetRadius(void * jarg1) {
  float jresult ;
  IMeshInfo *arg1 = (IMeshInfo *) 0 ;
  float result;
  
  arg1 = (IMeshInfo *)jarg1; 
  result = (float)((IMeshInfo const *)arg1)->GetRadius();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IMeshInfo_SetRadius(void * jarg1, float jarg2) {
  IMeshInfo *arg1 = (IMeshInfo *) 0 ;
  float arg2 ;
  
  arg1 = (IMeshInfo *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetRadius(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IMeshInfo_TestRayIntersection(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  IMeshInfo *arg1 = (IMeshInfo *) 0 ;
  CSegment *arg2 = 0 ;
  CollisionInfo *arg3 = (CollisionInfo *) 0 ;
  bool result;
  
  arg1 = (IMeshInfo *)jarg1; 
  arg2 = (CSegment *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CSegment const & type is null", 0);
    return 0;
  } 
  arg3 = (CollisionInfo *)jarg3; 
  result = (bool)(arg1)->TestRayIntersection((CSegment const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IMeshInfo_RemoveFromList(void * jarg1, void * jarg2) {
  IMeshInfo *arg1 = (IMeshInfo *) 0 ;
  IMeshInfo *arg2 = (IMeshInfo *) 0 ;
  
  arg1 = (IMeshInfo *)jarg1; 
  arg2 = (IMeshInfo *)jarg2; 
  (arg1)->RemoveFromList(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IMeshInfo_SetDebugMode(void * jarg1, int jarg2) {
  IMeshInfo *arg1 = (IMeshInfo *) 0 ;
  eDebugMode arg2 ;
  
  arg1 = (IMeshInfo *)jarg1; 
  arg2 = (eDebugMode)jarg2; 
  (arg1)->SetDebugMode(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_IMeshInfo_GetDebugMode(void * jarg1) {
  int jresult ;
  IMeshInfo *arg1 = (IMeshInfo *) 0 ;
  eDebugMode result;
  
  arg1 = (IMeshInfo *)jarg1; 
  result = (eDebugMode)((IMeshInfo const *)arg1)->GetDebugMode();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IMeshInfo_IsImmediate(void * jarg1) {
  unsigned int jresult ;
  IMeshInfo *arg1 = (IMeshInfo *) 0 ;
  bool result;
  
  arg1 = (IMeshInfo *)jarg1; 
  result = (bool)((IMeshInfo const *)arg1)->IsImmediate();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IMeshInfo_SetBrightness(void * jarg1, void * jarg2) {
  IMeshInfo *arg1 = (IMeshInfo *) 0 ;
  CVec4 arg2 ;
  CVec4 *argp2 ;
  
  arg1 = (IMeshInfo *)jarg1; 
  argp2 = (CVec4 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null CVec4", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetBrightness(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IMeshInfo_GetBrightness(void * jarg1) {
  void * jresult ;
  IMeshInfo *arg1 = (IMeshInfo *) 0 ;
  CVec4 result;
  
  arg1 = (IMeshInfo *)jarg1; 
  result = ((IMeshInfo const *)arg1)->GetBrightness();
  jresult = new CVec4((const CVec4 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IMeshInfo_OnPositionChanged(void * jarg1, void * jarg2) {
  IMeshInfo *arg1 = (IMeshInfo *) 0 ;
  CVec3 *arg2 = 0 ;
  
  arg1 = (IMeshInfo *)jarg1; 
  arg2 = (CVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec3 const & type is null", 0);
    return ;
  } 
  (arg1)->OnPositionChanged((CVec3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IMeshInfo_OnBBoxChanged(void * jarg1, void * jarg2) {
  IMeshInfo *arg1 = (IMeshInfo *) 0 ;
  CAABBox *arg2 = 0 ;
  
  arg1 = (IMeshInfo *)jarg1; 
  arg2 = (CAABBox *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CAABBox const & type is null", 0);
    return ;
  } 
  (arg1)->OnBBoxChanged((CAABBox const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IMeshInfo_SetLightInfo(void * jarg1, void * jarg2, int jarg3) {
  IMeshInfo *arg1 = (IMeshInfo *) 0 ;
  CLightArray *arg2 = (CLightArray *) 0 ;
  int arg3 ;
  
  arg1 = (IMeshInfo *)jarg1; 
  arg2 = (CLightArray *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->SetLightInfo(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IMeshInfo_IsCopy(void * jarg1) {
  unsigned int jresult ;
  IMeshInfo *arg1 = (IMeshInfo *) 0 ;
  bool result;
  
  arg1 = (IMeshInfo *)jarg1; 
  result = (bool)((IMeshInfo const *)arg1)->IsCopy();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IMeshInfo_GetNext(void * jarg1) {
  void * jresult ;
  IMeshInfo *arg1 = (IMeshInfo *) 0 ;
  IMeshInfo *result = 0 ;
  
  arg1 = (IMeshInfo *)jarg1; 
  result = (IMeshInfo *)((IMeshInfo const *)arg1)->GetNext();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IMeshInfo_GetPrev(void * jarg1) {
  void * jresult ;
  IMeshInfo *arg1 = (IMeshInfo *) 0 ;
  IMeshInfo *result = 0 ;
  
  arg1 = (IMeshInfo *)jarg1; 
  result = (IMeshInfo *)((IMeshInfo const *)arg1)->GetPrev();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IMeshInfo_SetNext(void * jarg1, void * jarg2) {
  IMeshInfo *arg1 = (IMeshInfo *) 0 ;
  IMeshInfo *arg2 = (IMeshInfo *) 0 ;
  
  arg1 = (IMeshInfo *)jarg1; 
  arg2 = (IMeshInfo *)jarg2; 
  (arg1)->SetNext(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IMeshInfo_SetPrev(void * jarg1, void * jarg2) {
  IMeshInfo *arg1 = (IMeshInfo *) 0 ;
  IMeshInfo *arg2 = (IMeshInfo *) 0 ;
  
  arg1 = (IMeshInfo *)jarg1; 
  arg2 = (IMeshInfo *)jarg2; 
  (arg1)->SetPrev(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IMeshInfo_m_strFileName_set(void * jarg1, void * jarg2) {
  IMeshInfo *arg1 = (IMeshInfo *) 0 ;
  Engine2::String *arg2 = (Engine2::String *) 0 ;
  
  arg1 = (IMeshInfo *)jarg1; 
  arg2 = (Engine2::String *)jarg2; 
  if (arg1) (arg1)->m_strFileName = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IMeshInfo_m_strFileName_get(void * jarg1) {
  void * jresult ;
  IMeshInfo *arg1 = (IMeshInfo *) 0 ;
  Engine2::String *result = 0 ;
  
  arg1 = (IMeshInfo *)jarg1; 
  result = (Engine2::String *)& ((arg1)->m_strFileName);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IMeshInfo_m_pMesh_set(void * jarg1, void * jarg2) {
  IMeshInfo *arg1 = (IMeshInfo *) 0 ;
  ICullObjectPtr arg2 ;
  ICullObjectPtr *argp2 ;
  
  arg1 = (IMeshInfo *)jarg1; 
  argp2 = (ICullObjectPtr *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ICullObjectPtr", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_pMesh = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IMeshInfo_m_pMesh_get(void * jarg1) {
  void * jresult ;
  IMeshInfo *arg1 = (IMeshInfo *) 0 ;
  ICullObjectPtr result;
  
  arg1 = (IMeshInfo *)jarg1; 
  result =  ((arg1)->m_pMesh);
  jresult = new ICullObjectPtr((const ICullObjectPtr &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IMeshInfo_m_pOriginalMesh_set(void * jarg1, void * jarg2) {
  IMeshInfo *arg1 = (IMeshInfo *) 0 ;
  ICullObjectPtr arg2 ;
  ICullObjectPtr *argp2 ;
  
  arg1 = (IMeshInfo *)jarg1; 
  argp2 = (ICullObjectPtr *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ICullObjectPtr", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_pOriginalMesh = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IMeshInfo_m_pOriginalMesh_get(void * jarg1) {
  void * jresult ;
  IMeshInfo *arg1 = (IMeshInfo *) 0 ;
  ICullObjectPtr result;
  
  arg1 = (IMeshInfo *)jarg1; 
  result =  ((arg1)->m_pOriginalMesh);
  jresult = new ICullObjectPtr((const ICullObjectPtr &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IMeshInfo_m_pParent_set(void * jarg1, void * jarg2) {
  IMeshInfo *arg1 = (IMeshInfo *) 0 ;
  IMeshInfo *arg2 = (IMeshInfo *) 0 ;
  
  arg1 = (IMeshInfo *)jarg1; 
  arg2 = (IMeshInfo *)jarg2; 
  if (arg1) (arg1)->m_pParent = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IMeshInfo_m_pParent_get(void * jarg1) {
  void * jresult ;
  IMeshInfo *arg1 = (IMeshInfo *) 0 ;
  IMeshInfo *result = 0 ;
  
  arg1 = (IMeshInfo *)jarg1; 
  result = (IMeshInfo *) ((arg1)->m_pParent);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IMeshInfo_m_pSector_set(void * jarg1, void * jarg2) {
  IMeshInfo *arg1 = (IMeshInfo *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (IMeshInfo *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->m_pSector = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IMeshInfo_m_pSector_get(void * jarg1) {
  void * jresult ;
  IMeshInfo *arg1 = (IMeshInfo *) 0 ;
  void *result = 0 ;
  
  arg1 = (IMeshInfo *)jarg1; 
  result = (void *) ((arg1)->m_pSector);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IMeshFactory_DeleteMeshInfo(void * jarg1, void * jarg2) {
  IMeshFactory *arg1 = (IMeshFactory *) 0 ;
  IMeshInfo *arg2 = (IMeshInfo *) 0 ;
  
  arg1 = (IMeshFactory *)jarg1; 
  arg2 = (IMeshInfo *)jarg2; 
  (arg1)->DeleteMeshInfo(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IMeshFactory_CreateObject(void * jarg1, void * jarg2) {
  void * jresult ;
  IMeshFactory *arg1 = (IMeshFactory *) 0 ;
  IMeshInfo *arg2 = (IMeshInfo *) 0 ;
  ICullObject *result = 0 ;
  
  arg1 = (IMeshFactory *)jarg1; 
  arg2 = (IMeshInfo *)jarg2; 
  result = (ICullObject *)(arg1)->CreateObject(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IMeshFactory(void * jarg1) {
  IMeshFactory *arg1 = (IMeshFactory *) 0 ;
  
  arg1 = (IMeshFactory *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XRefInfo_m_Mat_set(void * jarg1, void * jarg2) {
  XRefInfo *arg1 = (XRefInfo *) 0 ;
  CMatrix44 *arg2 = (CMatrix44 *) 0 ;
  
  arg1 = (XRefInfo *)jarg1; 
  arg2 = (CMatrix44 *)jarg2; 
  if (arg1) (arg1)->m_Mat = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XRefInfo_m_Mat_get(void * jarg1) {
  void * jresult ;
  XRefInfo *arg1 = (XRefInfo *) 0 ;
  CMatrix44 *result = 0 ;
  
  arg1 = (XRefInfo *)jarg1; 
  result = (CMatrix44 *)& ((arg1)->m_Mat);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XRefInfo_m_sName_set(void * jarg1, void * jarg2) {
  XRefInfo *arg1 = (XRefInfo *) 0 ;
  Engine2::String *arg2 = (Engine2::String *) 0 ;
  
  arg1 = (XRefInfo *)jarg1; 
  arg2 = (Engine2::String *)jarg2; 
  if (arg1) (arg1)->m_sName = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XRefInfo_m_sName_get(void * jarg1) {
  void * jresult ;
  XRefInfo *arg1 = (XRefInfo *) 0 ;
  Engine2::String *result = 0 ;
  
  arg1 = (XRefInfo *)jarg1; 
  result = (Engine2::String *)& ((arg1)->m_sName);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XRefInfo_m_sFileName_set(void * jarg1, void * jarg2) {
  XRefInfo *arg1 = (XRefInfo *) 0 ;
  Engine2::String *arg2 = (Engine2::String *) 0 ;
  
  arg1 = (XRefInfo *)jarg1; 
  arg2 = (Engine2::String *)jarg2; 
  if (arg1) (arg1)->m_sFileName = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XRefInfo_m_sFileName_get(void * jarg1) {
  void * jresult ;
  XRefInfo *arg1 = (XRefInfo *) 0 ;
  Engine2::String *result = 0 ;
  
  arg1 = (XRefInfo *)jarg1; 
  result = (Engine2::String *)& ((arg1)->m_sFileName);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_XRefInfo() {
  void * jresult ;
  XRefInfo *result = 0 ;
  
  result = (XRefInfo *)new XRefInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_XRefInfo(void * jarg1) {
  XRefInfo *arg1 = (XRefInfo *) 0 ;
  
  arg1 = (XRefInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IXRefInfoMesh_GetXRefInfoNum(void * jarg1) {
  unsigned long jresult ;
  IXRefInfoMesh *arg1 = (IXRefInfoMesh *) 0 ;
  size_t result;
  
  arg1 = (IXRefInfoMesh *)jarg1; 
  result = (arg1)->GetXRefInfoNum();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IXRefInfoMesh_GetXRefInfo(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  IXRefInfoMesh *arg1 = (IXRefInfoMesh *) 0 ;
  size_t arg2 ;
  XRefInfo *result = 0 ;
  
  arg1 = (IXRefInfoMesh *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (XRefInfo *)(arg1)->GetXRefInfo(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IXRefInfoMesh(void * jarg1) {
  IXRefInfoMesh *arg1 = (IXRefInfoMesh *) 0 ;
  
  arg1 = (IXRefInfoMesh *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IMaterialInfo_GetVisibleMaterialsCount(void * jarg1) {
  unsigned int jresult ;
  IMaterialInfo *arg1 = (IMaterialInfo *) 0 ;
  uint32 result;
  
  arg1 = (IMaterialInfo *)jarg1; 
  result = (uint32)(arg1)->GetVisibleMaterialsCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IMaterialInfo_GetVisibleMaterialName(void * jarg1, unsigned int jarg2) {
  char * jresult ;
  IMaterialInfo *arg1 = (IMaterialInfo *) 0 ;
  uint32 arg2 ;
  char *result = 0 ;
  
  arg1 = (IMaterialInfo *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (char *)(arg1)->GetVisibleMaterialName(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IMaterialInfo_GetVisibleMaterial(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  IMaterialInfo *arg1 = (IMaterialInfo *) 0 ;
  uint32 arg2 ;
  IMaterial *result = 0 ;
  
  arg1 = (IMaterialInfo *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (IMaterial *)(arg1)->GetVisibleMaterial(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IMaterialInfo_SetVisibleMaterial(void * jarg1, unsigned int jarg2, void * jarg3) {
  unsigned int jresult ;
  IMaterialInfo *arg1 = (IMaterialInfo *) 0 ;
  uint32 arg2 ;
  IMaterial *arg3 = (IMaterial *) 0 ;
  bool result;
  
  arg1 = (IMaterialInfo *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (IMaterial *)jarg3; 
  result = (bool)(arg1)->SetVisibleMaterial(arg2,(IMaterial const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IMaterialInfo_SetVisibleMaterialByMaterialName(void * jarg1, unsigned int jarg2, char * jarg3) {
  unsigned int jresult ;
  IMaterialInfo *arg1 = (IMaterialInfo *) 0 ;
  uint32 arg2 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = (IMaterialInfo *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (char *)jarg3; 
  result = (bool)(arg1)->SetVisibleMaterialByMaterialName(arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IMaterialInfo_GetVisibleMaterialParamCount(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  IMaterialInfo *arg1 = (IMaterialInfo *) 0 ;
  uint32 arg2 ;
  uint32 result;
  
  arg1 = (IMaterialInfo *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (uint32)(arg1)->GetVisibleMaterialParamCount(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IMaterialInfo_GetVisibleMaterialParam(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  IMaterialInfo *arg1 = (IMaterialInfo *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  CParam *result = 0 ;
  
  arg1 = (IMaterialInfo *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  result = (CParam *)(arg1)->GetVisibleMaterialParam(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IMaterialInfo_AddVisibleMaterialParam(void * jarg1, unsigned int jarg2, void * jarg3) {
  unsigned int jresult ;
  IMaterialInfo *arg1 = (IMaterialInfo *) 0 ;
  uint32 arg2 ;
  CParam *arg3 = 0 ;
  bool result;
  
  arg1 = (IMaterialInfo *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (CParam *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CParam & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->AddVisibleMaterialParam(arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IMaterialInfo_AddVisibleMaterialParamPtr(void * jarg1, unsigned int jarg2, void * jarg3) {
  unsigned int jresult ;
  IMaterialInfo *arg1 = (IMaterialInfo *) 0 ;
  uint32 arg2 ;
  CParam *arg3 = (CParam *) 0 ;
  bool result;
  
  arg1 = (IMaterialInfo *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (CParam *)jarg3; 
  result = (bool)(arg1)->AddVisibleMaterialParamPtr(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IMaterialInfo(void * jarg1) {
  IMaterialInfo *arg1 = (IMaterialInfo *) 0 ;
  
  arg1 = (IMaterialInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IIndoorMeshInfo_GetNumSubmeshes(void * jarg1) {
  int jresult ;
  IIndoorMeshInfo *arg1 = (IIndoorMeshInfo *) 0 ;
  int result;
  
  arg1 = (IIndoorMeshInfo *)jarg1; 
  result = (int)(arg1)->GetNumSubmeshes();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IIndoorMeshInfo_GetSubmeshName(void * jarg1, int jarg2) {
  char * jresult ;
  IIndoorMeshInfo *arg1 = (IIndoorMeshInfo *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  arg1 = (IIndoorMeshInfo *)jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)(arg1)->GetSubmeshName(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IIndoorMeshInfo_GetSubmeshFromName(void * jarg1, char * jarg2) {
  int jresult ;
  IIndoorMeshInfo *arg1 = (IIndoorMeshInfo *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = (IIndoorMeshInfo *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (int)(arg1)->GetSubmeshFromName((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IIndoorMeshInfo_GetSubmeshVisibility(void * jarg1, int jarg2) {
  unsigned int jresult ;
  IIndoorMeshInfo *arg1 = (IIndoorMeshInfo *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (IIndoorMeshInfo *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->GetSubmeshVisibility(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IIndoorMeshInfo_SetSubmeshVisibility(void * jarg1, int jarg2, unsigned int jarg3) {
  IIndoorMeshInfo *arg1 = (IIndoorMeshInfo *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (IIndoorMeshInfo *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->SetSubmeshVisibility(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IIndoorMeshInfo_SetSubmeshesVisibility(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4) {
  IIndoorMeshInfo *arg1 = (IIndoorMeshInfo *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  bool arg4 ;
  
  arg1 = (IIndoorMeshInfo *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->SetSubmeshesVisibility(arg2,arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IIndoorMeshInfo_RebuildMesh(void * jarg1) {
  unsigned int jresult ;
  IIndoorMeshInfo *arg1 = (IIndoorMeshInfo *) 0 ;
  bool result;
  
  arg1 = (IIndoorMeshInfo *)jarg1; 
  result = (bool)(arg1)->RebuildMesh();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IIndoorMeshInfo_SetActivationDistance(void * jarg1, float jarg2) {
  IIndoorMeshInfo *arg1 = (IIndoorMeshInfo *) 0 ;
  float arg2 ;
  
  arg1 = (IIndoorMeshInfo *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetActivationDistance(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_IIndoorMeshInfo_GetActivationDistance(void * jarg1) {
  float jresult ;
  IIndoorMeshInfo *arg1 = (IIndoorMeshInfo *) 0 ;
  float result;
  
  arg1 = (IIndoorMeshInfo *)jarg1; 
  result = (float)(arg1)->GetActivationDistance();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IIndoorMeshInfo_GetSubmeshVertCount(void * jarg1, int jarg2) {
  int jresult ;
  IIndoorMeshInfo *arg1 = (IIndoorMeshInfo *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (IIndoorMeshInfo *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->GetSubmeshVertCount(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IIndoorMeshInfo_GetSubmeshIndCount(void * jarg1, int jarg2) {
  int jresult ;
  IIndoorMeshInfo *arg1 = (IIndoorMeshInfo *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (IIndoorMeshInfo *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->GetSubmeshIndCount(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IIndoorMeshInfo_GetSubmeshPositions(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  IIndoorMeshInfo *arg1 = (IIndoorMeshInfo *) 0 ;
  int arg2 ;
  CVec3 *arg3 = (CVec3 *) 0 ;
  bool result;
  
  arg1 = (IIndoorMeshInfo *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (CVec3 *)jarg3; 
  result = (bool)(arg1)->GetSubmeshPositions(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IIndoorMeshInfo_GetSubmeshNormals(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  IIndoorMeshInfo *arg1 = (IIndoorMeshInfo *) 0 ;
  int arg2 ;
  CVec3 *arg3 = (CVec3 *) 0 ;
  bool result;
  
  arg1 = (IIndoorMeshInfo *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (CVec3 *)jarg3; 
  result = (bool)(arg1)->GetSubmeshNormals(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IIndoorMeshInfo_GetSubmeshIndices(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  IIndoorMeshInfo *arg1 = (IIndoorMeshInfo *) 0 ;
  int arg2 ;
  short *arg3 = (short *) 0 ;
  bool result;
  
  arg1 = (IIndoorMeshInfo *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (short *)jarg3; 
  result = (bool)(arg1)->GetSubmeshIndices(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IIndoorMeshInfo(void * jarg1) {
  IIndoorMeshInfo *arg1 = (IIndoorMeshInfo *) 0 ;
  
  arg1 = (IIndoorMeshInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IMeshInfoFriend_SetVisibleState(void * jarg1, unsigned int jarg2, void * jarg3) {
  IMeshInfoFriend *arg1 = (IMeshInfoFriend *) 0 ;
  bool arg2 ;
  IMeshInfo *arg3 = (IMeshInfo *) 0 ;
  
  arg1 = (IMeshInfoFriend *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (IMeshInfo *)jarg3; 
  (arg1)->SetVisibleState(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IMeshInfoFriend() {
  void * jresult ;
  IMeshInfoFriend *result = 0 ;
  
  result = (IMeshInfoFriend *)new IMeshInfoFriend();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IMeshInfoFriend(void * jarg1) {
  IMeshInfoFriend *arg1 = (IMeshInfoFriend *) 0 ;
  
  arg1 = (IMeshInfoFriend *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRainAreaInfo_SetDropScale(void * jarg1, float jarg2, float jarg3) {
  IRainAreaInfo *arg1 = (IRainAreaInfo *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (IRainAreaInfo *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->SetDropScale(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRainAreaInfo_GetDropScale(void * jarg1, void * jarg2, void * jarg3) {
  IRainAreaInfo *arg1 = (IRainAreaInfo *) 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  
  arg1 = (IRainAreaInfo *)jarg1; 
  arg2 = (float *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "float & type is null", 0);
    return ;
  } 
  arg3 = (float *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "float & type is null", 0);
    return ;
  } 
  (arg1)->GetDropScale(*arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRainAreaInfo_SetDropSpeed(void * jarg1, float jarg2, float jarg3) {
  IRainAreaInfo *arg1 = (IRainAreaInfo *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (IRainAreaInfo *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->SetDropSpeed(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IRainAreaInfo_GetDropSpeed(void * jarg1, void * jarg2, void * jarg3) {
  IRainAreaInfo *arg1 = (IRainAreaInfo *) 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  
  arg1 = (IRainAreaInfo *)jarg1; 
  arg2 = (float *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "float & type is null", 0);
    return ;
  } 
  arg3 = (float *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "float & type is null", 0);
    return ;
  } 
  (arg1)->GetDropSpeed(*arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IRainAreaInfo(void * jarg1) {
  IRainAreaInfo *arg1 = (IRainAreaInfo *) 0 ;
  
  arg1 = (IRainAreaInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AnimationParam() {
  void * jresult ;
  AnimationParam *result = 0 ;
  
  result = (AnimationParam *)new AnimationParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationParam_m_fSpeed_set(void * jarg1, float jarg2) {
  AnimationParam *arg1 = (AnimationParam *) 0 ;
  float arg2 ;
  
  arg1 = (AnimationParam *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_fSpeed = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AnimationParam_m_fSpeed_get(void * jarg1) {
  float jresult ;
  AnimationParam *arg1 = (AnimationParam *) 0 ;
  float result;
  
  arg1 = (AnimationParam *)jarg1; 
  result = (float) ((arg1)->m_fSpeed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationParam_m_fWeight_set(void * jarg1, float jarg2) {
  AnimationParam *arg1 = (AnimationParam *) 0 ;
  float arg2 ;
  
  arg1 = (AnimationParam *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_fWeight = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AnimationParam_m_fWeight_get(void * jarg1) {
  float jresult ;
  AnimationParam *arg1 = (AnimationParam *) 0 ;
  float result;
  
  arg1 = (AnimationParam *)jarg1; 
  result = (float) ((arg1)->m_fWeight);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationParam_m_fCurrentTime_set(void * jarg1, float jarg2) {
  AnimationParam *arg1 = (AnimationParam *) 0 ;
  float arg2 ;
  
  arg1 = (AnimationParam *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_fCurrentTime = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AnimationParam_m_fCurrentTime_get(void * jarg1) {
  float jresult ;
  AnimationParam *arg1 = (AnimationParam *) 0 ;
  float result;
  
  arg1 = (AnimationParam *)jarg1; 
  result = (float) ((arg1)->m_fCurrentTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationParam_m_iFirstAffectedBone_set(void * jarg1, int jarg2) {
  AnimationParam *arg1 = (AnimationParam *) 0 ;
  int arg2 ;
  
  arg1 = (AnimationParam *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_iFirstAffectedBone = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AnimationParam_m_iFirstAffectedBone_get(void * jarg1) {
  int jresult ;
  AnimationParam *arg1 = (AnimationParam *) 0 ;
  int result;
  
  arg1 = (AnimationParam *)jarg1; 
  result = (int) ((arg1)->m_iFirstAffectedBone);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationParam_m_iOnlyAffectedBone_set(void * jarg1, int jarg2) {
  AnimationParam *arg1 = (AnimationParam *) 0 ;
  int arg2 ;
  
  arg1 = (AnimationParam *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_iOnlyAffectedBone = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AnimationParam_m_iOnlyAffectedBone_get(void * jarg1) {
  int jresult ;
  AnimationParam *arg1 = (AnimationParam *) 0 ;
  int result;
  
  arg1 = (AnimationParam *)jarg1; 
  result = (int) ((arg1)->m_iOnlyAffectedBone);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationParam_m_nLayer_set(void * jarg1, unsigned int jarg2) {
  AnimationParam *arg1 = (AnimationParam *) 0 ;
  uint32 arg2 ;
  
  arg1 = (AnimationParam *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->m_nLayer = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AnimationParam_m_nLayer_get(void * jarg1) {
  unsigned int jresult ;
  AnimationParam *arg1 = (AnimationParam *) 0 ;
  uint32 result;
  
  arg1 = (AnimationParam *)jarg1; 
  result = (uint32) ((arg1)->m_nLayer);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationParam_m_bGameUpdate_set(void * jarg1, unsigned int jarg2) {
  AnimationParam *arg1 = (AnimationParam *) 0 ;
  bool arg2 ;
  
  arg1 = (AnimationParam *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_bGameUpdate = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AnimationParam_m_bGameUpdate_get(void * jarg1) {
  unsigned int jresult ;
  AnimationParam *arg1 = (AnimationParam *) 0 ;
  bool result;
  
  arg1 = (AnimationParam *)jarg1; 
  result = (bool) ((arg1)->m_bGameUpdate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationParam_m_bLooped_set(void * jarg1, unsigned int jarg2) {
  AnimationParam *arg1 = (AnimationParam *) 0 ;
  bool arg2 ;
  
  arg1 = (AnimationParam *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_bLooped = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AnimationParam_m_bLooped_get(void * jarg1) {
  unsigned int jresult ;
  AnimationParam *arg1 = (AnimationParam *) 0 ;
  bool result;
  
  arg1 = (AnimationParam *)jarg1; 
  result = (bool) ((arg1)->m_bLooped);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationParam_m_bAdditive_set(void * jarg1, unsigned int jarg2) {
  AnimationParam *arg1 = (AnimationParam *) 0 ;
  bool arg2 ;
  
  arg1 = (AnimationParam *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_bAdditive = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AnimationParam_m_bAdditive_get(void * jarg1) {
  unsigned int jresult ;
  AnimationParam *arg1 = (AnimationParam *) 0 ;
  bool result;
  
  arg1 = (AnimationParam *)jarg1; 
  result = (bool) ((arg1)->m_bAdditive);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationParam_m_bReverse_set(void * jarg1, unsigned int jarg2) {
  AnimationParam *arg1 = (AnimationParam *) 0 ;
  bool arg2 ;
  
  arg1 = (AnimationParam *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_bReverse = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AnimationParam_m_bReverse_get(void * jarg1) {
  unsigned int jresult ;
  AnimationParam *arg1 = (AnimationParam *) 0 ;
  bool result;
  
  arg1 = (AnimationParam *)jarg1; 
  result = (bool) ((arg1)->m_bReverse);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationParam_m_bStopAtTheEnd_set(void * jarg1, unsigned int jarg2) {
  AnimationParam *arg1 = (AnimationParam *) 0 ;
  bool arg2 ;
  
  arg1 = (AnimationParam *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_bStopAtTheEnd = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AnimationParam_m_bStopAtTheEnd_get(void * jarg1) {
  unsigned int jresult ;
  AnimationParam *arg1 = (AnimationParam *) 0 ;
  bool result;
  
  arg1 = (AnimationParam *)jarg1; 
  result = (bool) ((arg1)->m_bStopAtTheEnd);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationParam_m_bAdditive2_set(void * jarg1, unsigned int jarg2) {
  AnimationParam *arg1 = (AnimationParam *) 0 ;
  bool arg2 ;
  
  arg1 = (AnimationParam *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_bAdditive2 = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AnimationParam_m_bAdditive2_get(void * jarg1) {
  unsigned int jresult ;
  AnimationParam *arg1 = (AnimationParam *) 0 ;
  bool result;
  
  arg1 = (AnimationParam *)jarg1; 
  result = (bool) ((arg1)->m_bAdditive2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationParam_m_bDropToIdle_set(void * jarg1, unsigned int jarg2) {
  AnimationParam *arg1 = (AnimationParam *) 0 ;
  bool arg2 ;
  
  arg1 = (AnimationParam *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_bDropToIdle = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AnimationParam_m_bDropToIdle_get(void * jarg1) {
  unsigned int jresult ;
  AnimationParam *arg1 = (AnimationParam *) 0 ;
  bool result;
  
  arg1 = (AnimationParam *)jarg1; 
  result = (bool) ((arg1)->m_bDropToIdle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AnimationParam(void * jarg1) {
  AnimationParam *arg1 = (AnimationParam *) 0 ;
  
  arg1 = (AnimationParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UVAnimationParam() {
  void * jresult ;
  UVAnimationParam *result = 0 ;
  
  result = (UVAnimationParam *)new UVAnimationParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UVAnimationParam_m_fSpeed_set(void * jarg1, float jarg2) {
  UVAnimationParam *arg1 = (UVAnimationParam *) 0 ;
  float arg2 ;
  
  arg1 = (UVAnimationParam *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_fSpeed = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_UVAnimationParam_m_fSpeed_get(void * jarg1) {
  float jresult ;
  UVAnimationParam *arg1 = (UVAnimationParam *) 0 ;
  float result;
  
  arg1 = (UVAnimationParam *)jarg1; 
  result = (float) ((arg1)->m_fSpeed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UVAnimationParam_m_bGameUpdate_set(void * jarg1, unsigned int jarg2) {
  UVAnimationParam *arg1 = (UVAnimationParam *) 0 ;
  bool arg2 ;
  
  arg1 = (UVAnimationParam *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_bGameUpdate = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UVAnimationParam_m_bGameUpdate_get(void * jarg1) {
  unsigned int jresult ;
  UVAnimationParam *arg1 = (UVAnimationParam *) 0 ;
  bool result;
  
  arg1 = (UVAnimationParam *)jarg1; 
  result = (bool) ((arg1)->m_bGameUpdate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UVAnimationParam_m_bLooped_set(void * jarg1, unsigned int jarg2) {
  UVAnimationParam *arg1 = (UVAnimationParam *) 0 ;
  bool arg2 ;
  
  arg1 = (UVAnimationParam *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_bLooped = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UVAnimationParam_m_bLooped_get(void * jarg1) {
  unsigned int jresult ;
  UVAnimationParam *arg1 = (UVAnimationParam *) 0 ;
  bool result;
  
  arg1 = (UVAnimationParam *)jarg1; 
  result = (bool) ((arg1)->m_bLooped);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UVAnimationParam(void * jarg1) {
  UVAnimationParam *arg1 = (UVAnimationParam *) 0 ;
  
  arg1 = (UVAnimationParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LightmapInfo_m_vecLightmapWorldCoord_set(void * jarg1, void * jarg2) {
  LightmapInfo *arg1 = (LightmapInfo *) 0 ;
  CVec2 *arg2 = (CVec2 *) 0 ;
  
  arg1 = (LightmapInfo *)jarg1; 
  arg2 = (CVec2 *)jarg2; 
  if (arg1) (arg1)->m_vecLightmapWorldCoord = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LightmapInfo_m_vecLightmapWorldCoord_get(void * jarg1) {
  void * jresult ;
  LightmapInfo *arg1 = (LightmapInfo *) 0 ;
  CVec2 *result = 0 ;
  
  arg1 = (LightmapInfo *)jarg1; 
  result = (CVec2 *)& ((arg1)->m_vecLightmapWorldCoord);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LightmapInfo_m_vecLightmapSizeInWorld_set(void * jarg1, void * jarg2) {
  LightmapInfo *arg1 = (LightmapInfo *) 0 ;
  CVec2 *arg2 = (CVec2 *) 0 ;
  
  arg1 = (LightmapInfo *)jarg1; 
  arg2 = (CVec2 *)jarg2; 
  if (arg1) (arg1)->m_vecLightmapSizeInWorld = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LightmapInfo_m_vecLightmapSizeInWorld_get(void * jarg1) {
  void * jresult ;
  LightmapInfo *arg1 = (LightmapInfo *) 0 ;
  CVec2 *result = 0 ;
  
  arg1 = (LightmapInfo *)jarg1; 
  result = (CVec2 *)& ((arg1)->m_vecLightmapSizeInWorld);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LightmapInfo() {
  void * jresult ;
  LightmapInfo *result = 0 ;
  
  result = (LightmapInfo *)new LightmapInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_LightmapInfo(void * jarg1) {
  LightmapInfo *arg1 = (LightmapInfo *) 0 ;
  
  arg1 = (LightmapInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PreloadInfo_m_vecTextures_set(void * jarg1, void * jarg2) {
  PreloadInfo *arg1 = (PreloadInfo *) 0 ;
  Engine2::Vector< Engine2::String > *arg2 = (Engine2::Vector< Engine2::String > *) 0 ;
  
  arg1 = (PreloadInfo *)jarg1; 
  arg2 = (Engine2::Vector< Engine2::String > *)jarg2; 
  if (arg1) (arg1)->m_vecTextures = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PreloadInfo_m_vecTextures_get(void * jarg1) {
  void * jresult ;
  PreloadInfo *arg1 = (PreloadInfo *) 0 ;
  Engine2::Vector< Engine2::String > *result = 0 ;
  
  arg1 = (PreloadInfo *)jarg1; 
  result = (Engine2::Vector< Engine2::String > *)& ((arg1)->m_vecTextures);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PreloadInfo() {
  void * jresult ;
  PreloadInfo *result = 0 ;
  
  result = (PreloadInfo *)new PreloadInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PreloadInfo(void * jarg1) {
  PreloadInfo *arg1 = (PreloadInfo *) 0 ;
  
  arg1 = (PreloadInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IBaseMeshInfo_GetNumSubmeshes(void * jarg1) {
  int jresult ;
  IBaseMeshInfo *arg1 = (IBaseMeshInfo *) 0 ;
  int result;
  
  arg1 = (IBaseMeshInfo *)jarg1; 
  result = (int)(arg1)->GetNumSubmeshes();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IBaseMeshInfo_GetSubmeshName(void * jarg1, int jarg2) {
  char * jresult ;
  IBaseMeshInfo *arg1 = (IBaseMeshInfo *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  arg1 = (IBaseMeshInfo *)jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)(arg1)->GetSubmeshName(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IBaseMeshInfo_GetSubmeshFromName(void * jarg1, char * jarg2) {
  int jresult ;
  IBaseMeshInfo *arg1 = (IBaseMeshInfo *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = (IBaseMeshInfo *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (int)(arg1)->GetSubmeshFromName((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IBaseMeshInfo_GetSubmeshVisibility(void * jarg1, int jarg2) {
  unsigned int jresult ;
  IBaseMeshInfo *arg1 = (IBaseMeshInfo *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (IBaseMeshInfo *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->GetSubmeshVisibility(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IBaseMeshInfo_GetSubmeshIsFatThin(void * jarg1, int jarg2) {
  unsigned int jresult ;
  IBaseMeshInfo *arg1 = (IBaseMeshInfo *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (IBaseMeshInfo *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->GetSubmeshIsFatThin(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IBaseMeshInfo_GetSubmeshFatThinBalance(void * jarg1, int jarg2) {
  float jresult ;
  IBaseMeshInfo *arg1 = (IBaseMeshInfo *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (IBaseMeshInfo *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)(arg1)->GetSubmeshFatThinBalance(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IBaseMeshInfo_SetSubmeshFatThinBalance(void * jarg1, int jarg2, float jarg3) {
  IBaseMeshInfo *arg1 = (IBaseMeshInfo *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (IBaseMeshInfo *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->SetSubmeshFatThinBalance(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IBaseMeshInfo_SetSubmeshVisibility(void * jarg1, int jarg2, unsigned int jarg3) {
  IBaseMeshInfo *arg1 = (IBaseMeshInfo *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (IBaseMeshInfo *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->SetSubmeshVisibility(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IBaseMeshInfo_SetSubmeshesVisibility(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4) {
  IBaseMeshInfo *arg1 = (IBaseMeshInfo *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  bool arg4 ;
  
  arg1 = (IBaseMeshInfo *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->SetSubmeshesVisibility(arg2,arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IBaseMeshInfo_PrebuildMesh(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  IBaseMeshInfo *arg1 = (IBaseMeshInfo *) 0 ;
  PreloadInfo *arg2 = 0 ;
  bool result;
  
  arg1 = (IBaseMeshInfo *)jarg1; 
  arg2 = (PreloadInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PreloadInfo & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->PrebuildMesh(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IBaseMeshInfo_RebuildMesh__SWIG_0(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  IBaseMeshInfo *arg1 = (IBaseMeshInfo *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (IBaseMeshInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->RebuildMesh(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IBaseMeshInfo_RebuildMesh__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  IBaseMeshInfo *arg1 = (IBaseMeshInfo *) 0 ;
  bool result;
  
  arg1 = (IBaseMeshInfo *)jarg1; 
  result = (bool)(arg1)->RebuildMesh();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IBaseMeshInfo_GetSubmeshVertCount(void * jarg1, int jarg2) {
  int jresult ;
  IBaseMeshInfo *arg1 = (IBaseMeshInfo *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (IBaseMeshInfo *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->GetSubmeshVertCount(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IBaseMeshInfo_GetSubmeshIndCount(void * jarg1, int jarg2) {
  int jresult ;
  IBaseMeshInfo *arg1 = (IBaseMeshInfo *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (IBaseMeshInfo *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->GetSubmeshIndCount(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IBaseMeshInfo_GetSubmeshPositions(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  IBaseMeshInfo *arg1 = (IBaseMeshInfo *) 0 ;
  int arg2 ;
  CVec3 *arg3 = (CVec3 *) 0 ;
  bool result;
  
  arg1 = (IBaseMeshInfo *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (CVec3 *)jarg3; 
  result = (bool)(arg1)->GetSubmeshPositions(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IBaseMeshInfo_GetSubmeshNormals(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  IBaseMeshInfo *arg1 = (IBaseMeshInfo *) 0 ;
  int arg2 ;
  CVec3 *arg3 = (CVec3 *) 0 ;
  bool result;
  
  arg1 = (IBaseMeshInfo *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (CVec3 *)jarg3; 
  result = (bool)(arg1)->GetSubmeshNormals(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IBaseMeshInfo_GetSubmeshIndices(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  IBaseMeshInfo *arg1 = (IBaseMeshInfo *) 0 ;
  int arg2 ;
  short *arg3 = (short *) 0 ;
  bool result;
  
  arg1 = (IBaseMeshInfo *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (short *)jarg3; 
  result = (bool)(arg1)->GetSubmeshIndices(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IBaseMeshInfo_GetSubmeshMaterialsForTriangles(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  IBaseMeshInfo *arg1 = (IBaseMeshInfo *) 0 ;
  int arg2 ;
  short *arg3 = (short *) 0 ;
  bool result;
  
  arg1 = (IBaseMeshInfo *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (short *)jarg3; 
  result = (bool)(arg1)->GetSubmeshMaterialsForTriangles(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IBaseMeshInfo_IsSubmeshMaxMaterialUsed(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  IBaseMeshInfo *arg1 = (IBaseMeshInfo *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (IBaseMeshInfo *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->IsSubmeshMaxMaterialUsed(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IBaseMeshInfo_GetNumLods(void * jarg1) {
  unsigned int jresult ;
  IBaseMeshInfo *arg1 = (IBaseMeshInfo *) 0 ;
  uint32 result;
  
  arg1 = (IBaseMeshInfo *)jarg1; 
  result = (uint32)(arg1)->GetNumLods();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IBaseMeshInfo_SetAccessibleLod(void * jarg1, void * jarg2) {
  IBaseMeshInfo *arg1 = (IBaseMeshInfo *) 0 ;
  int32 arg2 ;
  int32 *argp2 ;
  
  arg1 = (IBaseMeshInfo *)jarg1; 
  argp2 = (int32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null int32", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetAccessibleLod(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_IBaseMeshInfo_GetLodDistance(void * jarg1, void * jarg2) {
  float jresult ;
  IBaseMeshInfo *arg1 = (IBaseMeshInfo *) 0 ;
  int32 arg2 ;
  int32 *argp2 ;
  float result;
  
  arg1 = (IBaseMeshInfo *)jarg1; 
  argp2 = (int32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null int32", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (float)(arg1)->GetLodDistance(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IBaseMeshInfo_SetLodDistance(void * jarg1, void * jarg2, float jarg3) {
  IBaseMeshInfo *arg1 = (IBaseMeshInfo *) 0 ;
  int32 arg2 ;
  float arg3 ;
  int32 *argp2 ;
  
  arg1 = (IBaseMeshInfo *)jarg1; 
  argp2 = (int32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null int32", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = (float)jarg3; 
  (arg1)->SetLodDistance(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IBaseMeshInfo_GetVisibleLod(void * jarg1) {
  unsigned int jresult ;
  IBaseMeshInfo *arg1 = (IBaseMeshInfo *) 0 ;
  uint32 result;
  
  arg1 = (IBaseMeshInfo *)jarg1; 
  result = (uint32)(arg1)->GetVisibleLod();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IBaseMeshInfo_SetLodDistances(void * jarg1, void * jarg2, float jarg3, float jarg4) {
  IBaseMeshInfo *arg1 = (IBaseMeshInfo *) 0 ;
  int32 arg2 ;
  float arg3 ;
  float arg4 ;
  int32 *argp2 ;
  
  arg1 = (IBaseMeshInfo *)jarg1; 
  argp2 = (int32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null int32", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->SetLodDistances(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IBaseMeshInfo_GetLodDistances(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  IBaseMeshInfo *arg1 = (IBaseMeshInfo *) 0 ;
  int32 arg2 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  int32 *argp2 ;
  
  arg1 = (IBaseMeshInfo *)jarg1; 
  argp2 = (int32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null int32", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = (float *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "float & type is null", 0);
    return ;
  } 
  arg4 = (float *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "float & type is null", 0);
    return ;
  } 
  (arg1)->GetLodDistances(arg2,*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IBaseMeshInfo_ForceRenderingLod(void * jarg1, void * jarg2) {
  IBaseMeshInfo *arg1 = (IBaseMeshInfo *) 0 ;
  int32 arg2 ;
  int32 *argp2 ;
  
  arg1 = (IBaseMeshInfo *)jarg1; 
  argp2 = (int32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null int32", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->ForceRenderingLod(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IBaseMeshInfo_TestRayIntersectionSubmesh(void * jarg1, int jarg2, void * jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  IBaseMeshInfo *arg1 = (IBaseMeshInfo *) 0 ;
  int arg2 ;
  CSegment *arg3 = 0 ;
  CVec3 *arg4 = 0 ;
  CVec3 *arg5 = 0 ;
  bool result;
  
  arg1 = (IBaseMeshInfo *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (CSegment *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CSegment const & type is null", 0);
    return 0;
  } 
  arg4 = (CVec3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec3 & type is null", 0);
    return 0;
  } 
  arg5 = (CVec3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec3 & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->TestRayIntersectionSubmesh(arg2,(CSegment const &)*arg3,*arg4,*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IBaseMeshInfo_GetNumMaterials(void * jarg1) {
  unsigned int jresult ;
  IBaseMeshInfo *arg1 = (IBaseMeshInfo *) 0 ;
  uint32 result;
  
  arg1 = (IBaseMeshInfo *)jarg1; 
  result = (uint32)(arg1)->GetNumMaterials();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IBaseMeshInfo_GetVisibleGlobalMaterialNum(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  IBaseMeshInfo *arg1 = (IBaseMeshInfo *) 0 ;
  uint32 arg2 ;
  uint32 result;
  
  arg1 = (IBaseMeshInfo *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (uint32)(arg1)->GetVisibleGlobalMaterialNum(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IBaseMeshInfo_GetVisibleFromGlobalMaterialNum(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  IBaseMeshInfo *arg1 = (IBaseMeshInfo *) 0 ;
  uint32 arg2 ;
  uint32 result;
  
  arg1 = (IBaseMeshInfo *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (uint32)(arg1)->GetVisibleFromGlobalMaterialNum(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IBaseMeshInfo_GetMaxMaterialsCount(void * jarg1) {
  unsigned int jresult ;
  IBaseMeshInfo *arg1 = (IBaseMeshInfo *) 0 ;
  uint32 result;
  
  arg1 = (IBaseMeshInfo *)jarg1; 
  result = (uint32)((IBaseMeshInfo const *)arg1)->GetMaxMaterialsCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IBaseMeshInfo_GetMaxMaterial(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  IBaseMeshInfo *arg1 = (IBaseMeshInfo *) 0 ;
  uint32 arg2 ;
  MaxMeshMaterial *result = 0 ;
  
  arg1 = (IBaseMeshInfo *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (MaxMeshMaterial *)((IBaseMeshInfo const *)arg1)->GetMaxMaterial(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IBaseMeshInfo_GetSkeleton(void * jarg1) {
  void * jresult ;
  IBaseMeshInfo *arg1 = (IBaseMeshInfo *) 0 ;
  ISkeleton *result = 0 ;
  
  arg1 = (IBaseMeshInfo *)jarg1; 
  result = (ISkeleton *)(arg1)->GetSkeleton();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IBaseMeshInfo_GetBaseSkeleton(void * jarg1) {
  void * jresult ;
  IBaseMeshInfo *arg1 = (IBaseMeshInfo *) 0 ;
  IBaseSkeleton *result = 0 ;
  
  arg1 = (IBaseMeshInfo *)jarg1; 
  result = (IBaseSkeleton *)(arg1)->GetBaseSkeleton();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IBaseMeshInfo_LoadAnimation(void * jarg1, char * jarg2) {
  int jresult ;
  IBaseMeshInfo *arg1 = (IBaseMeshInfo *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = (IBaseMeshInfo *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (int)(arg1)->LoadAnimation((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IBaseMeshInfo_CreateAnimationCopy(void * jarg1, char * jarg2) {
  int jresult ;
  IBaseMeshInfo *arg1 = (IBaseMeshInfo *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = (IBaseMeshInfo *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (int)(arg1)->CreateAnimationCopy((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IBaseMeshInfo_GetAnimationSize(void * jarg1, char * jarg2) {
  int jresult ;
  IBaseMeshInfo *arg1 = (IBaseMeshInfo *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = (IBaseMeshInfo *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (int)(arg1)->GetAnimationSize((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IBaseMeshInfo_UnloadAnimations(void * jarg1) {
  IBaseMeshInfo *arg1 = (IBaseMeshInfo *) 0 ;
  
  arg1 = (IBaseMeshInfo *)jarg1; 
  (arg1)->UnloadAnimations();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IBaseMeshInfo_UnloadAnimation(void * jarg1, unsigned int jarg2) {
  IBaseMeshInfo *arg1 = (IBaseMeshInfo *) 0 ;
  uint32 arg2 ;
  
  arg1 = (IBaseMeshInfo *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->UnloadAnimation(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IBaseMeshInfo_StartAnimation(void * jarg1, unsigned int jarg2, void * jarg3) {
  IBaseMeshInfo *arg1 = (IBaseMeshInfo *) 0 ;
  uint32 arg2 ;
  AnimationParam *arg3 = 0 ;
  
  arg1 = (IBaseMeshInfo *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (AnimationParam *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "AnimationParam & type is null", 0);
    return ;
  } 
  (arg1)->StartAnimation(arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IBaseMeshInfo_StopAnimation(void * jarg1, unsigned int jarg2) {
  IBaseMeshInfo *arg1 = (IBaseMeshInfo *) 0 ;
  uint32 arg2 ;
  
  arg1 = (IBaseMeshInfo *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->StopAnimation(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_IBaseMeshInfo_GetNumAnimations(void * jarg1) {
  int jresult ;
  IBaseMeshInfo *arg1 = (IBaseMeshInfo *) 0 ;
  int result;
  
  arg1 = (IBaseMeshInfo *)jarg1; 
  result = (int)(arg1)->GetNumAnimations();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IBaseMeshInfo_GetAnimationName(void * jarg1, unsigned int jarg2) {
  char * jresult ;
  IBaseMeshInfo *arg1 = (IBaseMeshInfo *) 0 ;
  uint32 arg2 ;
  char *result = 0 ;
  
  arg1 = (IBaseMeshInfo *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (char *)(arg1)->GetAnimationName(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IBaseMeshInfo_GetAnimationID(void * jarg1, char * jarg2) {
  int jresult ;
  IBaseMeshInfo *arg1 = (IBaseMeshInfo *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = (IBaseMeshInfo *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (int)(arg1)->GetAnimationID((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IBaseMeshInfo_GetParams__SWIG_0(void * jarg1, unsigned int jarg2, void * jarg3) {
  unsigned int jresult ;
  IBaseMeshInfo *arg1 = (IBaseMeshInfo *) 0 ;
  uint32 arg2 ;
  AnimationParam *arg3 = 0 ;
  bool result;
  
  arg1 = (IBaseMeshInfo *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (AnimationParam *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "AnimationParam & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->GetParams(arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IBaseMeshInfo_UpdateParams__SWIG_0(void * jarg1, unsigned int jarg2, void * jarg3) {
  unsigned int jresult ;
  IBaseMeshInfo *arg1 = (IBaseMeshInfo *) 0 ;
  uint32 arg2 ;
  AnimationParam *arg3 = 0 ;
  bool result;
  
  arg1 = (IBaseMeshInfo *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (AnimationParam *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "AnimationParam & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->UpdateParams(arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IBaseMeshInfo_GetStartTime(void * jarg1, unsigned int jarg2) {
  float jresult ;
  IBaseMeshInfo *arg1 = (IBaseMeshInfo *) 0 ;
  uint32 arg2 ;
  float result;
  
  arg1 = (IBaseMeshInfo *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (float)(arg1)->GetStartTime(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IBaseMeshInfo_GetEndTime(void * jarg1, unsigned int jarg2) {
  float jresult ;
  IBaseMeshInfo *arg1 = (IBaseMeshInfo *) 0 ;
  uint32 arg2 ;
  float result;
  
  arg1 = (IBaseMeshInfo *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (float)(arg1)->GetEndTime(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IBaseMeshInfo_SetRootBone(void * jarg1, int jarg2) {
  IBaseMeshInfo *arg1 = (IBaseMeshInfo *) 0 ;
  int arg2 ;
  
  arg1 = (IBaseMeshInfo *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetRootBone(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IBaseMeshInfo_LoadUVAnimation(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  IBaseMeshInfo *arg1 = (IBaseMeshInfo *) 0 ;
  char *arg2 = (char *) 0 ;
  uint32 result;
  
  arg1 = (IBaseMeshInfo *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (uint32)(arg1)->LoadUVAnimation((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IBaseMeshInfo_UnloadUVAnimation(void * jarg1, unsigned int jarg2) {
  IBaseMeshInfo *arg1 = (IBaseMeshInfo *) 0 ;
  uint32 arg2 ;
  
  arg1 = (IBaseMeshInfo *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->UnloadUVAnimation(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_IBaseMeshInfo_GetNumUVAnimations(void * jarg1) {
  int jresult ;
  IBaseMeshInfo *arg1 = (IBaseMeshInfo *) 0 ;
  int result;
  
  arg1 = (IBaseMeshInfo *)jarg1; 
  result = (int)(arg1)->GetNumUVAnimations();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IBaseMeshInfo_GetUVAnimationName(void * jarg1, unsigned int jarg2) {
  char * jresult ;
  IBaseMeshInfo *arg1 = (IBaseMeshInfo *) 0 ;
  uint32 arg2 ;
  char *result = 0 ;
  
  arg1 = (IBaseMeshInfo *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (char *)(arg1)->GetUVAnimationName(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IBaseMeshInfo_GetUVAnimationID(void * jarg1, char * jarg2) {
  int jresult ;
  IBaseMeshInfo *arg1 = (IBaseMeshInfo *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = (IBaseMeshInfo *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (int)(arg1)->GetUVAnimationID((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IBaseMeshInfo_StartUVAnimation(void * jarg1, unsigned int jarg2, void * jarg3) {
  IBaseMeshInfo *arg1 = (IBaseMeshInfo *) 0 ;
  uint32 arg2 ;
  UVAnimationParam *arg3 = 0 ;
  
  arg1 = (IBaseMeshInfo *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (UVAnimationParam *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UVAnimationParam & type is null", 0);
    return ;
  } 
  (arg1)->StartUVAnimation(arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IBaseMeshInfo_StopUVAnimation(void * jarg1, unsigned int jarg2) {
  IBaseMeshInfo *arg1 = (IBaseMeshInfo *) 0 ;
  uint32 arg2 ;
  
  arg1 = (IBaseMeshInfo *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->StopUVAnimation(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IBaseMeshInfo_GetParams__SWIG_1(void * jarg1, unsigned int jarg2, void * jarg3) {
  unsigned int jresult ;
  IBaseMeshInfo *arg1 = (IBaseMeshInfo *) 0 ;
  uint32 arg2 ;
  UVAnimationParam *arg3 = 0 ;
  bool result;
  
  arg1 = (IBaseMeshInfo *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (UVAnimationParam *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UVAnimationParam & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->GetParams(arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IBaseMeshInfo_UpdateParams__SWIG_1(void * jarg1, unsigned int jarg2, void * jarg3) {
  unsigned int jresult ;
  IBaseMeshInfo *arg1 = (IBaseMeshInfo *) 0 ;
  uint32 arg2 ;
  UVAnimationParam *arg3 = 0 ;
  bool result;
  
  arg1 = (IBaseMeshInfo *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (UVAnimationParam *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "UVAnimationParam & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->UpdateParams(arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IBaseMeshInfo_GetXRefsCount(void * jarg1) {
  unsigned long jresult ;
  IBaseMeshInfo *arg1 = (IBaseMeshInfo *) 0 ;
  size_t result;
  
  arg1 = (IBaseMeshInfo *)jarg1; 
  result = (arg1)->GetXRefsCount();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IBaseMeshInfo_GetXRef(void * jarg1, int jarg2) {
  void * jresult ;
  IBaseMeshInfo *arg1 = (IBaseMeshInfo *) 0 ;
  int arg2 ;
  IBaseMeshInfo *result = 0 ;
  
  arg1 = (IBaseMeshInfo *)jarg1; 
  arg2 = (int)jarg2; 
  result = (IBaseMeshInfo *)(arg1)->GetXRef(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IBaseMeshInfo_GetMeshCreation(void * jarg1) {
  int jresult ;
  IBaseMeshInfo *arg1 = (IBaseMeshInfo *) 0 ;
  eMeshCreation result;
  
  arg1 = (IBaseMeshInfo *)jarg1; 
  result = (eMeshCreation)(arg1)->GetMeshCreation();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IBaseMeshInfo_SetTransparencyState(void * jarg1, unsigned int jarg2) {
  IBaseMeshInfo *arg1 = (IBaseMeshInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (IBaseMeshInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetTransparencyState(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IBaseMeshInfo_GetTransparencyState(void * jarg1) {
  unsigned int jresult ;
  IBaseMeshInfo *arg1 = (IBaseMeshInfo *) 0 ;
  bool result;
  
  arg1 = (IBaseMeshInfo *)jarg1; 
  result = (bool)((IBaseMeshInfo const *)arg1)->GetTransparencyState();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IBaseMeshInfo_SetTransparency(void * jarg1, float jarg2) {
  IBaseMeshInfo *arg1 = (IBaseMeshInfo *) 0 ;
  float arg2 ;
  
  arg1 = (IBaseMeshInfo *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetTransparency(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_IBaseMeshInfo_GetTransparency(void * jarg1) {
  float jresult ;
  IBaseMeshInfo *arg1 = (IBaseMeshInfo *) 0 ;
  float result;
  
  arg1 = (IBaseMeshInfo *)jarg1; 
  result = (float)((IBaseMeshInfo const *)arg1)->GetTransparency();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IBaseMeshInfo_SetAlphaTest(void * jarg1, float jarg2) {
  IBaseMeshInfo *arg1 = (IBaseMeshInfo *) 0 ;
  float arg2 ;
  
  arg1 = (IBaseMeshInfo *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetAlphaTest(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_IBaseMeshInfo_GetAlphaTest(void * jarg1) {
  float jresult ;
  IBaseMeshInfo *arg1 = (IBaseMeshInfo *) 0 ;
  float result;
  
  arg1 = (IBaseMeshInfo *)jarg1; 
  result = (float)((IBaseMeshInfo const *)arg1)->GetAlphaTest();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IBaseMeshInfo_SetLightmapSource(void * jarg1, void * jarg2, void * jarg3) {
  IBaseMeshInfo *arg1 = (IBaseMeshInfo *) 0 ;
  LightmapInfo *arg2 = 0 ;
  TEXNUM arg3 ;
  TEXNUM *argp3 ;
  
  arg1 = (IBaseMeshInfo *)jarg1; 
  arg2 = (LightmapInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LightmapInfo & type is null", 0);
    return ;
  } 
  argp3 = (TEXNUM *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null TEXNUM", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->SetLightmapSource(*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IBaseMeshInfo_SetImposterScale(void * jarg1, float jarg2) {
  IBaseMeshInfo *arg1 = (IBaseMeshInfo *) 0 ;
  float arg2 ;
  
  arg1 = (IBaseMeshInfo *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetImposterScale(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_IBaseMeshInfo_GetImposterScale(void * jarg1) {
  float jresult ;
  IBaseMeshInfo *arg1 = (IBaseMeshInfo *) 0 ;
  float result;
  
  arg1 = (IBaseMeshInfo *)jarg1; 
  result = (float)(arg1)->GetImposterScale();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IBaseMeshInfo_GetRootMatrix(void * jarg1) {
  void * jresult ;
  IBaseMeshInfo *arg1 = (IBaseMeshInfo *) 0 ;
  CMatrix44 result;
  
  arg1 = (IBaseMeshInfo *)jarg1; 
  result = (arg1)->GetRootMatrix();
  jresult = new CMatrix44((const CMatrix44 &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IBaseMeshInfo_IsLastFrameVisible(void * jarg1) {
  unsigned int jresult ;
  IBaseMeshInfo *arg1 = (IBaseMeshInfo *) 0 ;
  bool result;
  
  arg1 = (IBaseMeshInfo *)jarg1; 
  result = (bool)((IBaseMeshInfo const *)arg1)->IsLastFrameVisible();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IBaseMeshInfo_SetInstancingPositions(void * jarg1, void * jarg2) {
  IBaseMeshInfo *arg1 = (IBaseMeshInfo *) 0 ;
  Engine2::Vector< CVec4 > *arg2 = 0 ;
  
  arg1 = (IBaseMeshInfo *)jarg1; 
  arg2 = (Engine2::Vector< CVec4 > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Engine2::Vector< CVec4 > const & type is null", 0);
    return ;
  } 
  (arg1)->SetInstancingPositions((Engine2::Vector< CVec4 > const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IBaseMeshInfo(void * jarg1) {
  IBaseMeshInfo *arg1 = (IBaseMeshInfo *) 0 ;
  
  arg1 = (IBaseMeshInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IAnimMeshInfo_LoadAnimationSet(void * jarg1, char * jarg2) {
  int jresult ;
  IAnimMeshInfo *arg1 = (IAnimMeshInfo *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = (IAnimMeshInfo *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (int)(arg1)->LoadAnimationSet((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IAnimMeshInfo_LoadAnimation(void * jarg1, char * jarg2) {
  int jresult ;
  IAnimMeshInfo *arg1 = (IAnimMeshInfo *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = (IAnimMeshInfo *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (int)(arg1)->LoadAnimation((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IAnimMeshInfo_UnloadAnimation(void * jarg1, unsigned int jarg2) {
  IAnimMeshInfo *arg1 = (IAnimMeshInfo *) 0 ;
  uint32 arg2 ;
  
  arg1 = (IAnimMeshInfo *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->UnloadAnimation(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IAnimMeshInfo_UnloadAnimations(void * jarg1) {
  IAnimMeshInfo *arg1 = (IAnimMeshInfo *) 0 ;
  
  arg1 = (IAnimMeshInfo *)jarg1; 
  (arg1)->UnloadAnimations();
}


SWIGEXPORT int SWIGSTDCALL CSharp_IAnimMeshInfo_GetNumAnimations(void * jarg1) {
  int jresult ;
  IAnimMeshInfo *arg1 = (IAnimMeshInfo *) 0 ;
  int result;
  
  arg1 = (IAnimMeshInfo *)jarg1; 
  result = (int)(arg1)->GetNumAnimations();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IAnimMeshInfo_GetAnimationName(void * jarg1, unsigned int jarg2) {
  char * jresult ;
  IAnimMeshInfo *arg1 = (IAnimMeshInfo *) 0 ;
  uint32 arg2 ;
  char *result = 0 ;
  
  arg1 = (IAnimMeshInfo *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (char *)(arg1)->GetAnimationName(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IAnimMeshInfo_GetAnimationID(void * jarg1, char * jarg2) {
  int jresult ;
  IAnimMeshInfo *arg1 = (IAnimMeshInfo *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = (IAnimMeshInfo *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (int)(arg1)->GetAnimationID((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IAnimMeshInfo_StartAnimation(void * jarg1, unsigned int jarg2, void * jarg3) {
  IAnimMeshInfo *arg1 = (IAnimMeshInfo *) 0 ;
  uint32 arg2 ;
  AnimationParam *arg3 = 0 ;
  
  arg1 = (IAnimMeshInfo *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (AnimationParam *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "AnimationParam & type is null", 0);
    return ;
  } 
  (arg1)->StartAnimation(arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IAnimMeshInfo_DetachBoneFromAnimation(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  IAnimMeshInfo *arg1 = (IAnimMeshInfo *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  
  arg1 = (IAnimMeshInfo *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  (arg1)->DetachBoneFromAnimation(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IAnimMeshInfo_AttachBoneToAnimation(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  IAnimMeshInfo *arg1 = (IAnimMeshInfo *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  
  arg1 = (IAnimMeshInfo *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  (arg1)->AttachBoneToAnimation(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IAnimMeshInfo_IsBoneAttachedToAnimation(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  IAnimMeshInfo *arg1 = (IAnimMeshInfo *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  bool result;
  
  arg1 = (IAnimMeshInfo *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  result = (bool)(arg1)->IsBoneAttachedToAnimation(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IAnimMeshInfo_StopAnimation(void * jarg1, unsigned int jarg2) {
  IAnimMeshInfo *arg1 = (IAnimMeshInfo *) 0 ;
  uint32 arg2 ;
  
  arg1 = (IAnimMeshInfo *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->StopAnimation(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_IAnimMeshInfo_GetAnimationSize(void * jarg1, char * jarg2) {
  int jresult ;
  IAnimMeshInfo *arg1 = (IAnimMeshInfo *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = (IAnimMeshInfo *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (int)(arg1)->GetAnimationSize((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IAnimMeshInfo_GetParams(void * jarg1, unsigned int jarg2, void * jarg3) {
  unsigned int jresult ;
  IAnimMeshInfo *arg1 = (IAnimMeshInfo *) 0 ;
  uint32 arg2 ;
  AnimationParam *arg3 = 0 ;
  bool result;
  
  arg1 = (IAnimMeshInfo *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (AnimationParam *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "AnimationParam & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->GetParams(arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IAnimMeshInfo_UpdateParams(void * jarg1, unsigned int jarg2, void * jarg3) {
  unsigned int jresult ;
  IAnimMeshInfo *arg1 = (IAnimMeshInfo *) 0 ;
  uint32 arg2 ;
  AnimationParam *arg3 = 0 ;
  bool result;
  
  arg1 = (IAnimMeshInfo *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (AnimationParam *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "AnimationParam & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->UpdateParams(arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IAnimMeshInfo_GetSkeleton(void * jarg1) {
  void * jresult ;
  IAnimMeshInfo *arg1 = (IAnimMeshInfo *) 0 ;
  ISkeleton *result = 0 ;
  
  arg1 = (IAnimMeshInfo *)jarg1; 
  result = (ISkeleton *)(arg1)->GetSkeleton();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IAnimMeshInfo_Update__SWIG_0(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  IAnimMeshInfo *arg1 = (IAnimMeshInfo *) 0 ;
  uint32 arg2 ;
  bool result;
  
  arg1 = (IAnimMeshInfo *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (bool)(arg1)->Update(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IAnimMeshInfo_Update__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  IAnimMeshInfo *arg1 = (IAnimMeshInfo *) 0 ;
  bool result;
  
  arg1 = (IAnimMeshInfo *)jarg1; 
  result = (bool)(arg1)->Update();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IAnimMeshInfo_SetTimeGameUpdate(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  IAnimMeshInfo *arg1 = (IAnimMeshInfo *) 0 ;
  uint32 arg2 ;
  bool arg3 ;
  
  arg1 = (IAnimMeshInfo *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->SetTimeGameUpdate(arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_IAnimMeshInfo_GetStartTime(void * jarg1, unsigned int jarg2) {
  float jresult ;
  IAnimMeshInfo *arg1 = (IAnimMeshInfo *) 0 ;
  uint32 arg2 ;
  float result;
  
  arg1 = (IAnimMeshInfo *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (float)(arg1)->GetStartTime(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IAnimMeshInfo_GetEndTime(void * jarg1, unsigned int jarg2) {
  float jresult ;
  IAnimMeshInfo *arg1 = (IAnimMeshInfo *) 0 ;
  uint32 arg2 ;
  float result;
  
  arg1 = (IAnimMeshInfo *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (float)(arg1)->GetEndTime(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IAnimMeshInfo_SetCurrentTrackTime(void * jarg1, unsigned int jarg2, float jarg3) {
  IAnimMeshInfo *arg1 = (IAnimMeshInfo *) 0 ;
  uint32 arg2 ;
  float arg3 ;
  
  arg1 = (IAnimMeshInfo *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->SetCurrentTrackTime(arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_IAnimMeshInfo_GetCurrentTrackTime(void * jarg1, unsigned int jarg2) {
  float jresult ;
  IAnimMeshInfo *arg1 = (IAnimMeshInfo *) 0 ;
  uint32 arg2 ;
  float result;
  
  arg1 = (IAnimMeshInfo *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (float)(arg1)->GetCurrentTrackTime(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_IAnimMeshInfo_GetCurrentWeight(void * jarg1, unsigned int jarg2) {
  float jresult ;
  IAnimMeshInfo *arg1 = (IAnimMeshInfo *) 0 ;
  uint32 arg2 ;
  float result;
  
  arg1 = (IAnimMeshInfo *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (float)(arg1)->GetCurrentWeight(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IAnimMeshInfo_SetCurrentWeight(void * jarg1, unsigned int jarg2, float jarg3) {
  IAnimMeshInfo *arg1 = (IAnimMeshInfo *) 0 ;
  uint32 arg2 ;
  float arg3 ;
  
  arg1 = (IAnimMeshInfo *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->SetCurrentWeight(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IAnimMeshInfo_GetGlobalIDFromLocalID(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  IAnimMeshInfo *arg1 = (IAnimMeshInfo *) 0 ;
  uint32 arg2 ;
  uint32 result;
  
  arg1 = (IAnimMeshInfo *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (uint32)(arg1)->GetGlobalIDFromLocalID(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IAnimMeshInfo_SetBindPose(void * jarg1) {
  IAnimMeshInfo *arg1 = (IAnimMeshInfo *) 0 ;
  
  arg1 = (IAnimMeshInfo *)jarg1; 
  (arg1)->SetBindPose();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IAnimMeshInfo_IsAnimationPlay(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  IAnimMeshInfo *arg1 = (IAnimMeshInfo *) 0 ;
  uint32 arg2 ;
  bool result;
  
  arg1 = (IAnimMeshInfo *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (bool)(arg1)->IsAnimationPlay(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IAnimMeshInfo_IsAnyAnimationPlay(void * jarg1) {
  unsigned int jresult ;
  IAnimMeshInfo *arg1 = (IAnimMeshInfo *) 0 ;
  bool result;
  
  arg1 = (IAnimMeshInfo *)jarg1; 
  result = (bool)(arg1)->IsAnyAnimationPlay();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IAnimMeshInfo_SetMaxMipLevel(void * jarg1, int jarg2) {
  IAnimMeshInfo *arg1 = (IAnimMeshInfo *) 0 ;
  int arg2 ;
  
  arg1 = (IAnimMeshInfo *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetMaxMipLevel(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_IAnimMeshInfo_GetMaxMipLevel(void * jarg1) {
  int jresult ;
  IAnimMeshInfo *arg1 = (IAnimMeshInfo *) 0 ;
  int result;
  
  arg1 = (IAnimMeshInfo *)jarg1; 
  result = (int)(arg1)->GetMaxMipLevel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IAnimMeshInfo_GetNumLods(void * jarg1) {
  unsigned int jresult ;
  IAnimMeshInfo *arg1 = (IAnimMeshInfo *) 0 ;
  uint32 result;
  
  arg1 = (IAnimMeshInfo *)jarg1; 
  result = (uint32)(arg1)->GetNumLods();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IAnimMeshInfo_SetAccessibleLod(void * jarg1, void * jarg2) {
  IAnimMeshInfo *arg1 = (IAnimMeshInfo *) 0 ;
  int32 arg2 ;
  int32 *argp2 ;
  
  arg1 = (IAnimMeshInfo *)jarg1; 
  argp2 = (int32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null int32", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetAccessibleLod(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_IAnimMeshInfo_GetLodDistance(void * jarg1, void * jarg2) {
  float jresult ;
  IAnimMeshInfo *arg1 = (IAnimMeshInfo *) 0 ;
  int32 arg2 ;
  int32 *argp2 ;
  float result;
  
  arg1 = (IAnimMeshInfo *)jarg1; 
  argp2 = (int32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null int32", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (float)(arg1)->GetLodDistance(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IAnimMeshInfo_SetLodDistance(void * jarg1, void * jarg2, float jarg3) {
  IAnimMeshInfo *arg1 = (IAnimMeshInfo *) 0 ;
  int32 arg2 ;
  float arg3 ;
  int32 *argp2 ;
  
  arg1 = (IAnimMeshInfo *)jarg1; 
  argp2 = (int32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null int32", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = (float)jarg3; 
  (arg1)->SetLodDistance(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IAnimMeshInfo_GetActiveBonesCount(void * jarg1) {
  unsigned int jresult ;
  IAnimMeshInfo *arg1 = (IAnimMeshInfo *) 0 ;
  uint32 result;
  
  arg1 = (IAnimMeshInfo *)jarg1; 
  result = (uint32)(arg1)->GetActiveBonesCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IAnimMeshInfo_GetLodUpdateMult(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  IAnimMeshInfo *arg1 = (IAnimMeshInfo *) 0 ;
  int32 arg2 ;
  int32 *argp2 ;
  uint32 result;
  
  arg1 = (IAnimMeshInfo *)jarg1; 
  argp2 = (int32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null int32", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (uint32)(arg1)->GetLodUpdateMult(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IAnimMeshInfo_SetLodUpdateMult(void * jarg1, void * jarg2, unsigned int jarg3) {
  IAnimMeshInfo *arg1 = (IAnimMeshInfo *) 0 ;
  int32 arg2 ;
  uint32 arg3 ;
  int32 *argp2 ;
  
  arg1 = (IAnimMeshInfo *)jarg1; 
  argp2 = (int32 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null int32", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = (uint32)jarg3; 
  (arg1)->SetLodUpdateMult(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IAnimMeshInfo_TestRayIntersectionSubmesh(void * jarg1, int jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  unsigned int jresult ;
  IAnimMeshInfo *arg1 = (IAnimMeshInfo *) 0 ;
  int arg2 ;
  CSegment *arg3 = 0 ;
  CVec3 *arg4 = 0 ;
  CVec3 *arg5 = 0 ;
  CVec3 *arg6 = 0 ;
  bool result;
  
  arg1 = (IAnimMeshInfo *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (CSegment *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CSegment const & type is null", 0);
    return 0;
  } 
  arg4 = (CVec3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec3 & type is null", 0);
    return 0;
  } 
  arg5 = (CVec3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec3 & type is null", 0);
    return 0;
  } 
  arg6 = (CVec3 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec3 & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->TestRayIntersectionSubmesh(arg2,(CSegment const &)*arg3,*arg4,*arg5,*arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IAnimMeshInfo_SetUniformScale(void * jarg1, float jarg2) {
  IAnimMeshInfo *arg1 = (IAnimMeshInfo *) 0 ;
  float arg2 ;
  
  arg1 = (IAnimMeshInfo *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetUniformScale(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IAnimMeshInfo(void * jarg1) {
  IAnimMeshInfo *arg1 = (IAnimMeshInfo *) 0 ;
  
  arg1 = (IAnimMeshInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CVec2_x_set(void * jarg1, float jarg2) {
  CVec2 *arg1 = (CVec2 *) 0 ;
  FLOAT arg2 ;
  
  arg1 = (CVec2 *)jarg1; 
  arg2 = (FLOAT)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CVec2_x_get(void * jarg1) {
  float jresult ;
  CVec2 *arg1 = (CVec2 *) 0 ;
  FLOAT result;
  
  arg1 = (CVec2 *)jarg1; 
  result = (FLOAT) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CVec2_y_set(void * jarg1, float jarg2) {
  CVec2 *arg1 = (CVec2 *) 0 ;
  FLOAT arg2 ;
  
  arg1 = (CVec2 *)jarg1; 
  arg2 = (FLOAT)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CVec2_y_get(void * jarg1) {
  float jresult ;
  CVec2 *arg1 = (CVec2 *) 0 ;
  FLOAT result;
  
  arg1 = (CVec2 *)jarg1; 
  result = (FLOAT) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CVec2__SWIG_0() {
  void * jresult ;
  CVec2 *result = 0 ;
  
  result = (CVec2 *)new CVec2();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CVec2__SWIG_1(int jarg1) {
  void * jresult ;
  int arg1 ;
  CVec2 *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (CVec2 *)new CVec2(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CVec2__SWIG_2(float jarg1, float jarg2) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  CVec2 *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (CVec2 *)new CVec2(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec2_add_assign(void * jarg1, void * jarg2) {
  void * jresult ;
  CVec2 *arg1 = (CVec2 *) 0 ;
  CVec2 *arg2 = 0 ;
  CVec2 *result = 0 ;
  
  arg1 = (CVec2 *)jarg1; 
  arg2 = (CVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec2 const & type is null", 0);
    return 0;
  } 
  result = (CVec2 *) &(arg1)->operator +=((CVec2 const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec2_sub_assign(void * jarg1, void * jarg2) {
  void * jresult ;
  CVec2 *arg1 = (CVec2 *) 0 ;
  CVec2 *arg2 = 0 ;
  CVec2 *result = 0 ;
  
  arg1 = (CVec2 *)jarg1; 
  arg2 = (CVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec2 const & type is null", 0);
    return 0;
  } 
  result = (CVec2 *) &(arg1)->operator -=((CVec2 const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec2_mul_assign(void * jarg1, float jarg2) {
  void * jresult ;
  CVec2 *arg1 = (CVec2 *) 0 ;
  FLOAT arg2 ;
  CVec2 *result = 0 ;
  
  arg1 = (CVec2 *)jarg1; 
  arg2 = (FLOAT)jarg2; 
  result = (CVec2 *) &(arg1)->operator *=(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec2_div_assign(void * jarg1, float jarg2) {
  void * jresult ;
  CVec2 *arg1 = (CVec2 *) 0 ;
  FLOAT arg2 ;
  CVec2 *result = 0 ;
  
  arg1 = (CVec2 *)jarg1; 
  arg2 = (FLOAT)jarg2; 
  result = (CVec2 *) &(arg1)->operator /=(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CVec2_equal(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  CVec2 *arg1 = (CVec2 *) 0 ;
  CVec2 *arg2 = 0 ;
  bool result;
  
  arg1 = (CVec2 *)jarg1; 
  arg2 = (CVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec2 const & type is null", 0);
    return 0;
  } 
  result = (bool)((CVec2 const *)arg1)->operator ==((CVec2 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CVec2_not_equal(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  CVec2 *arg1 = (CVec2 *) 0 ;
  CVec2 *arg2 = 0 ;
  bool result;
  
  arg1 = (CVec2 *)jarg1; 
  arg2 = (CVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec2 const & type is null", 0);
    return 0;
  } 
  result = (bool)((CVec2 const *)arg1)->operator !=((CVec2 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec2_add(void * jarg1, void * jarg2) {
  void * jresult ;
  CVec2 *arg1 = (CVec2 *) 0 ;
  CVec2 *arg2 = 0 ;
  CVec2 result;
  
  arg1 = (CVec2 *)jarg1; 
  arg2 = (CVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec2 const & type is null", 0);
    return 0;
  } 
  result = ((CVec2 const *)arg1)->operator +((CVec2 const &)*arg2);
  jresult = new CVec2((const CVec2 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec2_sub__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  CVec2 *arg1 = (CVec2 *) 0 ;
  CVec2 *arg2 = 0 ;
  CVec2 result;
  
  arg1 = (CVec2 *)jarg1; 
  arg2 = (CVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec2 const & type is null", 0);
    return 0;
  } 
  result = ((CVec2 const *)arg1)->operator -((CVec2 const &)*arg2);
  jresult = new CVec2((const CVec2 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec2_mul(void * jarg1, float jarg2) {
  void * jresult ;
  CVec2 *arg1 = (CVec2 *) 0 ;
  float arg2 ;
  CVec2 result;
  
  arg1 = (CVec2 *)jarg1; 
  arg2 = (float)jarg2; 
  result = ((CVec2 const *)arg1)->operator *(arg2);
  jresult = new CVec2((const CVec2 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec2_div(void * jarg1, float jarg2) {
  void * jresult ;
  CVec2 *arg1 = (CVec2 *) 0 ;
  float arg2 ;
  CVec2 result;
  
  arg1 = (CVec2 *)jarg1; 
  arg2 = (float)jarg2; 
  result = ((CVec2 const *)arg1)->operator /(arg2);
  jresult = new CVec2((const CVec2 &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CVec2_NotNULL(void * jarg1) {
  unsigned int jresult ;
  CVec2 *arg1 = (CVec2 *) 0 ;
  bool result;
  
  arg1 = (CVec2 *)jarg1; 
  result = (bool)((CVec2 const *)arg1)->NotNULL();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CVec2_Dot(void * jarg1, void * jarg2) {
  float jresult ;
  CVec2 *arg1 = (CVec2 *) 0 ;
  CVec2 *arg2 = 0 ;
  FLOAT result;
  
  arg1 = (CVec2 *)jarg1; 
  arg2 = (CVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec2 const & type is null", 0);
    return 0;
  } 
  result = (FLOAT)((CVec2 const *)arg1)->Dot((CVec2 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CVec2_Length(void * jarg1) {
  float jresult ;
  CVec2 *arg1 = (CVec2 *) 0 ;
  FLOAT result;
  
  arg1 = (CVec2 *)jarg1; 
  result = (FLOAT)((CVec2 const *)arg1)->Length();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CVec2_LengthSq(void * jarg1) {
  float jresult ;
  CVec2 *arg1 = (CVec2 *) 0 ;
  FLOAT result;
  
  arg1 = (CVec2 *)jarg1; 
  result = (FLOAT)((CVec2 const *)arg1)->LengthSq();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec2_Lerp(void * jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  CVec2 *arg1 = (CVec2 *) 0 ;
  CVec2 *arg2 = 0 ;
  float arg3 ;
  CVec2 result;
  
  arg1 = (CVec2 *)jarg1; 
  arg2 = (CVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec2 const & type is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  result = (arg1)->Lerp((CVec2 const &)*arg2,arg3);
  jresult = new CVec2((const CVec2 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec2_Normalize(void * jarg1) {
  void * jresult ;
  CVec2 *arg1 = (CVec2 *) 0 ;
  CVec2 *result = 0 ;
  
  arg1 = (CVec2 *)jarg1; 
  result = (CVec2 *) &(arg1)->Normalize();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec2_NormalizeFast(void * jarg1) {
  void * jresult ;
  CVec2 *arg1 = (CVec2 *) 0 ;
  CVec2 *result = 0 ;
  
  arg1 = (CVec2 *)jarg1; 
  result = (CVec2 *) &(arg1)->NormalizeFast();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec2_GetNormalized(void * jarg1) {
  void * jresult ;
  CVec2 *arg1 = (CVec2 *) 0 ;
  CVec2 result;
  
  arg1 = (CVec2 *)jarg1; 
  result = ((CVec2 const *)arg1)->GetNormalized();
  jresult = new CVec2((const CVec2 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec2_GetNormalizedFast(void * jarg1) {
  void * jresult ;
  CVec2 *arg1 = (CVec2 *) 0 ;
  CVec2 result;
  
  arg1 = (CVec2 *)jarg1; 
  result = ((CVec2 const *)arg1)->GetNormalizedFast();
  jresult = new CVec2((const CVec2 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec2_sub__SWIG_1(void * jarg1) {
  void * jresult ;
  CVec2 *arg1 = (CVec2 *) 0 ;
  CVec2 result;
  
  arg1 = (CVec2 *)jarg1; 
  result = ((CVec2 const *)arg1)->operator -();
  jresult = new CVec2((const CVec2 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CVec2_Validate(void * jarg1) {
  CVec2 *arg1 = (CVec2 *) 0 ;
  
  arg1 = (CVec2 *)jarg1; 
  (arg1)->Validate();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec2_assign__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  CVec2 *arg1 = (CVec2 *) 0 ;
  CVec4 *arg2 = 0 ;
  CVec2 *result = 0 ;
  
  arg1 = (CVec2 *)jarg1; 
  arg2 = (CVec4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec4 const & type is null", 0);
    return 0;
  } 
  result = (CVec2 *) &(arg1)->operator =((CVec4 const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec2_assign__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  CVec2 *arg1 = (CVec2 *) 0 ;
  CVec3 *arg2 = 0 ;
  CVec2 *result = 0 ;
  
  arg1 = (CVec2 *)jarg1; 
  arg2 = (CVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec3 const & type is null", 0);
    return 0;
  } 
  result = (CVec2 *) &(arg1)->operator =((CVec3 const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CVec2(void * jarg1) {
  CVec2 *arg1 = (CVec2 *) 0 ;
  
  arg1 = (CVec2 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec2BaryCentric(void * jarg1, void * jarg2, void * jarg3, float jarg4, float jarg5) {
  void * jresult ;
  CVec2 *arg1 = 0 ;
  CVec2 *arg2 = 0 ;
  CVec2 *arg3 = 0 ;
  float arg4 ;
  float arg5 ;
  CVec2 result;
  
  arg1 = (CVec2 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec2 const & type is null", 0);
    return 0;
  } 
  arg2 = (CVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec2 const & type is null", 0);
    return 0;
  } 
  arg3 = (CVec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec2 const & type is null", 0);
    return 0;
  } 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = CVec2BaryCentric((CVec2 const &)*arg1,(CVec2 const &)*arg2,(CVec2 const &)*arg3,arg4,arg5);
  jresult = new CVec2((const CVec2 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CVec3_x_set(void * jarg1, float jarg2) {
  CVec3 *arg1 = (CVec3 *) 0 ;
  FLOAT arg2 ;
  
  arg1 = (CVec3 *)jarg1; 
  arg2 = (FLOAT)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CVec3_x_get(void * jarg1) {
  float jresult ;
  CVec3 *arg1 = (CVec3 *) 0 ;
  FLOAT result;
  
  arg1 = (CVec3 *)jarg1; 
  result = (FLOAT) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CVec3_y_set(void * jarg1, float jarg2) {
  CVec3 *arg1 = (CVec3 *) 0 ;
  FLOAT arg2 ;
  
  arg1 = (CVec3 *)jarg1; 
  arg2 = (FLOAT)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CVec3_y_get(void * jarg1) {
  float jresult ;
  CVec3 *arg1 = (CVec3 *) 0 ;
  FLOAT result;
  
  arg1 = (CVec3 *)jarg1; 
  result = (FLOAT) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CVec3_z_set(void * jarg1, float jarg2) {
  CVec3 *arg1 = (CVec3 *) 0 ;
  FLOAT arg2 ;
  
  arg1 = (CVec3 *)jarg1; 
  arg2 = (FLOAT)jarg2; 
  if (arg1) (arg1)->z = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CVec3_z_get(void * jarg1) {
  float jresult ;
  CVec3 *arg1 = (CVec3 *) 0 ;
  FLOAT result;
  
  arg1 = (CVec3 *)jarg1; 
  result = (FLOAT) ((arg1)->z);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CVec3__SWIG_0(void * jarg1) {
  void * jresult ;
  CIdentity *arg1 = (CIdentity *) 0 ;
  CVec3 *result = 0 ;
  
  arg1 = (CIdentity *)jarg1; 
  result = (CVec3 *)new CVec3((CIdentity const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CVec3__SWIG_1(float jarg1, float jarg2, float jarg3) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  CVec3 *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (CVec3 *)new CVec3(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CVec3__SWIG_2() {
  void * jresult ;
  CVec3 *result = 0 ;
  
  result = (CVec3 *)new CVec3();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CVec3__SWIG_3(void * jarg1) {
  void * jresult ;
  CQuaternion *arg1 = 0 ;
  CVec3 *result = 0 ;
  
  arg1 = (CQuaternion *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CQuaternion const & type is null", 0);
    return 0;
  } 
  result = (CVec3 *)new CVec3((CQuaternion const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CVec3__SWIG_4(void * jarg1) {
  void * jresult ;
  CMatrix44 *arg1 = 0 ;
  CVec3 *result = 0 ;
  
  arg1 = (CMatrix44 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CMatrix44 const & type is null", 0);
    return 0;
  } 
  result = (CVec3 *)new CVec3((CMatrix44 const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CVec3_Set(void * jarg1, float jarg2, float jarg3, float jarg4) {
  CVec3 *arg1 = (CVec3 *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (CVec3 *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->Set(arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec3_assign__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  CVec3 *arg1 = (CVec3 *) 0 ;
  CVec3 *arg2 = 0 ;
  CVec3 *result = 0 ;
  
  arg1 = (CVec3 *)jarg1; 
  arg2 = (CVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec3 const & type is null", 0);
    return 0;
  } 
  result = (CVec3 *) &(arg1)->operator =((CVec3 const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec3_add_assign(void * jarg1, void * jarg2) {
  void * jresult ;
  CVec3 *arg1 = (CVec3 *) 0 ;
  CVec3 *arg2 = 0 ;
  CVec3 *result = 0 ;
  
  arg1 = (CVec3 *)jarg1; 
  arg2 = (CVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec3 const & type is null", 0);
    return 0;
  } 
  result = (CVec3 *) &(arg1)->operator +=((CVec3 const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec3_sub_assign(void * jarg1, void * jarg2) {
  void * jresult ;
  CVec3 *arg1 = (CVec3 *) 0 ;
  CVec3 *arg2 = 0 ;
  CVec3 *result = 0 ;
  
  arg1 = (CVec3 *)jarg1; 
  arg2 = (CVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec3 const & type is null", 0);
    return 0;
  } 
  result = (CVec3 *) &(arg1)->operator -=((CVec3 const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec3_mul_assign(void * jarg1, float jarg2) {
  void * jresult ;
  CVec3 *arg1 = (CVec3 *) 0 ;
  FLOAT arg2 ;
  CVec3 *result = 0 ;
  
  arg1 = (CVec3 *)jarg1; 
  arg2 = (FLOAT)jarg2; 
  result = (CVec3 *) &(arg1)->operator *=(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec3_div_assign(void * jarg1, float jarg2) {
  void * jresult ;
  CVec3 *arg1 = (CVec3 *) 0 ;
  FLOAT arg2 ;
  CVec3 *result = 0 ;
  
  arg1 = (CVec3 *)jarg1; 
  arg2 = (FLOAT)jarg2; 
  result = (CVec3 *) &(arg1)->operator /=(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CVec3_equal(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  CVec3 *arg1 = (CVec3 *) 0 ;
  CVec3 *arg2 = 0 ;
  bool result;
  
  arg1 = (CVec3 *)jarg1; 
  arg2 = (CVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec3 const & type is null", 0);
    return 0;
  } 
  result = (bool)((CVec3 const *)arg1)->operator ==((CVec3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CVec3_not_equal(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  CVec3 *arg1 = (CVec3 *) 0 ;
  CVec3 *arg2 = 0 ;
  bool result;
  
  arg1 = (CVec3 *)jarg1; 
  arg2 = (CVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec3 const & type is null", 0);
    return 0;
  } 
  result = (bool)((CVec3 const *)arg1)->operator !=((CVec3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec3_assign__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  CVec3 *arg1 = (CVec3 *) 0 ;
  CVec4 *arg2 = 0 ;
  CVec3 *result = 0 ;
  
  arg1 = (CVec3 *)jarg1; 
  arg2 = (CVec4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec4 const & type is null", 0);
    return 0;
  } 
  result = (CVec3 *) &(arg1)->operator =((CVec4 const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec3_assign__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  CVec3 *arg1 = (CVec3 *) 0 ;
  CVec2 *arg2 = 0 ;
  CVec3 *result = 0 ;
  
  arg1 = (CVec3 *)jarg1; 
  arg2 = (CVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec2 const & type is null", 0);
    return 0;
  } 
  result = (CVec3 *) &(arg1)->operator =((CVec2 const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec3_sub__SWIG_0(void * jarg1) {
  void * jresult ;
  CVec3 *arg1 = (CVec3 *) 0 ;
  CVec3 result;
  
  arg1 = (CVec3 *)jarg1; 
  result = ((CVec3 const *)arg1)->operator -();
  jresult = new CVec3((const CVec3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec3_add(void * jarg1, void * jarg2) {
  void * jresult ;
  CVec3 *arg1 = (CVec3 *) 0 ;
  CVec3 *arg2 = 0 ;
  CVec3 result;
  
  arg1 = (CVec3 *)jarg1; 
  arg2 = (CVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec3 const & type is null", 0);
    return 0;
  } 
  result = ((CVec3 const *)arg1)->operator +((CVec3 const &)*arg2);
  jresult = new CVec3((const CVec3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec3_sub__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  CVec3 *arg1 = (CVec3 *) 0 ;
  CVec3 *arg2 = 0 ;
  CVec3 result;
  
  arg1 = (CVec3 *)jarg1; 
  arg2 = (CVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec3 const & type is null", 0);
    return 0;
  } 
  result = ((CVec3 const *)arg1)->operator -((CVec3 const &)*arg2);
  jresult = new CVec3((const CVec3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec3_mul__SWIG_0(void * jarg1, float jarg2) {
  void * jresult ;
  CVec3 *arg1 = (CVec3 *) 0 ;
  FLOAT arg2 ;
  CVec3 result;
  
  arg1 = (CVec3 *)jarg1; 
  arg2 = (FLOAT)jarg2; 
  result = ((CVec3 const *)arg1)->operator *(arg2);
  jresult = new CVec3((const CVec3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec3_div__SWIG_0(void * jarg1, float jarg2) {
  void * jresult ;
  CVec3 *arg1 = (CVec3 *) 0 ;
  FLOAT arg2 ;
  CVec3 result;
  
  arg1 = (CVec3 *)jarg1; 
  arg2 = (FLOAT)jarg2; 
  result = ((CVec3 const *)arg1)->operator /(arg2);
  jresult = new CVec3((const CVec3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec3_div__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  CVec3 *arg1 = (CVec3 *) 0 ;
  CVec3 *arg2 = 0 ;
  CVec3 result;
  
  arg1 = (CVec3 *)jarg1; 
  arg2 = (CVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec3 const & type is null", 0);
    return 0;
  } 
  result = ((CVec3 const *)arg1)->operator /((CVec3 const &)*arg2);
  jresult = new CVec3((const CVec3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec3_mul__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  CVec3 *arg1 = (CVec3 *) 0 ;
  CVec3 *arg2 = 0 ;
  CVec3 result;
  
  arg1 = (CVec3 *)jarg1; 
  arg2 = (CVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec3 const & type is null", 0);
    return 0;
  } 
  result = ((CVec3 const *)arg1)->operator *((CVec3 const &)*arg2);
  jresult = new CVec3((const CVec3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec3_mul__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  CVec3 *arg1 = (CVec3 *) 0 ;
  CMatrix44 *arg2 = 0 ;
  CVec3 result;
  
  arg1 = (CVec3 *)jarg1; 
  arg2 = (CMatrix44 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CMatrix44 const & type is null", 0);
    return 0;
  } 
  result = ((CVec3 const *)arg1)->operator *((CMatrix44 const &)*arg2);
  jresult = new CVec3((const CVec3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_mul_float__SWIG_0(float jarg1, void * jarg2) {
  void * jresult ;
  FLOAT arg1 ;
  CVec3 *arg2 = 0 ;
  CVec3 result;
  
  arg1 = (FLOAT)jarg1; 
  arg2 = (CVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec3 const & type is null", 0);
    return 0;
  } 
  result = operator *(arg1,(CVec3 const &)*arg2);
  jresult = new CVec3((const CVec3 &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CVec3_LengthSq(void * jarg1) {
  float jresult ;
  CVec3 *arg1 = (CVec3 *) 0 ;
  FLOAT result;
  
  arg1 = (CVec3 *)jarg1; 
  result = (FLOAT)((CVec3 const *)arg1)->LengthSq();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CVec3_Length(void * jarg1) {
  float jresult ;
  CVec3 *arg1 = (CVec3 *) 0 ;
  FLOAT result;
  
  arg1 = (CVec3 *)jarg1; 
  result = (FLOAT)((CVec3 const *)arg1)->Length();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CVec3_Dot(void * jarg1, void * jarg2) {
  float jresult ;
  CVec3 *arg1 = (CVec3 *) 0 ;
  CVec3 *arg2 = 0 ;
  FLOAT result;
  
  arg1 = (CVec3 *)jarg1; 
  arg2 = (CVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec3 const & type is null", 0);
    return 0;
  } 
  result = (FLOAT)((CVec3 const *)arg1)->Dot((CVec3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec3_cast(void * jarg1) {
  void * jresult ;
  CVec3 *arg1 = (CVec3 *) 0 ;
  FLOAT *result = 0 ;
  
  arg1 = (CVec3 *)jarg1; 
  result = (FLOAT *)(arg1)->operator FLOAT*();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec3_const_cast(void * jarg1) {
  void * jresult ;
  CVec3 *arg1 = (CVec3 *) 0 ;
  FLOAT *result = 0 ;
  
  arg1 = (CVec3 *)jarg1; 
  result = (FLOAT *)((CVec3 const *)arg1)->operator const FLOAT*();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec3_Cross(void * jarg1, void * jarg2) {
  void * jresult ;
  CVec3 *arg1 = (CVec3 *) 0 ;
  CVec3 *arg2 = 0 ;
  CVec3 result;
  
  arg1 = (CVec3 *)jarg1; 
  arg2 = (CVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec3 const & type is null", 0);
    return 0;
  } 
  result = ((CVec3 const *)arg1)->Cross((CVec3 const &)*arg2);
  jresult = new CVec3((const CVec3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec3_Lerp(void * jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  CVec3 *arg1 = (CVec3 *) 0 ;
  CVec3 *arg2 = 0 ;
  float arg3 ;
  CVec3 result;
  
  arg1 = (CVec3 *)jarg1; 
  arg2 = (CVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec3 & type is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  result = ((CVec3 const *)arg1)->Lerp(*arg2,arg3);
  jresult = new CVec3((const CVec3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec3_TransformNormal(void * jarg1, void * jarg2) {
  void * jresult ;
  CVec3 *arg1 = (CVec3 *) 0 ;
  CMatrix44 *arg2 = 0 ;
  CVec3 result;
  
  arg1 = (CVec3 *)jarg1; 
  arg2 = (CMatrix44 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CMatrix44 const & type is null", 0);
    return 0;
  } 
  result = ((CVec3 const *)arg1)->TransformNormal((CMatrix44 const &)*arg2);
  jresult = new CVec3((const CVec3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec3_TransformPoint(void * jarg1, void * jarg2) {
  void * jresult ;
  CVec3 *arg1 = (CVec3 *) 0 ;
  CMatrix44 *arg2 = 0 ;
  CVec3 result;
  
  arg1 = (CVec3 *)jarg1; 
  arg2 = (CMatrix44 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CMatrix44 const & type is null", 0);
    return 0;
  } 
  result = ((CVec3 const *)arg1)->TransformPoint((CMatrix44 const &)*arg2);
  jresult = new CVec3((const CVec3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec3_SetScale(void * jarg1, float jarg2) {
  void * jresult ;
  CVec3 *arg1 = (CVec3 *) 0 ;
  float arg2 ;
  CVec3 *result = 0 ;
  
  arg1 = (CVec3 *)jarg1; 
  arg2 = (float)jarg2; 
  result = (CVec3 *) &(arg1)->SetScale(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CVec3_CheckMax(void * jarg1, void * jarg2) {
  CVec3 *arg1 = (CVec3 *) 0 ;
  CVec3 *arg2 = 0 ;
  
  arg1 = (CVec3 *)jarg1; 
  arg2 = (CVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec3 const & type is null", 0);
    return ;
  } 
  (arg1)->CheckMax((CVec3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CVec3_CheckMin(void * jarg1, void * jarg2) {
  CVec3 *arg1 = (CVec3 *) 0 ;
  CVec3 *arg2 = 0 ;
  
  arg1 = (CVec3 *)jarg1; 
  arg2 = (CVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec3 const & type is null", 0);
    return ;
  } 
  (arg1)->CheckMin((CVec3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec3_Scale(void * jarg1, float jarg2) {
  void * jresult ;
  CVec3 *arg1 = (CVec3 *) 0 ;
  float arg2 ;
  CVec3 result;
  
  arg1 = (CVec3 *)jarg1; 
  arg2 = (float)jarg2; 
  result = (arg1)->Scale(arg2);
  jresult = new CVec3((const CVec3 &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CVec3_NotNULL(void * jarg1) {
  unsigned int jresult ;
  CVec3 *arg1 = (CVec3 *) 0 ;
  bool result;
  
  arg1 = (CVec3 *)jarg1; 
  result = (bool)((CVec3 const *)arg1)->NotNULL();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec3_NormalizeFast(void * jarg1) {
  void * jresult ;
  CVec3 *arg1 = (CVec3 *) 0 ;
  CVec3 *result = 0 ;
  
  arg1 = (CVec3 *)jarg1; 
  result = (CVec3 *) &(arg1)->NormalizeFast();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec3_Normalize(void * jarg1) {
  void * jresult ;
  CVec3 *arg1 = (CVec3 *) 0 ;
  CVec3 *result = 0 ;
  
  arg1 = (CVec3 *)jarg1; 
  result = (CVec3 *) &(arg1)->Normalize();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec3_GetNormalized(void * jarg1) {
  void * jresult ;
  CVec3 *arg1 = (CVec3 *) 0 ;
  CVec3 result;
  
  arg1 = (CVec3 *)jarg1; 
  result = ((CVec3 const *)arg1)->GetNormalized();
  jresult = new CVec3((const CVec3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec3_GetNormalizedFast(void * jarg1) {
  void * jresult ;
  CVec3 *arg1 = (CVec3 *) 0 ;
  CVec3 result;
  
  arg1 = (CVec3 *)jarg1; 
  result = ((CVec3 const *)arg1)->GetNormalizedFast();
  jresult = new CVec3((const CVec3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec3_GetRotation(void * jarg1) {
  void * jresult ;
  CVec3 *arg1 = (CVec3 *) 0 ;
  CVec3 result;
  
  arg1 = (CVec3 *)jarg1; 
  result = (arg1)->GetRotation();
  jresult = new CVec3((const CVec3 &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CVec3_GetDistance(void * jarg1, void * jarg2) {
  float jresult ;
  CVec3 *arg1 = (CVec3 *) 0 ;
  CVec3 *arg2 = 0 ;
  FLOAT result;
  
  arg1 = (CVec3 *)jarg1; 
  arg2 = (CVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec3 const & type is null", 0);
    return 0;
  } 
  result = (FLOAT)((CVec3 const *)arg1)->GetDistance((CVec3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CVec3_GetDistanceSq(void * jarg1, void * jarg2) {
  float jresult ;
  CVec3 *arg1 = (CVec3 *) 0 ;
  CVec3 *arg2 = 0 ;
  FLOAT result;
  
  arg1 = (CVec3 *)jarg1; 
  arg2 = (CVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec3 const & type is null", 0);
    return 0;
  } 
  result = (FLOAT)((CVec3 const *)arg1)->GetDistanceSq((CVec3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CVec3_SetLength(void * jarg1, float jarg2) {
  CVec3 *arg1 = (CVec3 *) 0 ;
  FLOAT arg2 ;
  
  arg1 = (CVec3 *)jarg1; 
  arg2 = (FLOAT)jarg2; 
  (arg1)->SetLength(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CVec3_Validate(void * jarg1) {
  CVec3 *arg1 = (CVec3 *) 0 ;
  
  arg1 = (CVec3 *)jarg1; 
  ((CVec3 const *)arg1)->Validate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CVec3(void * jarg1) {
  CVec3 *arg1 = (CVec3 *) 0 ;
  
  arg1 = (CVec3 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CVec4__SWIG_0() {
  void * jresult ;
  CVec4 *result = 0 ;
  
  result = (CVec4 *)new CVec4();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CVec4_x_set(void * jarg1, float jarg2) {
  CVec4 *arg1 = (CVec4 *) 0 ;
  FLOAT arg2 ;
  
  arg1 = (CVec4 *)jarg1; 
  arg2 = (FLOAT)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CVec4_x_get(void * jarg1) {
  float jresult ;
  CVec4 *arg1 = (CVec4 *) 0 ;
  FLOAT result;
  
  arg1 = (CVec4 *)jarg1; 
  result = (FLOAT) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CVec4_y_set(void * jarg1, float jarg2) {
  CVec4 *arg1 = (CVec4 *) 0 ;
  FLOAT arg2 ;
  
  arg1 = (CVec4 *)jarg1; 
  arg2 = (FLOAT)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CVec4_y_get(void * jarg1) {
  float jresult ;
  CVec4 *arg1 = (CVec4 *) 0 ;
  FLOAT result;
  
  arg1 = (CVec4 *)jarg1; 
  result = (FLOAT) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CVec4_z_set(void * jarg1, float jarg2) {
  CVec4 *arg1 = (CVec4 *) 0 ;
  FLOAT arg2 ;
  
  arg1 = (CVec4 *)jarg1; 
  arg2 = (FLOAT)jarg2; 
  if (arg1) (arg1)->z = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CVec4_z_get(void * jarg1) {
  float jresult ;
  CVec4 *arg1 = (CVec4 *) 0 ;
  FLOAT result;
  
  arg1 = (CVec4 *)jarg1; 
  result = (FLOAT) ((arg1)->z);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CVec4_w_set(void * jarg1, float jarg2) {
  CVec4 *arg1 = (CVec4 *) 0 ;
  FLOAT arg2 ;
  
  arg1 = (CVec4 *)jarg1; 
  arg2 = (FLOAT)jarg2; 
  if (arg1) (arg1)->w = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CVec4_w_get(void * jarg1) {
  float jresult ;
  CVec4 *arg1 = (CVec4 *) 0 ;
  FLOAT result;
  
  arg1 = (CVec4 *)jarg1; 
  result = (FLOAT) ((arg1)->w);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CVec4__SWIG_1(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  FLOAT arg1 ;
  FLOAT arg2 ;
  FLOAT arg3 ;
  FLOAT arg4 ;
  CVec4 *result = 0 ;
  
  arg1 = (FLOAT)jarg1; 
  arg2 = (FLOAT)jarg2; 
  arg3 = (FLOAT)jarg3; 
  arg4 = (FLOAT)jarg4; 
  result = (CVec4 *)new CVec4(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CVec4__SWIG_2(unsigned int jarg1) {
  void * jresult ;
  uint32 arg1 ;
  CVec4 *result = 0 ;
  
  arg1 = (uint32)jarg1; 
  result = (CVec4 *)new CVec4(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CVec4__SWIG_3(float jarg1) {
  void * jresult ;
  FLOAT arg1 ;
  CVec4 *result = 0 ;
  
  arg1 = (FLOAT)jarg1; 
  result = (CVec4 *)new CVec4(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CVec4__SWIG_4(void * jarg1, float jarg2) {
  void * jresult ;
  CVec3 *arg1 = 0 ;
  float arg2 ;
  CVec4 *result = 0 ;
  
  arg1 = (CVec3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec3 const & type is null", 0);
    return 0;
  } 
  arg2 = (float)jarg2; 
  result = (CVec4 *)new CVec4((CVec3 const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CVec4__SWIG_5(void * jarg1) {
  void * jresult ;
  CQuaternion *arg1 = 0 ;
  CVec4 *result = 0 ;
  
  arg1 = (CQuaternion *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CQuaternion & type is null", 0);
    return 0;
  } 
  result = (CVec4 *)new CVec4(*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec4_add__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  CVec4 *arg1 = (CVec4 *) 0 ;
  CVec4 *arg2 = 0 ;
  CVec4 result;
  
  arg1 = (CVec4 *)jarg1; 
  arg2 = (CVec4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec4 const & type is null", 0);
    return 0;
  } 
  result = ((CVec4 const *)arg1)->operator +((CVec4 const &)*arg2);
  jresult = new CVec4((const CVec4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec4_sub__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  CVec4 *arg1 = (CVec4 *) 0 ;
  CVec4 *arg2 = 0 ;
  CVec4 result;
  
  arg1 = (CVec4 *)jarg1; 
  arg2 = (CVec4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec4 const & type is null", 0);
    return 0;
  } 
  result = ((CVec4 const *)arg1)->operator -((CVec4 const &)*arg2);
  jresult = new CVec4((const CVec4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec4_mul__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  CVec4 *arg1 = (CVec4 *) 0 ;
  CVec4 *arg2 = 0 ;
  CVec4 result;
  
  arg1 = (CVec4 *)jarg1; 
  arg2 = (CVec4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec4 const & type is null", 0);
    return 0;
  } 
  result = ((CVec4 const *)arg1)->operator *((CVec4 const &)*arg2);
  jresult = new CVec4((const CVec4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec4_mul__SWIG_1(void * jarg1, float jarg2) {
  void * jresult ;
  CVec4 *arg1 = (CVec4 *) 0 ;
  FLOAT arg2 ;
  CVec4 result;
  
  arg1 = (CVec4 *)jarg1; 
  arg2 = (FLOAT)jarg2; 
  result = ((CVec4 const *)arg1)->operator *(arg2);
  jresult = new CVec4((const CVec4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec4_div(void * jarg1, float jarg2) {
  void * jresult ;
  CVec4 *arg1 = (CVec4 *) 0 ;
  FLOAT arg2 ;
  CVec4 result;
  
  arg1 = (CVec4 *)jarg1; 
  arg2 = (FLOAT)jarg2; 
  result = ((CVec4 const *)arg1)->operator /(arg2);
  jresult = new CVec4((const CVec4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec4_cast(void * jarg1) {
  void * jresult ;
  CVec4 *arg1 = (CVec4 *) 0 ;
  FLOAT *result = 0 ;
  
  arg1 = (CVec4 *)jarg1; 
  result = (FLOAT *)(arg1)->operator FLOAT*();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec4_const_cast(void * jarg1) {
  void * jresult ;
  CVec4 *arg1 = (CVec4 *) 0 ;
  FLOAT *result = 0 ;
  
  arg1 = (CVec4 *)jarg1; 
  result = (FLOAT *)((CVec4 const *)arg1)->operator const FLOAT*();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec4_add_assign(void * jarg1, void * jarg2) {
  void * jresult ;
  CVec4 *arg1 = (CVec4 *) 0 ;
  CVec4 *arg2 = 0 ;
  CVec4 *result = 0 ;
  
  arg1 = (CVec4 *)jarg1; 
  arg2 = (CVec4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec4 const & type is null", 0);
    return 0;
  } 
  result = (CVec4 *) &(arg1)->operator +=((CVec4 const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec4_sub_assign(void * jarg1, void * jarg2) {
  void * jresult ;
  CVec4 *arg1 = (CVec4 *) 0 ;
  CVec4 *arg2 = 0 ;
  CVec4 *result = 0 ;
  
  arg1 = (CVec4 *)jarg1; 
  arg2 = (CVec4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec4 const & type is null", 0);
    return 0;
  } 
  result = (CVec4 *) &(arg1)->operator -=((CVec4 const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec4_mul_assign(void * jarg1, float jarg2) {
  void * jresult ;
  CVec4 *arg1 = (CVec4 *) 0 ;
  FLOAT arg2 ;
  CVec4 *result = 0 ;
  
  arg1 = (CVec4 *)jarg1; 
  arg2 = (FLOAT)jarg2; 
  result = (CVec4 *) &(arg1)->operator *=(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec4_div_assign(void * jarg1, float jarg2) {
  void * jresult ;
  CVec4 *arg1 = (CVec4 *) 0 ;
  FLOAT arg2 ;
  CVec4 *result = 0 ;
  
  arg1 = (CVec4 *)jarg1; 
  arg2 = (FLOAT)jarg2; 
  result = (CVec4 *) &(arg1)->operator /=(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec4_add__SWIG_1(void * jarg1) {
  void * jresult ;
  CVec4 *arg1 = (CVec4 *) 0 ;
  CVec4 result;
  
  arg1 = (CVec4 *)jarg1; 
  result = ((CVec4 const *)arg1)->operator +();
  jresult = new CVec4((const CVec4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec4_sub__SWIG_1(void * jarg1) {
  void * jresult ;
  CVec4 *arg1 = (CVec4 *) 0 ;
  CVec4 result;
  
  arg1 = (CVec4 *)jarg1; 
  result = ((CVec4 const *)arg1)->operator -();
  jresult = new CVec4((const CVec4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_mul_float__SWIG_1(float jarg1, void * jarg2) {
  void * jresult ;
  FLOAT arg1 ;
  CVec4 *arg2 = 0 ;
  CVec4 result;
  
  arg1 = (FLOAT)jarg1; 
  arg2 = (CVec4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec4 const & type is null", 0);
    return 0;
  } 
  result = operator *(arg1,(CVec4 const &)*arg2);
  jresult = new CVec4((const CVec4 &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CVec4_equal(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  CVec4 *arg1 = (CVec4 *) 0 ;
  CVec4 *arg2 = 0 ;
  bool result;
  
  arg1 = (CVec4 *)jarg1; 
  arg2 = (CVec4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec4 const & type is null", 0);
    return 0;
  } 
  result = (bool)((CVec4 const *)arg1)->operator ==((CVec4 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CVec4_not_equal(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  CVec4 *arg1 = (CVec4 *) 0 ;
  CVec4 *arg2 = 0 ;
  bool result;
  
  arg1 = (CVec4 *)jarg1; 
  arg2 = (CVec4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec4 const & type is null", 0);
    return 0;
  } 
  result = (bool)((CVec4 const *)arg1)->operator !=((CVec4 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec4_mul__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  CVec4 *arg1 = (CVec4 *) 0 ;
  CMatrix44 *arg2 = 0 ;
  CVec4 result;
  
  arg1 = (CVec4 *)jarg1; 
  arg2 = (CMatrix44 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CMatrix44 const & type is null", 0);
    return 0;
  } 
  result = ((CVec4 const *)arg1)->operator *((CMatrix44 const &)*arg2);
  jresult = new CVec4((const CVec4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec4_mul__SWIG_3(void * jarg1, void * jarg2) {
  void * jresult ;
  CVec4 *arg1 = (CVec4 *) 0 ;
  CQuaternion *arg2 = 0 ;
  CVec4 result;
  
  arg1 = (CVec4 *)jarg1; 
  arg2 = (CQuaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CQuaternion const & type is null", 0);
    return 0;
  } 
  result = ((CVec4 const *)arg1)->operator *((CQuaternion const &)*arg2);
  jresult = new CVec4((const CVec4 &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CVec4_NotNULL(void * jarg1) {
  unsigned int jresult ;
  CVec4 *arg1 = (CVec4 *) 0 ;
  bool result;
  
  arg1 = (CVec4 *)jarg1; 
  result = (bool)((CVec4 const *)arg1)->NotNULL();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CVec4_Dot(void * jarg1, void * jarg2) {
  float jresult ;
  CVec4 *arg1 = (CVec4 *) 0 ;
  CVec4 *arg2 = 0 ;
  FLOAT result;
  
  arg1 = (CVec4 *)jarg1; 
  arg2 = (CVec4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec4 const & type is null", 0);
    return 0;
  } 
  result = (FLOAT)((CVec4 const *)arg1)->Dot((CVec4 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CVec4_Set(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  CVec4 *arg1 = (CVec4 *) 0 ;
  FLOAT arg2 ;
  FLOAT arg3 ;
  FLOAT arg4 ;
  FLOAT arg5 ;
  
  arg1 = (CVec4 *)jarg1; 
  arg2 = (FLOAT)jarg2; 
  arg3 = (FLOAT)jarg3; 
  arg4 = (FLOAT)jarg4; 
  arg5 = (FLOAT)jarg5; 
  (arg1)->Set(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec4_Cross(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  CVec4 *arg1 = (CVec4 *) 0 ;
  CVec4 *arg2 = 0 ;
  CVec4 *arg3 = 0 ;
  CVec4 *arg4 = 0 ;
  CVec4 result;
  
  arg1 = (CVec4 *)jarg1; 
  arg2 = (CVec4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec4 const & type is null", 0);
    return 0;
  } 
  arg3 = (CVec4 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec4 const & type is null", 0);
    return 0;
  } 
  arg4 = (CVec4 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec4 const & type is null", 0);
    return 0;
  } 
  result = (arg1)->Cross((CVec4 const &)*arg2,(CVec4 const &)*arg3,(CVec4 const &)*arg4);
  jresult = new CVec4((const CVec4 &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CVec4_Length(void * jarg1) {
  float jresult ;
  CVec4 *arg1 = (CVec4 *) 0 ;
  FLOAT result;
  
  arg1 = (CVec4 *)jarg1; 
  result = (FLOAT)((CVec4 const *)arg1)->Length();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CVec4_LengthSq(void * jarg1) {
  float jresult ;
  CVec4 *arg1 = (CVec4 *) 0 ;
  FLOAT result;
  
  arg1 = (CVec4 *)jarg1; 
  result = (FLOAT)((CVec4 const *)arg1)->LengthSq();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec4_Lerp(void * jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  CVec4 *arg1 = (CVec4 *) 0 ;
  CVec4 *arg2 = 0 ;
  FLOAT arg3 ;
  CVec4 result;
  
  arg1 = (CVec4 *)jarg1; 
  arg2 = (CVec4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec4 const & type is null", 0);
    return 0;
  } 
  arg3 = (FLOAT)jarg3; 
  result = (arg1)->Lerp((CVec4 const &)*arg2,arg3);
  jresult = new CVec4((const CVec4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec4_NormalizeFast(void * jarg1) {
  void * jresult ;
  CVec4 *arg1 = (CVec4 *) 0 ;
  CVec4 *result = 0 ;
  
  arg1 = (CVec4 *)jarg1; 
  result = (CVec4 *) &(arg1)->NormalizeFast();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec4_Normalize(void * jarg1) {
  void * jresult ;
  CVec4 *arg1 = (CVec4 *) 0 ;
  CVec4 *result = 0 ;
  
  arg1 = (CVec4 *)jarg1; 
  result = (CVec4 *) &(arg1)->Normalize();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec4_GetNormalized(void * jarg1) {
  void * jresult ;
  CVec4 *arg1 = (CVec4 *) 0 ;
  CVec4 result;
  
  arg1 = (CVec4 *)jarg1; 
  result = ((CVec4 const *)arg1)->GetNormalized();
  jresult = new CVec4((const CVec4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec4_GetNormalizedFast(void * jarg1) {
  void * jresult ;
  CVec4 *arg1 = (CVec4 *) 0 ;
  CVec4 result;
  
  arg1 = (CVec4 *)jarg1; 
  result = ((CVec4 const *)arg1)->GetNormalizedFast();
  jresult = new CVec4((const CVec4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec4_TransformPoint(void * jarg1, void * jarg2) {
  void * jresult ;
  CVec4 *arg1 = (CVec4 *) 0 ;
  CMatrix44 *arg2 = 0 ;
  CVec4 result;
  
  arg1 = (CVec4 *)jarg1; 
  arg2 = (CMatrix44 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CMatrix44 const & type is null", 0);
    return 0;
  } 
  result = ((CVec4 const *)arg1)->TransformPoint((CMatrix44 const &)*arg2);
  jresult = new CVec4((const CVec4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec4_assign__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  CVec4 *arg1 = (CVec4 *) 0 ;
  CVec2 *arg2 = 0 ;
  CVec4 *result = 0 ;
  
  arg1 = (CVec4 *)jarg1; 
  arg2 = (CVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec2 const & type is null", 0);
    return 0;
  } 
  result = (CVec4 *) &(arg1)->operator =((CVec2 const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec4_assign__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  CVec4 *arg1 = (CVec4 *) 0 ;
  CVec3 *arg2 = 0 ;
  CVec4 *result = 0 ;
  
  arg1 = (CVec4 *)jarg1; 
  arg2 = (CVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec3 const & type is null", 0);
    return 0;
  } 
  result = (CVec4 *) &(arg1)->operator =((CVec3 const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CVec4_Validate(void * jarg1) {
  CVec4 *arg1 = (CVec4 *) 0 ;
  
  arg1 = (CVec4 *)jarg1; 
  (arg1)->Validate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CVec4(void * jarg1) {
  CVec4 *arg1 = (CVec4 *) 0 ;
  
  arg1 = (CVec4 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec2Lerp(void * jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  CVec2 *arg1 = 0 ;
  CVec2 *arg2 = 0 ;
  float arg3 ;
  CVec2 result;
  
  arg1 = (CVec2 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec2 const & type is null", 0);
    return 0;
  } 
  arg2 = (CVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec2 const & type is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  result = CVec2Lerp((CVec2 const &)*arg1,(CVec2 const &)*arg2,arg3);
  jresult = new CVec2((const CVec2 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec2Normalize(void * jarg1) {
  void * jresult ;
  CVec2 *arg1 = 0 ;
  CVec2 result;
  
  arg1 = (CVec2 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec2 const & type is null", 0);
    return 0;
  } 
  result = CVec2Normalize((CVec2 const &)*arg1);
  jresult = new CVec2((const CVec2 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec2NormalizeFast(void * jarg1) {
  void * jresult ;
  CVec2 *arg1 = 0 ;
  CVec2 result;
  
  arg1 = (CVec2 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec2 const & type is null", 0);
    return 0;
  } 
  result = CVec2NormalizeFast((CVec2 const &)*arg1);
  jresult = new CVec2((const CVec2 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec3Cross(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  CVec3 *arg1 = (CVec3 *) 0 ;
  CVec3 *arg2 = (CVec3 *) 0 ;
  CVec3 *arg3 = (CVec3 *) 0 ;
  CVec3 *result = 0 ;
  
  arg1 = (CVec3 *)jarg1; 
  arg2 = (CVec3 *)jarg2; 
  arg3 = (CVec3 *)jarg3; 
  result = (CVec3 *)CVec3Cross(arg1,(CVec3 const *)arg2,(CVec3 const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CVec3Dot(void * jarg1, void * jarg2) {
  float jresult ;
  CVec3 *arg1 = (CVec3 *) 0 ;
  CVec3 *arg2 = (CVec3 *) 0 ;
  FLOAT result;
  
  arg1 = (CVec3 *)jarg1; 
  arg2 = (CVec3 *)jarg2; 
  result = (FLOAT)CVec3Dot((CVec3 const *)arg1,(CVec3 const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec3Lerp(void * jarg1, void * jarg2, void * jarg3, float jarg4) {
  void * jresult ;
  CVec3 *arg1 = (CVec3 *) 0 ;
  CVec3 *arg2 = (CVec3 *) 0 ;
  CVec3 *arg3 = (CVec3 *) 0 ;
  float arg4 ;
  CVec3 *result = 0 ;
  
  arg1 = (CVec3 *)jarg1; 
  arg2 = (CVec3 *)jarg2; 
  arg3 = (CVec3 *)jarg3; 
  arg4 = (float)jarg4; 
  result = (CVec3 *)CVec3Lerp(arg1,(CVec3 const *)arg2,(CVec3 const *)arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_less(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  CVec3 *arg1 = 0 ;
  CVec3 *arg2 = 0 ;
  bool result;
  
  arg1 = (CVec3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec3 const & type is null", 0);
    return 0;
  } 
  arg2 = (CVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec3 const & type is null", 0);
    return 0;
  } 
  result = (bool)operator <((CVec3 const &)*arg1,(CVec3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_great(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  CVec3 *arg1 = 0 ;
  CVec3 *arg2 = 0 ;
  bool result;
  
  arg1 = (CVec3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec3 const & type is null", 0);
    return 0;
  } 
  arg2 = (CVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec3 const & type is null", 0);
    return 0;
  } 
  result = (bool)operator >((CVec3 const &)*arg1,(CVec3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec3TransformCoord(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  CVec3 *arg1 = (CVec3 *) 0 ;
  CVec3 *arg2 = (CVec3 *) 0 ;
  CMatrix44 *arg3 = (CMatrix44 *) 0 ;
  CVec3 result;
  
  arg1 = (CVec3 *)jarg1; 
  arg2 = (CVec3 *)jarg2; 
  arg3 = (CMatrix44 *)jarg3; 
  result = CVec3TransformCoord(arg1,(CVec3 const *)arg2,(CMatrix44 const *)arg3);
  jresult = new CVec3((const CVec3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec3Transform(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  CVec4 *arg1 = (CVec4 *) 0 ;
  CVec3 *arg2 = (CVec3 *) 0 ;
  CMatrix44 *arg3 = (CMatrix44 *) 0 ;
  CVec4 result;
  
  arg1 = (CVec4 *)jarg1; 
  arg2 = (CVec3 *)jarg2; 
  arg3 = (CMatrix44 *)jarg3; 
  result = CVec3Transform(arg1,(CVec3 const *)arg2,(CMatrix44 const *)arg3);
  jresult = new CVec4((const CVec4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec3TransformNormal(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  CVec3 *arg1 = (CVec3 *) 0 ;
  CVec3 *arg2 = (CVec3 *) 0 ;
  CMatrix44 *arg3 = (CMatrix44 *) 0 ;
  CVec3 result;
  
  arg1 = (CVec3 *)jarg1; 
  arg2 = (CVec3 *)jarg2; 
  arg3 = (CMatrix44 *)jarg3; 
  result = CVec3TransformNormal(arg1,(CVec3 const *)arg2,(CMatrix44 const *)arg3);
  jresult = new CVec3((const CVec3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec3Project(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  CVec3 *arg1 = 0 ;
  RenderViewport *arg2 = 0 ;
  CMatrix44 *arg3 = 0 ;
  CMatrix44 *arg4 = 0 ;
  CMatrix44 *arg5 = 0 ;
  CVec3 result;
  
  arg1 = (CVec3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec3 const & type is null", 0);
    return 0;
  } 
  arg2 = (RenderViewport *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RenderViewport const & type is null", 0);
    return 0;
  } 
  arg3 = (CMatrix44 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CMatrix44 const & type is null", 0);
    return 0;
  } 
  arg4 = (CMatrix44 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CMatrix44 const & type is null", 0);
    return 0;
  } 
  arg5 = (CMatrix44 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CMatrix44 const & type is null", 0);
    return 0;
  } 
  result = CVec3Project((CVec3 const &)*arg1,(RenderViewport const &)*arg2,(CMatrix44 const &)*arg3,(CMatrix44 const &)*arg4,(CMatrix44 const &)*arg5);
  jresult = new CVec3((const CVec3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec3Unproject(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  CVec3 *arg1 = 0 ;
  RenderViewport *arg2 = 0 ;
  CMatrix44 *arg3 = 0 ;
  CMatrix44 *arg4 = 0 ;
  CMatrix44 *arg5 = 0 ;
  CVec3 result;
  
  arg1 = (CVec3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec3 const & type is null", 0);
    return 0;
  } 
  arg2 = (RenderViewport *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RenderViewport const & type is null", 0);
    return 0;
  } 
  arg3 = (CMatrix44 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CMatrix44 const & type is null", 0);
    return 0;
  } 
  arg4 = (CMatrix44 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CMatrix44 const & type is null", 0);
    return 0;
  } 
  arg5 = (CMatrix44 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CMatrix44 const & type is null", 0);
    return 0;
  } 
  result = CVec3Unproject((CVec3 const &)*arg1,(RenderViewport const &)*arg2,(CMatrix44 const &)*arg3,(CMatrix44 const &)*arg4,(CMatrix44 const &)*arg5);
  jresult = new CVec3((const CVec3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FromQuakeAngleToDir(int jarg1) {
  void * jresult ;
  int arg1 ;
  CVec3 result;
  
  arg1 = (int)jarg1; 
  result = FromQuakeAngleToDir(arg1);
  jresult = new CVec3((const CVec3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FromQuakeAngleToEuler(int jarg1) {
  void * jresult ;
  int arg1 ;
  CVec3 result;
  
  arg1 = (int)jarg1; 
  result = FromQuakeAngleToEuler(arg1);
  jresult = new CVec3((const CVec3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_quat_vec_mult(void * jarg1, void * jarg2) {
  void * jresult ;
  CQuaternion *arg1 = 0 ;
  CVec3 *arg2 = 0 ;
  CVec3 result;
  
  arg1 = (CQuaternion *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CQuaternion const & type is null", 0);
    return 0;
  } 
  arg2 = (CVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec3 const & type is null", 0);
    return 0;
  } 
  result = operator *((CQuaternion const &)*arg1,(CVec3 const &)*arg2);
  jresult = new CVec3((const CVec3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_vec_quat_mult(void * jarg1, void * jarg2) {
  void * jresult ;
  CVec3 *arg1 = 0 ;
  CQuaternion *arg2 = 0 ;
  CVec3 result;
  
  arg1 = (CVec3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec3 const & type is null", 0);
    return 0;
  } 
  arg2 = (CQuaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CQuaternion const & type is null", 0);
    return 0;
  } 
  result = operator *((CVec3 const &)*arg1,(CQuaternion const &)*arg2);
  jresult = new CVec3((const CVec3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec4TransformPoint(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  CVec4 *arg1 = (CVec4 *) 0 ;
  CVec4 *arg2 = (CVec4 *) 0 ;
  CMatrix44 *arg3 = (CMatrix44 *) 0 ;
  CVec4 result;
  
  arg1 = (CVec4 *)jarg1; 
  arg2 = (CVec4 *)jarg2; 
  arg3 = (CMatrix44 *)jarg3; 
  result = CVec4TransformPoint(arg1,(CVec4 const *)arg2,(CMatrix44 const *)arg3);
  jresult = new CVec4((const CVec4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CVec4Lerp(void * jarg1, void * jarg2, void * jarg3, float jarg4) {
  void * jresult ;
  CVec4 *arg1 = (CVec4 *) 0 ;
  CVec4 *arg2 = (CVec4 *) 0 ;
  CVec4 *arg3 = (CVec4 *) 0 ;
  float arg4 ;
  CVec4 *result = 0 ;
  
  arg1 = (CVec4 *)jarg1; 
  arg2 = (CVec4 *)jarg2; 
  arg3 = (CVec4 *)jarg3; 
  arg4 = (float)jarg4; 
  result = (CVec4 *)CVec4Lerp(arg1,(CVec4 const *)arg2,(CVec4 const *)arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CMatrix44__11_set(void * jarg1, float jarg2) {
  CMatrix44 *arg1 = (CMatrix44 *) 0 ;
  FLOAT arg2 ;
  
  arg1 = (CMatrix44 *)jarg1; 
  arg2 = (FLOAT)jarg2; 
  if (arg1) (arg1)->_11 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CMatrix44__11_get(void * jarg1) {
  float jresult ;
  CMatrix44 *arg1 = (CMatrix44 *) 0 ;
  FLOAT result;
  
  arg1 = (CMatrix44 *)jarg1; 
  result = (FLOAT) ((arg1)->_11);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CMatrix44__12_set(void * jarg1, float jarg2) {
  CMatrix44 *arg1 = (CMatrix44 *) 0 ;
  FLOAT arg2 ;
  
  arg1 = (CMatrix44 *)jarg1; 
  arg2 = (FLOAT)jarg2; 
  if (arg1) (arg1)->_12 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CMatrix44__12_get(void * jarg1) {
  float jresult ;
  CMatrix44 *arg1 = (CMatrix44 *) 0 ;
  FLOAT result;
  
  arg1 = (CMatrix44 *)jarg1; 
  result = (FLOAT) ((arg1)->_12);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CMatrix44__13_set(void * jarg1, float jarg2) {
  CMatrix44 *arg1 = (CMatrix44 *) 0 ;
  FLOAT arg2 ;
  
  arg1 = (CMatrix44 *)jarg1; 
  arg2 = (FLOAT)jarg2; 
  if (arg1) (arg1)->_13 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CMatrix44__13_get(void * jarg1) {
  float jresult ;
  CMatrix44 *arg1 = (CMatrix44 *) 0 ;
  FLOAT result;
  
  arg1 = (CMatrix44 *)jarg1; 
  result = (FLOAT) ((arg1)->_13);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CMatrix44__14_set(void * jarg1, float jarg2) {
  CMatrix44 *arg1 = (CMatrix44 *) 0 ;
  FLOAT arg2 ;
  
  arg1 = (CMatrix44 *)jarg1; 
  arg2 = (FLOAT)jarg2; 
  if (arg1) (arg1)->_14 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CMatrix44__14_get(void * jarg1) {
  float jresult ;
  CMatrix44 *arg1 = (CMatrix44 *) 0 ;
  FLOAT result;
  
  arg1 = (CMatrix44 *)jarg1; 
  result = (FLOAT) ((arg1)->_14);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CMatrix44__21_set(void * jarg1, float jarg2) {
  CMatrix44 *arg1 = (CMatrix44 *) 0 ;
  FLOAT arg2 ;
  
  arg1 = (CMatrix44 *)jarg1; 
  arg2 = (FLOAT)jarg2; 
  if (arg1) (arg1)->_21 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CMatrix44__21_get(void * jarg1) {
  float jresult ;
  CMatrix44 *arg1 = (CMatrix44 *) 0 ;
  FLOAT result;
  
  arg1 = (CMatrix44 *)jarg1; 
  result = (FLOAT) ((arg1)->_21);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CMatrix44__22_set(void * jarg1, float jarg2) {
  CMatrix44 *arg1 = (CMatrix44 *) 0 ;
  FLOAT arg2 ;
  
  arg1 = (CMatrix44 *)jarg1; 
  arg2 = (FLOAT)jarg2; 
  if (arg1) (arg1)->_22 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CMatrix44__22_get(void * jarg1) {
  float jresult ;
  CMatrix44 *arg1 = (CMatrix44 *) 0 ;
  FLOAT result;
  
  arg1 = (CMatrix44 *)jarg1; 
  result = (FLOAT) ((arg1)->_22);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CMatrix44__23_set(void * jarg1, float jarg2) {
  CMatrix44 *arg1 = (CMatrix44 *) 0 ;
  FLOAT arg2 ;
  
  arg1 = (CMatrix44 *)jarg1; 
  arg2 = (FLOAT)jarg2; 
  if (arg1) (arg1)->_23 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CMatrix44__23_get(void * jarg1) {
  float jresult ;
  CMatrix44 *arg1 = (CMatrix44 *) 0 ;
  FLOAT result;
  
  arg1 = (CMatrix44 *)jarg1; 
  result = (FLOAT) ((arg1)->_23);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CMatrix44__24_set(void * jarg1, float jarg2) {
  CMatrix44 *arg1 = (CMatrix44 *) 0 ;
  FLOAT arg2 ;
  
  arg1 = (CMatrix44 *)jarg1; 
  arg2 = (FLOAT)jarg2; 
  if (arg1) (arg1)->_24 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CMatrix44__24_get(void * jarg1) {
  float jresult ;
  CMatrix44 *arg1 = (CMatrix44 *) 0 ;
  FLOAT result;
  
  arg1 = (CMatrix44 *)jarg1; 
  result = (FLOAT) ((arg1)->_24);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CMatrix44__31_set(void * jarg1, float jarg2) {
  CMatrix44 *arg1 = (CMatrix44 *) 0 ;
  FLOAT arg2 ;
  
  arg1 = (CMatrix44 *)jarg1; 
  arg2 = (FLOAT)jarg2; 
  if (arg1) (arg1)->_31 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CMatrix44__31_get(void * jarg1) {
  float jresult ;
  CMatrix44 *arg1 = (CMatrix44 *) 0 ;
  FLOAT result;
  
  arg1 = (CMatrix44 *)jarg1; 
  result = (FLOAT) ((arg1)->_31);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CMatrix44__32_set(void * jarg1, float jarg2) {
  CMatrix44 *arg1 = (CMatrix44 *) 0 ;
  FLOAT arg2 ;
  
  arg1 = (CMatrix44 *)jarg1; 
  arg2 = (FLOAT)jarg2; 
  if (arg1) (arg1)->_32 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CMatrix44__32_get(void * jarg1) {
  float jresult ;
  CMatrix44 *arg1 = (CMatrix44 *) 0 ;
  FLOAT result;
  
  arg1 = (CMatrix44 *)jarg1; 
  result = (FLOAT) ((arg1)->_32);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CMatrix44__33_set(void * jarg1, float jarg2) {
  CMatrix44 *arg1 = (CMatrix44 *) 0 ;
  FLOAT arg2 ;
  
  arg1 = (CMatrix44 *)jarg1; 
  arg2 = (FLOAT)jarg2; 
  if (arg1) (arg1)->_33 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CMatrix44__33_get(void * jarg1) {
  float jresult ;
  CMatrix44 *arg1 = (CMatrix44 *) 0 ;
  FLOAT result;
  
  arg1 = (CMatrix44 *)jarg1; 
  result = (FLOAT) ((arg1)->_33);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CMatrix44__34_set(void * jarg1, float jarg2) {
  CMatrix44 *arg1 = (CMatrix44 *) 0 ;
  FLOAT arg2 ;
  
  arg1 = (CMatrix44 *)jarg1; 
  arg2 = (FLOAT)jarg2; 
  if (arg1) (arg1)->_34 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CMatrix44__34_get(void * jarg1) {
  float jresult ;
  CMatrix44 *arg1 = (CMatrix44 *) 0 ;
  FLOAT result;
  
  arg1 = (CMatrix44 *)jarg1; 
  result = (FLOAT) ((arg1)->_34);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CMatrix44__41_set(void * jarg1, float jarg2) {
  CMatrix44 *arg1 = (CMatrix44 *) 0 ;
  FLOAT arg2 ;
  
  arg1 = (CMatrix44 *)jarg1; 
  arg2 = (FLOAT)jarg2; 
  if (arg1) (arg1)->_41 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CMatrix44__41_get(void * jarg1) {
  float jresult ;
  CMatrix44 *arg1 = (CMatrix44 *) 0 ;
  FLOAT result;
  
  arg1 = (CMatrix44 *)jarg1; 
  result = (FLOAT) ((arg1)->_41);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CMatrix44__42_set(void * jarg1, float jarg2) {
  CMatrix44 *arg1 = (CMatrix44 *) 0 ;
  FLOAT arg2 ;
  
  arg1 = (CMatrix44 *)jarg1; 
  arg2 = (FLOAT)jarg2; 
  if (arg1) (arg1)->_42 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CMatrix44__42_get(void * jarg1) {
  float jresult ;
  CMatrix44 *arg1 = (CMatrix44 *) 0 ;
  FLOAT result;
  
  arg1 = (CMatrix44 *)jarg1; 
  result = (FLOAT) ((arg1)->_42);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CMatrix44__43_set(void * jarg1, float jarg2) {
  CMatrix44 *arg1 = (CMatrix44 *) 0 ;
  FLOAT arg2 ;
  
  arg1 = (CMatrix44 *)jarg1; 
  arg2 = (FLOAT)jarg2; 
  if (arg1) (arg1)->_43 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CMatrix44__43_get(void * jarg1) {
  float jresult ;
  CMatrix44 *arg1 = (CMatrix44 *) 0 ;
  FLOAT result;
  
  arg1 = (CMatrix44 *)jarg1; 
  result = (FLOAT) ((arg1)->_43);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CMatrix44__44_set(void * jarg1, float jarg2) {
  CMatrix44 *arg1 = (CMatrix44 *) 0 ;
  FLOAT arg2 ;
  
  arg1 = (CMatrix44 *)jarg1; 
  arg2 = (FLOAT)jarg2; 
  if (arg1) (arg1)->_44 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CMatrix44__44_get(void * jarg1) {
  float jresult ;
  CMatrix44 *arg1 = (CMatrix44 *) 0 ;
  FLOAT result;
  
  arg1 = (CMatrix44 *)jarg1; 
  result = (FLOAT) ((arg1)->_44);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CMatrix44_m_set(void * jarg1, void * jarg2) {
  CMatrix44 *arg1 = (CMatrix44 *) 0 ;
  FLOAT (*arg2)[4] ;
  
  arg1 = (CMatrix44 *)jarg1; 
  arg2 = (FLOAT (*)[4])jarg2; 
  {
    FLOAT (*inp)[4] = (FLOAT (*)[4])(arg2);
    FLOAT (*dest)[4] = (FLOAT (*)[4])(arg1->m);
    size_t ii = 0;
    for (; ii < 4; ++ii) {
      FLOAT *ip = inp[ii];
      FLOAT *dp = dest[ii];
      size_t jj = 0;
      for (; jj < 4; ++jj) dp[jj] = ip[jj];
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CMatrix44_m_get(void * jarg1) {
  void * jresult ;
  CMatrix44 *arg1 = (CMatrix44 *) 0 ;
  FLOAT (*result)[4] = 0 ;
  
  arg1 = (CMatrix44 *)jarg1; 
  result = (FLOAT (*)[4])(FLOAT (*)[4]) ((arg1)->m);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CMatrix44__SWIG_0() {
  void * jresult ;
  CMatrix44 *result = 0 ;
  
  result = (CMatrix44 *)new CMatrix44();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CMatrix44__SWIG_1(int jarg1) {
  void * jresult ;
  int arg1 ;
  CMatrix44 *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (CMatrix44 *)new CMatrix44(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CMatrix44__SWIG_2(void * jarg1) {
  void * jresult ;
  CFLOAT *arg1 = (CFLOAT *) 0 ;
  CMatrix44 *result = 0 ;
  
  arg1 = (CFLOAT *)jarg1; 
  result = (CMatrix44 *)new CMatrix44(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CMatrix44__SWIG_3(float jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7, float jarg8, float jarg9, float jarg10, float jarg11, float jarg12, float jarg13, float jarg14, float jarg15, float jarg16) {
  void * jresult ;
  CFLOAT arg1 ;
  CFLOAT arg2 ;
  CFLOAT arg3 ;
  CFLOAT arg4 ;
  CFLOAT arg5 ;
  CFLOAT arg6 ;
  CFLOAT arg7 ;
  CFLOAT arg8 ;
  CFLOAT arg9 ;
  CFLOAT arg10 ;
  CFLOAT arg11 ;
  CFLOAT arg12 ;
  CFLOAT arg13 ;
  CFLOAT arg14 ;
  CFLOAT arg15 ;
  CFLOAT arg16 ;
  CMatrix44 *result = 0 ;
  
  arg1 = (CFLOAT)jarg1; 
  arg2 = (CFLOAT)jarg2; 
  arg3 = (CFLOAT)jarg3; 
  arg4 = (CFLOAT)jarg4; 
  arg5 = (CFLOAT)jarg5; 
  arg6 = (CFLOAT)jarg6; 
  arg7 = (CFLOAT)jarg7; 
  arg8 = (CFLOAT)jarg8; 
  arg9 = (CFLOAT)jarg9; 
  arg10 = (CFLOAT)jarg10; 
  arg11 = (CFLOAT)jarg11; 
  arg12 = (CFLOAT)jarg12; 
  arg13 = (CFLOAT)jarg13; 
  arg14 = (CFLOAT)jarg14; 
  arg15 = (CFLOAT)jarg15; 
  arg16 = (CFLOAT)jarg16; 
  result = (CMatrix44 *)new CMatrix44(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CMatrix44__SWIG_4(void * jarg1) {
  void * jresult ;
  CQuaternion *arg1 = 0 ;
  CMatrix44 *result = 0 ;
  
  arg1 = (CQuaternion *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CQuaternion const & type is null", 0);
    return 0;
  } 
  result = (CMatrix44 *)new CMatrix44((CQuaternion const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CMatrix44_not_equal(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  CMatrix44 *arg1 = (CMatrix44 *) 0 ;
  CMatrix44 *arg2 = 0 ;
  bool result;
  
  arg1 = (CMatrix44 *)jarg1; 
  arg2 = (CMatrix44 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CMatrix44 const & type is null", 0);
    return 0;
  } 
  result = (bool)((CMatrix44 const *)arg1)->operator !=((CMatrix44 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CMatrix44_assign(void * jarg1, void * jarg2) {
  void * jresult ;
  CMatrix44 *arg1 = (CMatrix44 *) 0 ;
  CMatrix44 *arg2 = 0 ;
  CMatrix44 *result = 0 ;
  
  arg1 = (CMatrix44 *)jarg1; 
  arg2 = (CMatrix44 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CMatrix44 const & type is null", 0);
    return 0;
  } 
  result = (CMatrix44 *) &(arg1)->operator =((CMatrix44 const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CMatrix44_mul__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  CMatrix44 *arg1 = (CMatrix44 *) 0 ;
  CMatrix44 *arg2 = 0 ;
  CMatrix44 result;
  
  arg1 = (CMatrix44 *)jarg1; 
  arg2 = (CMatrix44 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CMatrix44 const & type is null", 0);
    return 0;
  } 
  result = ((CMatrix44 const *)arg1)->operator *((CMatrix44 const &)*arg2);
  jresult = new CMatrix44((const CMatrix44 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CMatrix44_mul__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  CMatrix44 *arg1 = (CMatrix44 *) 0 ;
  CVec3 *arg2 = 0 ;
  CVec3 result;
  
  arg1 = (CMatrix44 *)jarg1; 
  arg2 = (CVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec3 const & type is null", 0);
    return 0;
  } 
  result = ((CMatrix44 const *)arg1)->operator *((CVec3 const &)*arg2);
  jresult = new CVec3((const CVec3 &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CMatrix44_get_val__SWIG_0(void * jarg1, unsigned long jarg2) {
  float jresult ;
  CMatrix44 *arg1 = (CMatrix44 *) 0 ;
  size_t arg2 ;
  FLOAT *result = 0 ;
  
  arg1 = (CMatrix44 *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (FLOAT *) &((CMatrix44 const *)arg1)->operator [](arg2);
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CMatrix44_GetElement(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  CMatrix44 *arg1 = (CMatrix44 *) 0 ;
  size_t arg2 ;
  FLOAT *result = 0 ;
  
  arg1 = (CMatrix44 *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (FLOAT *) &(arg1)->GetElement(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CMatrix44_get_val_row_col__SWIG_0(void * jarg1, unsigned long jarg2, unsigned long jarg3) {
  float jresult ;
  CMatrix44 *arg1 = (CMatrix44 *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  FLOAT *result = 0 ;
  
  arg1 = (CMatrix44 *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (FLOAT *) &((CMatrix44 const *)arg1)->operator ()(arg2,arg3);
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CMatrix44_Vec4(void * jarg1) {
  void * jresult ;
  CMatrix44 *arg1 = (CMatrix44 *) 0 ;
  CVec4 *result = 0 ;
  
  arg1 = (CMatrix44 *)jarg1; 
  result = (CVec4 *)((CMatrix44 const *)arg1)->Vec4();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CMatrix44_Row(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  CMatrix44 *arg1 = (CMatrix44 *) 0 ;
  size_t arg2 ;
  CVec4 *result = 0 ;
  
  arg1 = (CMatrix44 *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (CVec4 *) &((CMatrix44 const *)arg1)->Row(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CMatrix44_Row3(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  CMatrix44 *arg1 = (CMatrix44 *) 0 ;
  size_t arg2 ;
  CVec3 *result = 0 ;
  
  arg1 = (CMatrix44 *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (CVec3 *) &((CMatrix44 const *)arg1)->Row3(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CMatrix44_Col3(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  CMatrix44 *arg1 = (CMatrix44 *) 0 ;
  size_t arg2 ;
  CVec3 result;
  
  arg1 = (CMatrix44 *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = ((CMatrix44 const *)arg1)->Col3(arg2);
  jresult = new CVec3((const CVec3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CMatrix44_FromDirection(void * jarg1, void * jarg2) {
  CMatrix44 *arg1 = (CMatrix44 *) 0 ;
  CVec3 *arg2 = 0 ;
  
  arg1 = (CMatrix44 *)jarg1; 
  arg2 = (CVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec3 const & type is null", 0);
    return ;
  } 
  (arg1)->FromDirection((CVec3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CMatrix44_FromPosRot__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  CMatrix44 *arg1 = (CMatrix44 *) 0 ;
  CVec3 *arg2 = 0 ;
  CQuaternion *arg3 = 0 ;
  
  arg1 = (CMatrix44 *)jarg1; 
  arg2 = (CVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec3 const & type is null", 0);
    return ;
  } 
  arg3 = (CQuaternion *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CQuaternion const & type is null", 0);
    return ;
  } 
  (arg1)->FromPosRot((CVec3 const &)*arg2,(CQuaternion const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CMatrix44_FromPosRotScale__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  CMatrix44 *arg1 = (CMatrix44 *) 0 ;
  CVec3 *arg2 = 0 ;
  CQuaternion *arg3 = 0 ;
  CVec3 *arg4 = 0 ;
  
  arg1 = (CMatrix44 *)jarg1; 
  arg2 = (CVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec3 const & type is null", 0);
    return ;
  } 
  arg3 = (CQuaternion *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CQuaternion const & type is null", 0);
    return ;
  } 
  arg4 = (CVec3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec3 const & type is null", 0);
    return ;
  } 
  (arg1)->FromPosRotScale((CVec3 const &)*arg2,(CQuaternion const &)*arg3,(CVec3 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CMatrix44_FromYPR(void * jarg1, float jarg2, float jarg3, float jarg4) {
  CMatrix44 *arg1 = (CMatrix44 *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (CMatrix44 *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->FromYPR(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CMatrix44_FromPosRot__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  CMatrix44 *arg1 = (CMatrix44 *) 0 ;
  CVec3 *arg2 = 0 ;
  CMatrix44 *arg3 = 0 ;
  
  arg1 = (CMatrix44 *)jarg1; 
  arg2 = (CVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec3 const & type is null", 0);
    return ;
  } 
  arg3 = (CMatrix44 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CMatrix44 const & type is null", 0);
    return ;
  } 
  (arg1)->FromPosRot((CVec3 const &)*arg2,(CMatrix44 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CMatrix44_FromPosRotScale__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  CMatrix44 *arg1 = (CMatrix44 *) 0 ;
  CVec3 *arg2 = 0 ;
  CMatrix44 *arg3 = 0 ;
  CVec3 *arg4 = 0 ;
  
  arg1 = (CMatrix44 *)jarg1; 
  arg2 = (CVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec3 const & type is null", 0);
    return ;
  } 
  arg3 = (CMatrix44 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CMatrix44 const & type is null", 0);
    return ;
  } 
  arg4 = (CVec3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec3 const & type is null", 0);
    return ;
  } 
  (arg1)->FromPosRotScale((CVec3 const &)*arg2,(CMatrix44 const &)*arg3,(CVec3 const &)*arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CMatrix44_GetInvert(void * jarg1) {
  void * jresult ;
  CMatrix44 *arg1 = (CMatrix44 *) 0 ;
  CMatrix44 result;
  
  arg1 = (CMatrix44 *)jarg1; 
  result = ((CMatrix44 const *)arg1)->GetInvert();
  jresult = new CMatrix44((const CMatrix44 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CMatrix44_GetRotQuaternion(void * jarg1) {
  void * jresult ;
  CMatrix44 *arg1 = (CMatrix44 *) 0 ;
  CQuaternion result;
  
  arg1 = (CMatrix44 *)jarg1; 
  result = ((CMatrix44 const *)arg1)->GetRotQuaternion();
  jresult = new CQuaternion((const CQuaternion &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CMatrix44_GetScale(void * jarg1) {
  void * jresult ;
  CMatrix44 *arg1 = (CMatrix44 *) 0 ;
  CVec3 result;
  
  arg1 = (CMatrix44 *)jarg1; 
  result = ((CMatrix44 const *)arg1)->GetScale();
  jresult = new CVec3((const CVec3 &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CMatrix44_GetUniformScale__SWIG_0(void * jarg1, unsigned long jarg2) {
  float jresult ;
  CMatrix44 *arg1 = (CMatrix44 *) 0 ;
  size_t arg2 ;
  float result;
  
  arg1 = (CMatrix44 *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (float)((CMatrix44 const *)arg1)->GetUniformScale(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CMatrix44_GetUniformScale__SWIG_1(void * jarg1) {
  float jresult ;
  CMatrix44 *arg1 = (CMatrix44 *) 0 ;
  float result;
  
  arg1 = (CMatrix44 *)jarg1; 
  result = (float)((CMatrix44 const *)arg1)->GetUniformScale();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CMatrix44_Transpose(void * jarg1) {
  void * jresult ;
  CMatrix44 *arg1 = (CMatrix44 *) 0 ;
  CMatrix44 *result = 0 ;
  
  arg1 = (CMatrix44 *)jarg1; 
  result = (CMatrix44 *) &(arg1)->Transpose();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CMatrix44_GetTransposed(void * jarg1) {
  void * jresult ;
  CMatrix44 *arg1 = (CMatrix44 *) 0 ;
  CMatrix44 result;
  
  arg1 = (CMatrix44 *)jarg1; 
  result = ((CMatrix44 const *)arg1)->GetTransposed();
  jresult = new CMatrix44((const CMatrix44 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CMatrix44_SetTranslation(void * jarg1, void * jarg2) {
  CMatrix44 *arg1 = (CMatrix44 *) 0 ;
  CVec3 *arg2 = 0 ;
  
  arg1 = (CMatrix44 *)jarg1; 
  arg2 = (CVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec3 const & type is null", 0);
    return ;
  } 
  (arg1)->SetTranslation((CVec3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CMatrix44_GetTranslation(void * jarg1) {
  void * jresult ;
  CMatrix44 *arg1 = (CMatrix44 *) 0 ;
  CVec3 *result = 0 ;
  
  arg1 = (CMatrix44 *)jarg1; 
  result = (CVec3 *) &((CMatrix44 const *)arg1)->GetTranslation();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CMatrix44_GetRotation__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  CMatrix44 *arg1 = (CMatrix44 *) 0 ;
  bool arg2 ;
  CMatrix44 result;
  
  arg1 = (CMatrix44 *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = ((CMatrix44 const *)arg1)->GetRotation(arg2);
  jresult = new CMatrix44((const CMatrix44 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CMatrix44_GetRotation__SWIG_1(void * jarg1) {
  void * jresult ;
  CMatrix44 *arg1 = (CMatrix44 *) 0 ;
  CMatrix44 result;
  
  arg1 = (CMatrix44 *)jarg1; 
  result = ((CMatrix44 const *)arg1)->GetRotation();
  jresult = new CMatrix44((const CMatrix44 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CMatrix44_Identity(void * jarg1) {
  void * jresult ;
  CMatrix44 *arg1 = (CMatrix44 *) 0 ;
  CMatrix44 *result = 0 ;
  
  arg1 = (CMatrix44 *)jarg1; 
  result = (CMatrix44 *) &(arg1)->Identity();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CMatrix44_Slerp(void * jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  CMatrix44 *arg1 = 0 ;
  CMatrix44 *arg2 = 0 ;
  CFLOAT arg3 ;
  CMatrix44 result;
  
  arg1 = (CMatrix44 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CMatrix44 const & type is null", 0);
    return 0;
  } 
  arg2 = (CMatrix44 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CMatrix44 const & type is null", 0);
    return 0;
  } 
  arg3 = (CFLOAT)jarg3; 
  result = CMatrix44::Slerp((CMatrix44 const &)*arg1,(CMatrix44 const &)*arg2,arg3);
  jresult = new CMatrix44((const CMatrix44 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CMatrix44_FromQuaternion(void * jarg1) {
  void * jresult ;
  CQuaternion *arg1 = 0 ;
  CMatrix44 result;
  
  arg1 = (CQuaternion *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CQuaternion const & type is null", 0);
    return 0;
  } 
  result = CMatrix44::FromQuaternion((CQuaternion const &)*arg1);
  jresult = new CMatrix44((const CMatrix44 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CMatrix44_SetUniformScale(void * jarg1, float jarg2) {
  CMatrix44 *arg1 = (CMatrix44 *) 0 ;
  CFLOAT arg2 ;
  
  arg1 = (CMatrix44 *)jarg1; 
  arg2 = (CFLOAT)jarg2; 
  (arg1)->SetUniformScale(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CMatrix44_SetScale(void * jarg1, void * jarg2) {
  CMatrix44 *arg1 = (CMatrix44 *) 0 ;
  CVec3 *arg2 = 0 ;
  
  arg1 = (CMatrix44 *)jarg1; 
  arg2 = (CVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec3 const & type is null", 0);
    return ;
  } 
  (arg1)->SetScale((CVec3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CMatrix44_Validate(void * jarg1) {
  CMatrix44 *arg1 = (CMatrix44 *) 0 ;
  
  arg1 = (CMatrix44 *)jarg1; 
  ((CMatrix44 const *)arg1)->Validate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CMatrix44(void * jarg1) {
  CMatrix44 *arg1 = (CMatrix44 *) 0 ;
  
  arg1 = (CMatrix44 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixOrthoLH(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  CFLOAT arg1 ;
  CFLOAT arg2 ;
  CFLOAT arg3 ;
  CFLOAT arg4 ;
  CMatrix44 result;
  
  arg1 = (CFLOAT)jarg1; 
  arg2 = (CFLOAT)jarg2; 
  arg3 = (CFLOAT)jarg3; 
  arg4 = (CFLOAT)jarg4; 
  result = MatrixOrthoLH(arg1,arg2,arg3,arg4);
  jresult = new CMatrix44((const CMatrix44 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixOrthoOffCenterLH(float jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6) {
  void * jresult ;
  CFLOAT arg1 ;
  CFLOAT arg2 ;
  CFLOAT arg3 ;
  CFLOAT arg4 ;
  CFLOAT arg5 ;
  CFLOAT arg6 ;
  CMatrix44 result;
  
  arg1 = (CFLOAT)jarg1; 
  arg2 = (CFLOAT)jarg2; 
  arg3 = (CFLOAT)jarg3; 
  arg4 = (CFLOAT)jarg4; 
  arg5 = (CFLOAT)jarg5; 
  arg6 = (CFLOAT)jarg6; 
  result = MatrixOrthoOffCenterLH(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = new CMatrix44((const CMatrix44 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixLookAtLH(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  CVec3 *arg1 = 0 ;
  CVec3 *arg2 = 0 ;
  CVec3 *arg3 = 0 ;
  CMatrix44 result;
  
  arg1 = (CVec3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec3 const & type is null", 0);
    return 0;
  } 
  arg2 = (CVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec3 const & type is null", 0);
    return 0;
  } 
  arg3 = (CVec3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec3 const & type is null", 0);
    return 0;
  } 
  result = MatrixLookAtLH((CVec3 const &)*arg1,(CVec3 const &)*arg2,(CVec3 const &)*arg3);
  jresult = new CMatrix44((const CMatrix44 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixLookAtRH(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  CVec3 *arg1 = 0 ;
  CVec3 *arg2 = 0 ;
  CVec3 *arg3 = 0 ;
  CMatrix44 result;
  
  arg1 = (CVec3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec3 const & type is null", 0);
    return 0;
  } 
  arg2 = (CVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec3 const & type is null", 0);
    return 0;
  } 
  arg3 = (CVec3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec3 const & type is null", 0);
    return 0;
  } 
  result = MatrixLookAtRH((CVec3 const &)*arg1,(CVec3 const &)*arg2,(CVec3 const &)*arg3);
  jresult = new CMatrix44((const CMatrix44 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixRotationYawPitchRoll(float jarg1, float jarg2, float jarg3) {
  void * jresult ;
  CFLOAT arg1 ;
  CFLOAT arg2 ;
  CFLOAT arg3 ;
  CMatrix44 result;
  
  arg1 = (CFLOAT)jarg1; 
  arg2 = (CFLOAT)jarg2; 
  arg3 = (CFLOAT)jarg3; 
  result = MatrixRotationYawPitchRoll(arg1,arg2,arg3);
  jresult = new CMatrix44((const CMatrix44 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixPerspectiveFovLH(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  CFLOAT arg1 ;
  CFLOAT arg2 ;
  CFLOAT arg3 ;
  CFLOAT arg4 ;
  CMatrix44 result;
  
  arg1 = (CFLOAT)jarg1; 
  arg2 = (CFLOAT)jarg2; 
  arg3 = (CFLOAT)jarg3; 
  arg4 = (CFLOAT)jarg4; 
  result = MatrixPerspectiveFovLH(arg1,arg2,arg3,arg4);
  jresult = new CMatrix44((const CMatrix44 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixPerspectiveLH(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  CFLOAT arg1 ;
  CFLOAT arg2 ;
  CFLOAT arg3 ;
  CFLOAT arg4 ;
  CMatrix44 result;
  
  arg1 = (CFLOAT)jarg1; 
  arg2 = (CFLOAT)jarg2; 
  arg3 = (CFLOAT)jarg3; 
  arg4 = (CFLOAT)jarg4; 
  result = MatrixPerspectiveLH(arg1,arg2,arg3,arg4);
  jresult = new CMatrix44((const CMatrix44 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixReflect(void * jarg1) {
  void * jresult ;
  CPlane *arg1 = 0 ;
  CMatrix44 result;
  
  arg1 = (CPlane *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CPlane const & type is null", 0);
    return 0;
  } 
  result = MatrixReflect((CPlane const &)*arg1);
  jresult = new CMatrix44((const CMatrix44 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixRotationX(void * jarg1, float jarg2) {
  void * jresult ;
  CMatrix44 *arg1 = (CMatrix44 *) 0 ;
  CFLOAT arg2 ;
  CMatrix44 result;
  
  arg1 = (CMatrix44 *)jarg1; 
  arg2 = (CFLOAT)jarg2; 
  result = MatrixRotationX(arg1,arg2);
  jresult = new CMatrix44((const CMatrix44 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixRotationY(void * jarg1, float jarg2) {
  void * jresult ;
  CMatrix44 *arg1 = (CMatrix44 *) 0 ;
  CFLOAT arg2 ;
  CMatrix44 result;
  
  arg1 = (CMatrix44 *)jarg1; 
  arg2 = (CFLOAT)jarg2; 
  result = MatrixRotationY(arg1,arg2);
  jresult = new CMatrix44((const CMatrix44 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MatrixRotationZ(void * jarg1, float jarg2) {
  void * jresult ;
  CMatrix44 *arg1 = (CMatrix44 *) 0 ;
  CFLOAT arg2 ;
  CMatrix44 result;
  
  arg1 = (CMatrix44 *)jarg1; 
  arg2 = (CFLOAT)jarg2; 
  result = MatrixRotationZ(arg1,arg2);
  jresult = new CMatrix44((const CMatrix44 &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TOTALLYVISIBLE_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TOSCREENLEFT_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TOSCREENRIGHT_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TOSCREENTOP_get() {
  int jresult ;
  int result;
  
  result = (int)(4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TOSCREENBOTTOM_get() {
  int jresult ;
  int result;
  
  result = (int)(8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TOSCREENBACK_get() {
  int jresult ;
  int result;
  
  result = (int)(16);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TOSCREENFRONT_get() {
  int jresult ;
  int result;
  
  result = (int)(32);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CCamera() {
  void * jresult ;
  CCamera *result = 0 ;
  
  result = (CCamera *)new CCamera();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCamera_GetEyePt(void * jarg1) {
  void * jresult ;
  CCamera *arg1 = (CCamera *) 0 ;
  CVec3 *result = 0 ;
  
  arg1 = (CCamera *)jarg1; 
  result = (CVec3 *) &((CCamera const *)arg1)->GetEyePt();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCamera_GetLookatPt(void * jarg1) {
  void * jresult ;
  CCamera *arg1 = (CCamera *) 0 ;
  CVec3 *result = 0 ;
  
  arg1 = (CCamera *)jarg1; 
  result = (CVec3 *) &((CCamera const *)arg1)->GetLookatPt();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCamera_GetUpVec(void * jarg1) {
  void * jresult ;
  CCamera *arg1 = (CCamera *) 0 ;
  CVec3 *result = 0 ;
  
  arg1 = (CCamera *)jarg1; 
  result = (CVec3 *) &((CCamera const *)arg1)->GetUpVec();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCamera_GetViewDir(void * jarg1) {
  void * jresult ;
  CCamera *arg1 = (CCamera *) 0 ;
  CVec3 *result = 0 ;
  
  arg1 = (CCamera *)jarg1; 
  result = (CVec3 *) &((CCamera const *)arg1)->GetViewDir();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCamera_GetCross(void * jarg1) {
  void * jresult ;
  CCamera *arg1 = (CCamera *) 0 ;
  CVec3 *result = 0 ;
  
  arg1 = (CCamera *)jarg1; 
  result = (CVec3 *) &((CCamera const *)arg1)->GetCross();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCamera_GetViewMatrix(void * jarg1) {
  void * jresult ;
  CCamera *arg1 = (CCamera *) 0 ;
  CMatrix44 *result = 0 ;
  
  arg1 = (CCamera *)jarg1; 
  result = (CMatrix44 *) &((CCamera const *)arg1)->GetViewMatrix();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCamera_GetBillboardMatrix(void * jarg1) {
  void * jresult ;
  CCamera *arg1 = (CCamera *) 0 ;
  CMatrix44 *result = 0 ;
  
  arg1 = (CCamera *)jarg1; 
  result = (CMatrix44 *) &((CCamera const *)arg1)->GetBillboardMatrix();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCamera_GetProjMatrix(void * jarg1) {
  void * jresult ;
  CCamera *arg1 = (CCamera *) 0 ;
  CMatrix44 *result = 0 ;
  
  arg1 = (CCamera *)jarg1; 
  result = (CMatrix44 *) &((CCamera const *)arg1)->GetProjMatrix();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CCamera_GetFarPlane(void * jarg1) {
  float jresult ;
  CCamera *arg1 = (CCamera *) 0 ;
  float result;
  
  arg1 = (CCamera *)jarg1; 
  result = (float)((CCamera const *)arg1)->GetFarPlane();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CCamera_GetNearPlane(void * jarg1) {
  float jresult ;
  CCamera *arg1 = (CCamera *) 0 ;
  float result;
  
  arg1 = (CCamera *)jarg1; 
  result = (float)((CCamera const *)arg1)->GetNearPlane();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CCamera_GetFOV(void * jarg1) {
  float jresult ;
  CCamera *arg1 = (CCamera *) 0 ;
  float result;
  
  arg1 = (CCamera *)jarg1; 
  result = (float)((CCamera const *)arg1)->GetFOV();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CCamera_GetFOVv(void * jarg1) {
  float jresult ;
  CCamera *arg1 = (CCamera *) 0 ;
  float result;
  
  arg1 = (CCamera *)jarg1; 
  result = (float)((CCamera const *)arg1)->GetFOVv();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CCamera_GetAspect(void * jarg1) {
  float jresult ;
  CCamera *arg1 = (CCamera *) 0 ;
  float result;
  
  arg1 = (CCamera *)jarg1; 
  result = (float)((CCamera const *)arg1)->GetAspect();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCamera_SetViewMatrix(void * jarg1, void * jarg2) {
  CCamera *arg1 = (CCamera *) 0 ;
  CMatrix44 *arg2 = 0 ;
  
  arg1 = (CCamera *)jarg1; 
  arg2 = (CMatrix44 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CMatrix44 const & type is null", 0);
    return ;
  } 
  (arg1)->SetViewMatrix((CMatrix44 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCamera_SetShadowViewParams(void * jarg1, void * jarg2, void * jarg3) {
  CCamera *arg1 = (CCamera *) 0 ;
  CVec3 *arg2 = 0 ;
  CVec3 *arg3 = 0 ;
  
  arg1 = (CCamera *)jarg1; 
  arg2 = (CVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec3 const & type is null", 0);
    return ;
  } 
  arg3 = (CVec3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec3 const & type is null", 0);
    return ;
  } 
  (arg1)->SetShadowViewParams((CVec3 const &)*arg2,(CVec3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCamera_SetViewParams(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  CCamera *arg1 = (CCamera *) 0 ;
  CVec3 *arg2 = 0 ;
  CVec3 *arg3 = 0 ;
  CVec3 *arg4 = 0 ;
  
  arg1 = (CCamera *)jarg1; 
  arg2 = (CVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec3 const & type is null", 0);
    return ;
  } 
  arg3 = (CVec3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec3 const & type is null", 0);
    return ;
  } 
  arg4 = (CVec3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec3 const & type is null", 0);
    return ;
  } 
  (arg1)->SetViewParams((CVec3 const &)*arg2,(CVec3 const &)*arg3,(CVec3 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCamera_SetViewParams2(void * jarg1, void * jarg2, void * jarg3) {
  CCamera *arg1 = (CCamera *) 0 ;
  CVec3 *arg2 = 0 ;
  CVec3 *arg3 = 0 ;
  
  arg1 = (CCamera *)jarg1; 
  arg2 = (CVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec3 const & type is null", 0);
    return ;
  } 
  arg3 = (CVec3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec3 const & type is null", 0);
    return ;
  } 
  (arg1)->SetViewParams2((CVec3 const &)*arg2,(CVec3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCamera_SetViewParams3(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  CCamera *arg1 = (CCamera *) 0 ;
  CVec3 *arg2 = 0 ;
  CVec3 *arg3 = 0 ;
  CVec3 *arg4 = 0 ;
  
  arg1 = (CCamera *)jarg1; 
  arg2 = (CVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec3 const & type is null", 0);
    return ;
  } 
  arg3 = (CVec3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec3 const & type is null", 0);
    return ;
  } 
  arg4 = (CVec3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec3 const & type is null", 0);
    return ;
  } 
  (arg1)->SetViewParams3((CVec3 const &)*arg2,(CVec3 const &)*arg3,(CVec3 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCamera_SetProjParams__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7) {
  CCamera *arg1 = (CCamera *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  
  arg1 = (CCamera *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  (arg1)->SetProjParams(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCamera_SetProjParams__SWIG_1(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6) {
  CCamera *arg1 = (CCamera *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  
  arg1 = (CCamera *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  (arg1)->SetProjParams(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCamera_SetProjParams__SWIG_2(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  CCamera *arg1 = (CCamera *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (CCamera *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->SetProjParams(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCamera_GetProjParams(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  CCamera *arg1 = (CCamera *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  
  arg1 = (CCamera *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (float *)jarg4; 
  arg5 = (float *)jarg5; 
  (arg1)->GetProjParams(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCamera_SetProjMatrix(void * jarg1, void * jarg2) {
  CCamera *arg1 = (CCamera *) 0 ;
  CMatrix44 *arg2 = 0 ;
  
  arg1 = (CCamera *)jarg1; 
  arg2 = (CMatrix44 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CMatrix44 const & type is null", 0);
    return ;
  } 
  (arg1)->SetProjMatrix((CMatrix44 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCamera_SetProjMatrixNoClipPlanes(void * jarg1, void * jarg2) {
  CCamera *arg1 = (CCamera *) 0 ;
  CMatrix44 *arg2 = 0 ;
  
  arg1 = (CCamera *)jarg1; 
  arg2 = (CMatrix44 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CMatrix44 const & type is null", 0);
    return ;
  } 
  (arg1)->SetProjMatrixNoClipPlanes((CMatrix44 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCamera_SetNearFar(void * jarg1, float jarg2, float jarg3) {
  CCamera *arg1 = (CCamera *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (CCamera *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->SetNearFar(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCamera_GetShadowEyePt(void * jarg1) {
  void * jresult ;
  CCamera *arg1 = (CCamera *) 0 ;
  CVec3 *result = 0 ;
  
  arg1 = (CCamera *)jarg1; 
  result = (CVec3 *) &((CCamera const *)arg1)->GetShadowEyePt();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCamera_GetShadowDirection(void * jarg1) {
  void * jresult ;
  CCamera *arg1 = (CCamera *) 0 ;
  CVec3 *result = 0 ;
  
  arg1 = (CCamera *)jarg1; 
  result = (CVec3 *) &((CCamera const *)arg1)->GetShadowDirection();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCamera_MoveTo(void * jarg1, void * jarg2) {
  CCamera *arg1 = (CCamera *) 0 ;
  CVec3 *arg2 = 0 ;
  
  arg1 = (CCamera *)jarg1; 
  arg2 = (CVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec3 const & type is null", 0);
    return ;
  } 
  (arg1)->MoveTo((CVec3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCamera_MoveToPlane(void * jarg1, void * jarg2, float jarg3) {
  CCamera *arg1 = (CCamera *) 0 ;
  CVec3 *arg2 = 0 ;
  float arg3 ;
  
  arg1 = (CCamera *)jarg1; 
  arg2 = (CVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec3 const & type is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  (arg1)->MoveToPlane((CVec3 const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCamera_SetViewParamsAngles(void * jarg1, void * jarg2, float jarg3, float jarg4, float jarg5) {
  CCamera *arg1 = (CCamera *) 0 ;
  CVec3 *arg2 = 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (CCamera *)jarg1; 
  arg2 = (CVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec3 const & type is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->SetViewParamsAngles((CVec3 const &)*arg2,arg3,arg4,arg5);
}


SWIGEXPORT float SWIGSTDCALL CSharp_CCamera_GetYaw(void * jarg1) {
  float jresult ;
  CCamera *arg1 = (CCamera *) 0 ;
  float result;
  
  arg1 = (CCamera *)jarg1; 
  result = (float)((CCamera const *)arg1)->GetYaw();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CCamera_GetPicth(void * jarg1) {
  float jresult ;
  CCamera *arg1 = (CCamera *) 0 ;
  float result;
  
  arg1 = (CCamera *)jarg1; 
  result = (float)((CCamera const *)arg1)->GetPicth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CCamera_GetRoll(void * jarg1) {
  float jresult ;
  CCamera *arg1 = (CCamera *) 0 ;
  float result;
  
  arg1 = (CCamera *)jarg1; 
  result = (float)((CCamera const *)arg1)->GetRoll();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CCamera_ComputeBoxVisibility__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  CCamera *arg1 = (CCamera *) 0 ;
  float *arg2 ;
  float *arg3 ;
  Visibility result;
  
  arg1 = (CCamera *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float *)jarg3; 
  result = (Visibility)(arg1)->ComputeBoxVisibility((float const (*))arg2,(float const (*))arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CCamera_ComputeBoxVisibility__SWIG_1(void * jarg1, void * jarg2) {
  int jresult ;
  CCamera *arg1 = (CCamera *) 0 ;
  CAABBox *arg2 = 0 ;
  Visibility result;
  
  arg1 = (CCamera *)jarg1; 
  arg2 = (CAABBox *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CAABBox const & type is null", 0);
    return 0;
  } 
  result = (Visibility)(arg1)->ComputeBoxVisibility((CAABBox const &)*arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CCamera_ComputeSphereVisibility__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  unsigned int jresult ;
  CCamera *arg1 = (CCamera *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  bool result;
  
  arg1 = (CCamera *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (bool)(arg1)->ComputeSphereVisibility(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CCamera_ComputeSphereVisibility__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  CCamera *arg1 = (CCamera *) 0 ;
  float *arg2 ;
  bool result;
  
  arg1 = (CCamera *)jarg1; 
  arg2 = (float *)jarg2; 
  result = (bool)(arg1)->ComputeSphereVisibility((float const (*))arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CCamera_ComputeSphereVisibility__SWIG_2(void * jarg1, void * jarg2, float jarg3) {
  unsigned int jresult ;
  CCamera *arg1 = (CCamera *) 0 ;
  CVec3 *arg2 = 0 ;
  float arg3 ;
  bool result;
  
  arg1 = (CCamera *)jarg1; 
  arg2 = (CVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec3 const & type is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  result = (bool)(arg1)->ComputeSphereVisibility((CVec3 const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CCamera_ProjectionVisibilityTesting(void * jarg1, void * jarg2) {
  int jresult ;
  CCamera *arg1 = (CCamera *) 0 ;
  CVec3 arg2 ;
  CVec3 *argp2 ;
  int result;
  
  arg1 = (CCamera *)jarg1; 
  argp2 = (CVec3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null CVec3", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (int)((CCamera const *)arg1)->ProjectionVisibilityTesting(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CCamera_LastFrameChanged(void * jarg1) {
  unsigned int jresult ;
  CCamera *arg1 = (CCamera *) 0 ;
  bool result;
  
  arg1 = (CCamera *)jarg1; 
  result = (bool)(arg1)->LastFrameChanged();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCamera_ClearChangedFlag(void * jarg1) {
  CCamera *arg1 = (CCamera *) 0 ;
  
  arg1 = (CCamera *)jarg1; 
  (arg1)->ClearChangedFlag();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCamera_SetChangedFlag(void * jarg1) {
  CCamera *arg1 = (CCamera *) 0 ;
  
  arg1 = (CCamera *)jarg1; 
  (arg1)->SetChangedFlag();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCamera_GetUnprojectedBoundingVertices(void * jarg1, void * jarg2) {
  CCamera *arg1 = (CCamera *) 0 ;
  CVec3 *arg2 = (CVec3 *) 0 ;
  
  arg1 = (CCamera *)jarg1; 
  arg2 = (CVec3 *)jarg2; 
  ((CCamera const *)arg1)->GetUnprojectedBoundingVertices(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCamera_GetBoundingVertices(void * jarg1, void * jarg2) {
  CCamera *arg1 = (CCamera *) 0 ;
  CVec3 *arg2 = (CVec3 *) 0 ;
  
  arg1 = (CCamera *)jarg1; 
  arg2 = (CVec3 *)jarg2; 
  ((CCamera const *)arg1)->GetBoundingVertices(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCamera_GetFrustumPlane(void * jarg1, int jarg2) {
  void * jresult ;
  CCamera *arg1 = (CCamera *) 0 ;
  int arg2 ;
  CPlane *result = 0 ;
  
  arg1 = (CCamera *)jarg1; 
  arg2 = (int)jarg2; 
  result = (CPlane *)((CCamera const *)arg1)->GetFrustumPlane(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CCamera_ComputePointVisibility(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  CCamera *arg1 = (CCamera *) 0 ;
  CVec3 *arg2 = 0 ;
  bool result;
  
  arg1 = (CCamera *)jarg1; 
  arg2 = (CVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVec3 const & type is null", 0);
    return 0;
  } 
  result = (bool)((CCamera const *)arg1)->ComputePointVisibility((CVec3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CCamera(void * jarg1) {
  CCamera *arg1 = (CCamera *) 0 ;
  
  arg1 = (CCamera *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CXmlParam__SWIG_0() {
  void * jresult ;
  CXmlParam *result = 0 ;
  
  result = (CXmlParam *)new CXmlParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CXmlParam__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Engine2::String *arg1 = 0 ;
  Engine2::String *arg2 = 0 ;
  CXmlParam *result = 0 ;
  
  arg1 = (Engine2::String *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Engine2::String const & type is null", 0);
    return 0;
  } 
  arg2 = (Engine2::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Engine2::String const & type is null", 0);
    return 0;
  } 
  result = (CXmlParam *)new CXmlParam((Engine2::String const &)*arg1,(Engine2::String const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CXmlParam(void * jarg1) {
  CXmlParam *arg1 = (CXmlParam *) 0 ;
  
  arg1 = (CXmlParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CXmlParam_ParamName_set(void * jarg1, void * jarg2) {
  CXmlParam *arg1 = (CXmlParam *) 0 ;
  Engine2::String *arg2 = (Engine2::String *) 0 ;
  
  arg1 = (CXmlParam *)jarg1; 
  arg2 = (Engine2::String *)jarg2; 
  if (arg1) (arg1)->ParamName = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CXmlParam_ParamName_get(void * jarg1) {
  void * jresult ;
  CXmlParam *arg1 = (CXmlParam *) 0 ;
  Engine2::String *result = 0 ;
  
  arg1 = (CXmlParam *)jarg1; 
  result = (Engine2::String *)& ((arg1)->ParamName);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CXmlParam_ParamValue_set(void * jarg1, void * jarg2) {
  CXmlParam *arg1 = (CXmlParam *) 0 ;
  Engine2::String *arg2 = (Engine2::String *) 0 ;
  
  arg1 = (CXmlParam *)jarg1; 
  arg2 = (Engine2::String *)jarg2; 
  if (arg1) (arg1)->ParamValue = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CXmlParam_ParamValue_get(void * jarg1) {
  void * jresult ;
  CXmlParam *arg1 = (CXmlParam *) 0 ;
  Engine2::String *result = 0 ;
  
  arg1 = (CXmlParam *)jarg1; 
  result = (Engine2::String *)& ((arg1)->ParamValue);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IXmlParams(void * jarg1) {
  IXmlParams *arg1 = (IXmlParams *) 0 ;
  
  arg1 = (IXmlParams *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IXmlParams_GetParam(void * jarg1, int jarg2) {
  void * jresult ;
  IXmlParams *arg1 = (IXmlParams *) 0 ;
  int arg2 ;
  CXmlParam *result = 0 ;
  
  arg1 = (IXmlParams *)jarg1; 
  arg2 = (int)jarg2; 
  result = (CXmlParam *)((IXmlParams const *)arg1)->GetParam(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IXmlParams_GetNumParams(void * jarg1) {
  int jresult ;
  IXmlParams *arg1 = (IXmlParams *) 0 ;
  int result;
  
  arg1 = (IXmlParams *)jarg1; 
  result = (int)((IXmlParams const *)arg1)->GetNumParams();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IXmlParams_GetParamByName(void * jarg1, void * jarg2) {
  void * jresult ;
  IXmlParams *arg1 = (IXmlParams *) 0 ;
  Engine2::String arg2 ;
  Engine2::String *argp2 ;
  CXmlParam *result = 0 ;
  
  arg1 = (IXmlParams *)jarg1; 
  argp2 = (Engine2::String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Engine2::String", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (CXmlParam *)(arg1)->GetParamByName(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IXmlParams_GetValueByName(void * jarg1, void * jarg2) {
  char * jresult ;
  IXmlParams *arg1 = (IXmlParams *) 0 ;
  Engine2::String *arg2 = 0 ;
  char *result = 0 ;
  
  arg1 = (IXmlParams *)jarg1; 
  arg2 = (Engine2::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Engine2::String const & type is null", 0);
    return 0;
  } 
  result = (char *)((IXmlParams const *)arg1)->GetValueByName((Engine2::String const &)*arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IXmlParams_SetParam(void * jarg1, void * jarg2, void * jarg3) {
  IXmlParams *arg1 = (IXmlParams *) 0 ;
  Engine2::String *arg2 = 0 ;
  Engine2::String *arg3 = 0 ;
  
  arg1 = (IXmlParams *)jarg1; 
  arg2 = (Engine2::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Engine2::String const & type is null", 0);
    return ;
  } 
  arg3 = (Engine2::String *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Engine2::String const & type is null", 0);
    return ;
  } 
  (arg1)->SetParam((Engine2::String const &)*arg2,(Engine2::String const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CXmlParams() {
  void * jresult ;
  CXmlParams *result = 0 ;
  
  result = (CXmlParams *)new CXmlParams();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CXmlParams(void * jarg1) {
  CXmlParams *arg1 = (CXmlParams *) 0 ;
  
  arg1 = (CXmlParams *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CXmlParams_GetParam(void * jarg1, int jarg2) {
  void * jresult ;
  CXmlParams *arg1 = (CXmlParams *) 0 ;
  int arg2 ;
  CXmlParam *result = 0 ;
  
  arg1 = (CXmlParams *)jarg1; 
  arg2 = (int)jarg2; 
  result = (CXmlParam *)((CXmlParams const *)arg1)->GetParam(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CXmlParams_GetParamByName(void * jarg1, void * jarg2) {
  void * jresult ;
  CXmlParams *arg1 = (CXmlParams *) 0 ;
  Engine2::String arg2 ;
  Engine2::String *argp2 ;
  CXmlParam *result = 0 ;
  
  arg1 = (CXmlParams *)jarg1; 
  argp2 = (Engine2::String *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Engine2::String", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (CXmlParam *)(arg1)->GetParamByName(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CXmlParams_GetNumParams(void * jarg1) {
  int jresult ;
  CXmlParams *arg1 = (CXmlParams *) 0 ;
  int result;
  
  arg1 = (CXmlParams *)jarg1; 
  result = (int)((CXmlParams const *)arg1)->GetNumParams();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CXmlParams_GetValueByName(void * jarg1, void * jarg2) {
  char * jresult ;
  CXmlParams *arg1 = (CXmlParams *) 0 ;
  Engine2::String *arg2 = 0 ;
  char *result = 0 ;
  
  arg1 = (CXmlParams *)jarg1; 
  arg2 = (Engine2::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Engine2::String const & type is null", 0);
    return 0;
  } 
  result = (char *)((CXmlParams const *)arg1)->GetValueByName((Engine2::String const &)*arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CXmlParams_SetParam(void * jarg1, void * jarg2, void * jarg3) {
  CXmlParams *arg1 = (CXmlParams *) 0 ;
  Engine2::String *arg2 = 0 ;
  Engine2::String *arg3 = 0 ;
  
  arg1 = (CXmlParams *)jarg1; 
  arg2 = (Engine2::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Engine2::String const & type is null", 0);
    return ;
  } 
  arg3 = (Engine2::String *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Engine2::String const & type is null", 0);
    return ;
  } 
  (arg1)->SetParam((Engine2::String const &)*arg2,(Engine2::String const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CXmlParams_m_Contents_set(void * jarg1, void * jarg2) {
  CXmlParams *arg1 = (CXmlParams *) 0 ;
  XmlParamList *arg2 = (XmlParamList *) 0 ;
  
  arg1 = (CXmlParams *)jarg1; 
  arg2 = (XmlParamList *)jarg2; 
  if (arg1) (arg1)->m_Contents = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CXmlParams_m_Contents_get(void * jarg1) {
  void * jresult ;
  CXmlParams *arg1 = (CXmlParams *) 0 ;
  XmlParamList *result = 0 ;
  
  arg1 = (CXmlParams *)jarg1; 
  result = (XmlParamList *)& ((arg1)->m_Contents);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CXmlVector() {
  void * jresult ;
  CXmlVector *result = 0 ;
  
  result = (CXmlVector *)new CXmlVector();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CXmlVector(void * jarg1) {
  CXmlVector *arg1 = (CXmlVector *) 0 ;
  
  arg1 = (CXmlVector *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CXmlVector_Serialize(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  CXmlVector *arg1 = (CXmlVector *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  int arg3 ;
  BOOL result;
  
  arg1 = (CXmlVector *)jarg1; 
  arg2 = (FILE *)jarg2; 
  arg3 = (int)jarg3; 
  result = (BOOL)(arg1)->Serialize(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CXmlVector_SerializeBuffer(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  CXmlVector *arg1 = (CXmlVector *) 0 ;
  Engine2::String *arg2 = 0 ;
  int arg3 ;
  BOOL result;
  
  arg1 = (CXmlVector *)jarg1; 
  arg2 = (Engine2::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Engine2::String & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (BOOL)(arg1)->SerializeBuffer(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CXmlVector_Deserialize(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  CXmlVector *arg1 = (CXmlVector *) 0 ;
  Engine2::String *arg2 = 0 ;
  int arg3 ;
  int result;
  
  arg1 = (CXmlVector *)jarg1; 
  arg2 = (Engine2::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Engine2::String const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->Deserialize((Engine2::String const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CXmlVector_FindElementByName__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  CXmlVector *arg1 = (CXmlVector *) 0 ;
  Engine2::String *arg2 = 0 ;
  CXmlElement *result = 0 ;
  
  arg1 = (CXmlVector *)jarg1; 
  arg2 = (Engine2::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Engine2::String const & type is null", 0);
    return 0;
  } 
  result = (CXmlElement *)(arg1)->FindElementByName((Engine2::String const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CXmlVector_FindElementByNameConst(void * jarg1, void * jarg2) {
  void * jresult ;
  CXmlVector *arg1 = (CXmlVector *) 0 ;
  Engine2::String *arg2 = 0 ;
  CXmlElement *result = 0 ;
  
  arg1 = (CXmlVector *)jarg1; 
  arg2 = (Engine2::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Engine2::String const & type is null", 0);
    return 0;
  } 
  result = (CXmlElement *)((CXmlVector const *)arg1)->FindElementByNameConst((Engine2::String const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CXmlVector_AddElement(void * jarg1, void * jarg2) {
  void * jresult ;
  CXmlVector *arg1 = (CXmlVector *) 0 ;
  CXmlElement *arg2 = (CXmlElement *) 0 ;
  CXmlElement *result = 0 ;
  
  arg1 = (CXmlVector *)jarg1; 
  arg2 = (CXmlElement *)jarg2; 
  result = (CXmlElement *)(arg1)->AddElement((CXmlElement const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CXmlVector_SwapElements(void * jarg1, unsigned long jarg2, unsigned long jarg3) {
  CXmlVector *arg1 = (CXmlVector *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  arg1 = (CXmlVector *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  (arg1)->SwapElements(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CXmlVector_RemoveElement(void * jarg1, unsigned long jarg2) {
  CXmlVector *arg1 = (CXmlVector *) 0 ;
  size_t arg2 ;
  
  arg1 = (CXmlVector *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->RemoveElement(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CXmlVector_m_Contents_set(void * jarg1, void * jarg2) {
  CXmlVector *arg1 = (CXmlVector *) 0 ;
  XmlElementsList *arg2 = (XmlElementsList *) 0 ;
  
  arg1 = (CXmlVector *)jarg1; 
  arg2 = (XmlElementsList *)jarg2; 
  if (arg1) (arg1)->m_Contents = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CXmlVector_m_Contents_get(void * jarg1) {
  void * jresult ;
  CXmlVector *arg1 = (CXmlVector *) 0 ;
  XmlElementsList *result = 0 ;
  
  arg1 = (CXmlVector *)jarg1; 
  result = (XmlElementsList *)& ((arg1)->m_Contents);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CXmlElement() {
  void * jresult ;
  CXmlElement *result = 0 ;
  
  result = (CXmlElement *)new CXmlElement();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CXmlElement(void * jarg1) {
  CXmlElement *arg1 = (CXmlElement *) 0 ;
  
  arg1 = (CXmlElement *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CXmlElement_Serialize__SWIG_0(void * jarg1, void * jarg2) {
  int jresult ;
  CXmlElement *arg1 = (CXmlElement *) 0 ;
  Engine2::String *arg2 = 0 ;
  BOOL result;
  
  arg1 = (CXmlElement *)jarg1; 
  arg2 = (Engine2::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Engine2::String const & type is null", 0);
    return 0;
  } 
  result = (BOOL)(arg1)->Serialize((Engine2::String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CXmlElement_SerializeThroughAPI(void * jarg1, char * jarg2) {
  int jresult ;
  CXmlElement *arg1 = (CXmlElement *) 0 ;
  char *arg2 = (char *) 0 ;
  BOOL result;
  
  arg1 = (CXmlElement *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (BOOL)(arg1)->SerializeThroughAPI((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CXmlElement_Serialize__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  CXmlElement *arg1 = (CXmlElement *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  int arg3 ;
  BOOL result;
  
  arg1 = (CXmlElement *)jarg1; 
  arg2 = (FILE *)jarg2; 
  arg3 = (int)jarg3; 
  result = (BOOL)(arg1)->Serialize(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CXmlElement_SerializeBuffer(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  CXmlElement *arg1 = (CXmlElement *) 0 ;
  Engine2::String *arg2 = 0 ;
  int arg3 ;
  BOOL result;
  
  arg1 = (CXmlElement *)jarg1; 
  arg2 = (Engine2::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Engine2::String & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (BOOL)(arg1)->SerializeBuffer(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CXmlElement_SetName(void * jarg1, void * jarg2) {
  CXmlElement *arg1 = (CXmlElement *) 0 ;
  Engine2::String *arg2 = 0 ;
  
  arg1 = (CXmlElement *)jarg1; 
  arg2 = (Engine2::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Engine2::String const & type is null", 0);
    return ;
  } 
  (arg1)->SetName((Engine2::String const &)*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_CXmlElement_LoadFromXml__SWIG_0(void * jarg1, void * jarg2) {
  int jresult ;
  CXmlElement *arg1 = (CXmlElement *) 0 ;
  Engine2::String *arg2 = 0 ;
  BOOL result;
  
  arg1 = (CXmlElement *)jarg1; 
  arg2 = (Engine2::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Engine2::String const & type is null", 0);
    return 0;
  } 
  result = (BOOL)(arg1)->LoadFromXml((Engine2::String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CXmlElement_LoadFromXml__SWIG_1(void * jarg1, char * jarg2) {
  int jresult ;
  CXmlElement *arg1 = (CXmlElement *) 0 ;
  char *arg2 = (char *) 0 ;
  BOOL result;
  
  arg1 = (CXmlElement *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (BOOL)(arg1)->LoadFromXml((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CXmlElement_LoadFromStr__SWIG_0(void * jarg1, void * jarg2) {
  int jresult ;
  CXmlElement *arg1 = (CXmlElement *) 0 ;
  Engine2::String *arg2 = 0 ;
  BOOL result;
  
  arg1 = (CXmlElement *)jarg1; 
  arg2 = (Engine2::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Engine2::String const & type is null", 0);
    return 0;
  } 
  result = (BOOL)(arg1)->LoadFromStr((Engine2::String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CXmlElement_LoadFromStr__SWIG_1(void * jarg1, char * jarg2, unsigned long jarg3) {
  int jresult ;
  CXmlElement *arg1 = (CXmlElement *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  BOOL result;
  
  arg1 = (CXmlElement *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (BOOL)(arg1)->LoadFromStr((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CXmlElement_GetParamValueByName(void * jarg1, void * jarg2) {
  char * jresult ;
  CXmlElement *arg1 = (CXmlElement *) 0 ;
  Engine2::String *arg2 = 0 ;
  char *result = 0 ;
  
  arg1 = (CXmlElement *)jarg1; 
  arg2 = (Engine2::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Engine2::String const & type is null", 0);
    return 0;
  } 
  result = (char *)((CXmlElement const *)arg1)->GetParamValueByName((Engine2::String const &)*arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CXmlElement_GetElementByName(void * jarg1, void * jarg2) {
  void * jresult ;
  CXmlElement *arg1 = (CXmlElement *) 0 ;
  Engine2::String *arg2 = 0 ;
  CXmlElement *result = 0 ;
  
  arg1 = (CXmlElement *)jarg1; 
  arg2 = (Engine2::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Engine2::String const & type is null", 0);
    return 0;
  } 
  result = (CXmlElement *)(arg1)->GetElementByName((Engine2::String const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CXmlElement_Deserialize__SWIG_0(void * jarg1, void * jarg2) {
  int jresult ;
  CXmlElement *arg1 = (CXmlElement *) 0 ;
  Engine2::String *arg2 = 0 ;
  BOOL result;
  
  arg1 = (CXmlElement *)jarg1; 
  arg2 = (Engine2::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Engine2::String const & type is null", 0);
    return 0;
  } 
  result = (BOOL)(arg1)->Deserialize((Engine2::String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CXmlElement_Deserialize__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  CXmlElement *arg1 = (CXmlElement *) 0 ;
  Engine2::String *arg2 = 0 ;
  int arg3 ;
  int result;
  
  arg1 = (CXmlElement *)jarg1; 
  arg2 = (Engine2::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Engine2::String const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->Deserialize((Engine2::String const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CXmlElement_ClearContents(void * jarg1) {
  CXmlElement *arg1 = (CXmlElement *) 0 ;
  
  arg1 = (CXmlElement *)jarg1; 
  (arg1)->ClearContents();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CXmlElement_Clone(void * jarg1) {
  void * jresult ;
  CXmlElement *arg1 = (CXmlElement *) 0 ;
  CXmlElement *result = 0 ;
  
  arg1 = (CXmlElement *)jarg1; 
  result = (CXmlElement *)((CXmlElement const *)arg1)->Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CXmlElement_ProcessXmlNode(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  CXmlElement *arg1 = (CXmlElement *) 0 ;
  xml::TiXmlNode *arg2 = (xml::TiXmlNode *) 0 ;
  CXmlElement *arg3 = (CXmlElement *) 0 ;
  BOOL result;
  
  arg1 = (CXmlElement *)jarg1; 
  arg2 = (xml::TiXmlNode *)jarg2; 
  arg3 = (CXmlElement *)jarg3; 
  result = (BOOL)(arg1)->ProcessXmlNode(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CXmlElement_CopyFrom(void * jarg1, void * jarg2) {
  CXmlElement *arg1 = (CXmlElement *) 0 ;
  CXmlElement *arg2 = (CXmlElement *) 0 ;
  
  arg1 = (CXmlElement *)jarg1; 
  arg2 = (CXmlElement *)jarg2; 
  (arg1)->CopyFrom((CXmlElement const *)arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CXmlElement_GetName(void * jarg1) {
  char * jresult ;
  CXmlElement *arg1 = (CXmlElement *) 0 ;
  char *result = 0 ;
  
  arg1 = (CXmlElement *)jarg1; 
  result = (char *)(arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CXmlElement_m_Params_set(void * jarg1, void * jarg2) {
  CXmlElement *arg1 = (CXmlElement *) 0 ;
  CXmlParams *arg2 = (CXmlParams *) 0 ;
  
  arg1 = (CXmlElement *)jarg1; 
  arg2 = (CXmlParams *)jarg2; 
  if (arg1) (arg1)->m_Params = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CXmlElement_m_Params_get(void * jarg1) {
  void * jresult ;
  CXmlElement *arg1 = (CXmlElement *) 0 ;
  CXmlParams *result = 0 ;
  
  arg1 = (CXmlElement *)jarg1; 
  result = (CXmlParams *)& ((arg1)->m_Params);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CXmlElement_m_Elements_set(void * jarg1, void * jarg2) {
  CXmlElement *arg1 = (CXmlElement *) 0 ;
  CXmlVector *arg2 = (CXmlVector *) 0 ;
  
  arg1 = (CXmlElement *)jarg1; 
  arg2 = (CXmlVector *)jarg2; 
  if (arg1) (arg1)->m_Elements = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CXmlElement_m_Elements_get(void * jarg1) {
  void * jresult ;
  CXmlElement *arg1 = (CXmlElement *) 0 ;
  CXmlVector *result = 0 ;
  
  arg1 = (CXmlElement *)jarg1; 
  result = (CXmlVector *)& ((arg1)->m_Elements);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CXmlElement_m_szName_set(void * jarg1, void * jarg2) {
  CXmlElement *arg1 = (CXmlElement *) 0 ;
  Engine2::String *arg2 = (Engine2::String *) 0 ;
  
  arg1 = (CXmlElement *)jarg1; 
  arg2 = (Engine2::String *)jarg2; 
  if (arg1) (arg1)->m_szName = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CXmlElement_m_szName_get(void * jarg1) {
  void * jresult ;
  CXmlElement *arg1 = (CXmlElement *) 0 ;
  Engine2::String *result = 0 ;
  
  arg1 = (CXmlElement *)jarg1; 
  result = (Engine2::String *)& ((arg1)->m_szName);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CXmlElement_AppendXML(void * jarg1, void * jarg2) {
  int jresult ;
  CXmlElement *arg1 = (CXmlElement *) 0 ;
  CXmlElement *arg2 = (CXmlElement *) 0 ;
  BOOL result;
  
  arg1 = (CXmlElement *)jarg1; 
  arg2 = (CXmlElement *)jarg2; 
  result = (BOOL)(arg1)->AppendXML(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XMLAddInt(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  CXmlElement *arg1 = (CXmlElement *) 0 ;
  Engine2::String *arg2 = 0 ;
  int arg3 ;
  BOOL result;
  
  arg1 = (CXmlElement *)jarg1; 
  arg2 = (Engine2::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Engine2::String const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (BOOL)XMLAddInt(arg1,(Engine2::String_template< char,Engine2::StandardAllocator > const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XMLGetInt(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  int jresult ;
  CXmlElement *arg1 = (CXmlElement *) 0 ;
  Engine2::String *arg2 = 0 ;
  int arg3 ;
  BOOL *arg4 = 0 ;
  int result;
  
  arg1 = (CXmlElement *)jarg1; 
  arg2 = (Engine2::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Engine2::String const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  arg4 = (BOOL *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BOOL & type is null", 0);
    return 0;
  } 
  result = (int)XMLGetInt((CXmlElement const *)arg1,(Engine2::String_template< char,Engine2::StandardAllocator > const &)*arg2,arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XMLAddFloat(void * jarg1, void * jarg2, float jarg3) {
  int jresult ;
  CXmlElement *arg1 = (CXmlElement *) 0 ;
  Engine2::String *arg2 = 0 ;
  float arg3 ;
  BOOL result;
  
  arg1 = (CXmlElement *)jarg1; 
  arg2 = (Engine2::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Engine2::String const & type is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  result = (BOOL)XMLAddFloat(arg1,(Engine2::String_template< char,Engine2::StandardAllocator > const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XMLGetFloat(void * jarg1, void * jarg2, float jarg3, void * jarg4) {
  float jresult ;
  CXmlElement *arg1 = (CXmlElement *) 0 ;
  Engine2::String *arg2 = 0 ;
  float arg3 ;
  BOOL *arg4 = 0 ;
  float result;
  
  arg1 = (CXmlElement *)jarg1; 
  arg2 = (Engine2::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Engine2::String const & type is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  arg4 = (BOOL *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BOOL & type is null", 0);
    return 0;
  } 
  result = (float)XMLGetFloat((CXmlElement const *)arg1,(Engine2::String_template< char,Engine2::StandardAllocator > const &)*arg2,arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XMLGetBOOL(void * jarg1, void * jarg2) {
  int jresult ;
  CXmlElement *arg1 = (CXmlElement *) 0 ;
  Engine2::String *arg2 = 0 ;
  BOOL result;
  
  arg1 = (CXmlElement *)jarg1; 
  arg2 = (Engine2::String *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Engine2::String const & type is null", 0);
    return 0;
  } 
  result = (BOOL)XMLGetBOOL((CXmlElement const *)arg1,(Engine2::String_template< char,Engine2::StandardAllocator > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetXmlFileDataFromStream__SWIG_0(void * jarg1, void * jarg2, char * jarg3, int jarg4) {
  int jresult ;
  IVFSFileManager *arg1 = (IVFSFileManager *) 0 ;
  CXmlElement *arg2 = (CXmlElement *) 0 ;
  char *arg3 = (char *) 0 ;
  BOOL arg4 ;
  BOOL result;
  
  arg1 = (IVFSFileManager *)jarg1; 
  arg2 = (CXmlElement *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (BOOL)jarg4; 
  result = (BOOL)GetXmlFileDataFromStream(arg1,arg2,(char const *)arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetXmlFileDataFromStream__SWIG_1(void * jarg1, void * jarg2, char * jarg3) {
  int jresult ;
  IVFSFileManager *arg1 = (IVFSFileManager *) 0 ;
  CXmlElement *arg2 = (CXmlElement *) 0 ;
  char *arg3 = (char *) 0 ;
  BOOL result;
  
  arg1 = (IVFSFileManager *)jarg1; 
  arg2 = (CXmlElement *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (BOOL)GetXmlFileDataFromStream(arg1,arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT IMeshInfo * SWIGSTDCALL CSharp_IMaterialInfo_SWIGUpcast(IMaterialInfo *jarg1) {
    return (IMeshInfo *)jarg1;
}

SWIGEXPORT IMeshInfo * SWIGSTDCALL CSharp_IIndoorMeshInfo_SWIGUpcast(IIndoorMeshInfo *jarg1) {
    return (IMeshInfo *)jarg1;
}

SWIGEXPORT IMeshInfo * SWIGSTDCALL CSharp_IRainAreaInfo_SWIGUpcast(IRainAreaInfo *jarg1) {
    return (IMeshInfo *)jarg1;
}

SWIGEXPORT IMaterialInfo * SWIGSTDCALL CSharp_IBaseMeshInfo_SWIGUpcast(IBaseMeshInfo *jarg1) {
    return (IMaterialInfo *)jarg1;
}

SWIGEXPORT IBaseMeshInfo * SWIGSTDCALL CSharp_IAnimMeshInfo_SWIGUpcast(IAnimMeshInfo *jarg1) {
    return (IBaseMeshInfo *)jarg1;
}

SWIGEXPORT IXmlParams * SWIGSTDCALL CSharp_CXmlParams_SWIGUpcast(CXmlParams *jarg1) {
    return (IXmlParams *)jarg1;
}

#ifdef __cplusplus
}
#endif

